"use strict";
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Text_Email_Parser = require("../Text.Email.Parser/index.js");
var Text_Parsing_StringParser = require("../Text.Parsing.StringParser/index.js");

// | Run a parser for an input string, returning either an error or a result.
var runEmailParser = function (s) {
    return Text_Parsing_StringParser.runParser(Text_Email_Parser.addrSpec)(s);
};

// | If you want to find out *why* a particular string is not
//   an email address, use this.
var validate = (function () {
    var $8 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "error";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "pos";
        }
    })(Data_Show.showRecordFieldsNil)(Data_Show.showInt))(Data_Show.showString))));
    return function ($9) {
        return $8(runEmailParser($9));
    };
})();

// | Validates whether a particular string is an email address
//   according to RFC5322.
var isValid = function (emailString) {
    var v = validate(emailString);
    if (v instanceof Data_Either.Left) {
        return false;
    };
    if (v instanceof Data_Either.Right) {
        return true;
    };
    throw new Error("Failed pattern match at Text.Email.Validate (line 35, column 5 - line 37, column 25): " + [ v.constructor.name ]);
};

// | Smart constructor for an email address
var emailAddress = function (emailString) {
    var v = validate(emailString);
    if (v instanceof Data_Either.Left) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Data_Either.Right) {
        return new Data_Maybe.Just(v.value0);
    };
    throw new Error("Failed pattern match at Text.Email.Validate (line 22, column 5 - line 24, column 35): " + [ v.constructor.name ]);
};

// | Checks that an email is valid and returns a version of it
//   where comments and whitespace have been removed.
var canonicalizeEmail = (function () {
    var $10 = Data_Functor.map(Data_Maybe.functorMaybe)(Text_Email_Parser.toString);
    return function ($11) {
        return $10(emailAddress($11));
    };
})();
module.exports = {
    isValid: isValid,
    validate: validate,
    emailAddress: emailAddress,
    canonicalizeEmail: canonicalizeEmail,
    runEmailParser: runEmailParser,
    EmailAddress: Text_Email_Parser.EmailAddress,
    addrSpec: Text_Email_Parser.addrSpec,
    domainPart: Text_Email_Parser.domainPart,
    localPart: Text_Email_Parser.localPart,
    toString: Text_Email_Parser.toString
};
