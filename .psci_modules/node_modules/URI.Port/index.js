"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Partial_Unsafe = require("../Partial.Unsafe/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String/index.js");
var Text_Parsing_Parser_String_Basic = require("../Text.Parsing.Parser.String.Basic/index.js");

// | The port component of a host in a URI.
var Port = function (x) {
    return x;
};

// | Returns the port number as an integer.
var toInt = function (v) {
    return v;
};
var showPort = {
    show: function (v) {
        return "(Port.unsafeFromInt " + (Data_Show.show(Data_Show.showInt)(v) + ")");
    }
};

// | A printer for the port component of a host in a URI. Will print the value
// | with a `':'` prefix.
var print = function (v) {
    return ":" + Data_Show.show(Data_Show.showInt)(v);
};

// | A parser for the port component of a host in a URI. Expects values with a
// | `':'` prefix.
var parser = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_CodeUnits.fromCharArray)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)(":"))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String_Basic.digit(Data_Identity.monadIdentity)))))(function (s) {
    var v = Data_Int.fromStringAs(Data_Int.decimal)(s);
    if (v instanceof Data_Maybe.Just) {
        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(v.value0);
    };
    return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Expected a valid port number");
});
var ordPort = Data_Ord.ordInt;

// | Attempts to create a port from the passed integer. If the value falls
// | outside of the range 0-65535 (inclusive) `Nothing` will be returned.
var fromInt = function (i) {
    if (i >= 0 && i <= 65535) {
        return new Data_Maybe.Just(i);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at URI.Port (line 36, column 1 - line 36, column 27): " + [ i.constructor.name ]);
};

// | Constructs a port from an integer directly: if the value is not an
// | acceptable port number a runtime error will be thrown.
// |
// | This is intended as a convenience when describing `Port`s statically in
// | PureScript code, in all other cases `fromInt` should be preferred.
var unsafeFromInt = function (i) {
    var v = fromInt(i);
    if (v instanceof Data_Maybe.Just) {
        return v.value0;
    };
    if (v instanceof Data_Maybe.Nothing) {
        return Partial_Unsafe.unsafeCrashWith("Port value " + (Data_Show.show(Data_Show.showInt)(i) + " is out of range"));
    };
    throw new Error("Failed pattern match at URI.Port (line 48, column 3 - line 50, column 78): " + [ v.constructor.name ]);
};
var eqPort = Data_Eq.eqInt;
module.exports = {
    toInt: toInt,
    fromInt: fromInt,
    unsafeFromInt: unsafeFromInt,
    parser: parser,
    print: print,
    eqPort: eqPort,
    ordPort: ordPort,
    showPort: showPort
};
