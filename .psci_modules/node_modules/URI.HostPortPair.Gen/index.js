"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Gen_Class = require("../Control.Monad.Gen.Class/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_These = require("../Data.These/index.js");
var URI_Host_Gen = require("../URI.Host.Gen/index.js");
var URI_Port_Gen = require("../URI.Port.Gen/index.js");

// | Generates a random `HostPortPair` for testing purposes.
var genHostPortPair = function (dictMonadGen) {
    return function (host) {
        return function (port) {
            var sometimes = function (chance) {
                return function (g) {
                    return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Control_Monad_Gen_Class.chooseFloat(dictMonadGen)(0.0)(1.0))(function (n) {
                        var $1 = n > chance;
                        if ($1) {
                            return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Maybe.Just.create)(g);
                        };
                        return Control_Applicative.pure((dictMonadGen.Monad0()).Applicative0())(Data_Maybe.Nothing.value);
                    });
                };
            };
            return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(sometimes(0.75)(host))(function (h) {
                return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(sometimes(0.25)(port))(function (p) {
                    return Control_Applicative.pure((dictMonadGen.Monad0()).Applicative0())((function () {
                        if (h instanceof Data_Maybe.Just && p instanceof Data_Maybe.Just) {
                            return new Data_Maybe.Just(new Data_These.Both(h.value0, p.value0));
                        };
                        if (h instanceof Data_Maybe.Just && p instanceof Data_Maybe.Nothing) {
                            return new Data_Maybe.Just(new Data_These.This(h.value0));
                        };
                        if (h instanceof Data_Maybe.Nothing && p instanceof Data_Maybe.Just) {
                            return new Data_Maybe.Just(new Data_These.That(p.value0));
                        };
                        if (h instanceof Data_Maybe.Nothing && p instanceof Data_Maybe.Nothing) {
                            return Data_Maybe.Nothing.value;
                        };
                        throw new Error("Failed pattern match at URI.HostPortPair.Gen (line 26, column 8 - line 30, column 31): " + [ h.constructor.name, p.constructor.name ]);
                    })());
                });
            });
        };
    };
};
module.exports = {
    genHostPortPair: genHostPortPair,
    genHost: URI_Host_Gen.genHost,
    genIPv4: URI_Host_Gen.genIPv4,
    genRegName: URI_Host_Gen.genRegName,
    genPort: URI_Port_Gen.genPort
};
