"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_DateTime = require("../Data.DateTime/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Formatter_DateTime = require("../Data.Formatter.DateTime/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Purescriptify_Capability_Now = require("../Purescriptify.Capability.Now/index.js");
var Debug = (function () {
    function Debug() {

    };
    Debug.value = new Debug();
    return Debug;
})();
var Info = (function () {
    function Info() {

    };
    Info.value = new Info();
    return Info;
})();
var Warn = (function () {
    function Warn() {

    };
    Warn.value = new Warn();
    return Warn;
})();
var $$Error = (function () {
    function $$Error() {

    };
    $$Error.value = new $$Error();
    return $$Error;
})();
var Log = function (x) {
    return x;
};
var reason = function (v) {
    return v.reason;
};
var mkLog = function (dictNow) {
    return function (logReason) {
        return function (inputMessage) {
            
            // Will format "2018-10-25 11:25:29 AM"
var formatTimestamp = (function () {
                var $22 = Data_Either.either(Data_Function["const"]("(Failed to assign time)"))(Control_Category.identity(Control_Category.categoryFn));
                var $23 = Data_Formatter_DateTime.formatDateTime("YYYY-DD-MM hh:mm:ss a");
                return function ($24) {
                    return $22($23($24));
                };
            })();
            return Control_Bind.bind((dictNow.Monad0()).Bind1())(Purescriptify_Capability_Now.nowDateTime(dictNow))(function (now) {
                
                // Will produce a header like "{DEBUG: 2018-10-25 11:25:29 AM]\nMessage contents..."
var headerWith = function (start) {
                    return Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString)([ "[", start, ": ", formatTimestamp(now), "]\x0a", inputMessage ]);
                };
                
                // Writes the header with the correct log reason
var formattedLog = headerWith((function () {
                    if (logReason instanceof Debug) {
                        return "DEBUG";
                    };
                    if (logReason instanceof Info) {
                        return "INFO";
                    };
                    if (logReason instanceof Warn) {
                        return "WARNING";
                    };
                    if (logReason instanceof $$Error) {
                        return "ERROR";
                    };
                    throw new Error("Failed pattern match at Purescriptify.Data.Log (line 50, column 18 - line 54, column 25): " + [ logReason.constructor.name ]);
                })());
                return Control_Applicative.pure((dictNow.Monad0()).Applicative0())({
                    reason: logReason,
                    timestamp: now,
                    message: formattedLog
                });
            });
        };
    };
};
var message = function (v) {
    return v.message;
};
var eqLogReason = {
    eq: function (x) {
        return function (y) {
            if (x instanceof Debug && y instanceof Debug) {
                return true;
            };
            if (x instanceof Info && y instanceof Info) {
                return true;
            };
            if (x instanceof Warn && y instanceof Warn) {
                return true;
            };
            if (x instanceof $$Error && y instanceof $$Error) {
                return true;
            };
            return false;
        };
    }
};
var ordLogReason = {
    compare: function (x) {
        return function (y) {
            if (x instanceof Debug && y instanceof Debug) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Debug) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Debug) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Info && y instanceof Info) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Info) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Info) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Warn && y instanceof Warn) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Warn) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Warn) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof $$Error && y instanceof $$Error) {
                return Data_Ordering.EQ.value;
            };
            throw new Error("Failed pattern match at Purescriptify.Data.Log (line 24, column 1 - line 24, column 46): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return eqLogReason;
    }
};
var eqLog = {
    eq: function (x) {
        return function (y) {
            return x.message === y.message && Data_Eq.eq(eqLogReason)(x.reason)(y.reason) && Data_Eq.eq(Data_DateTime.eqDateTime)(x.timestamp)(y.timestamp);
        };
    }
};
module.exports = {
    Debug: Debug,
    Info: Info,
    Warn: Warn,
    "Error": $$Error,
    message: message,
    reason: reason,
    mkLog: mkLog,
    eqLogReason: eqLogReason,
    ordLogReason: ordLogReason,
    eqLog: eqLog
};
