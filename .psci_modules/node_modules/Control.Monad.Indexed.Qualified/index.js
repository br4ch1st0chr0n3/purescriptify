
// | Use this module to rebind `do`/`ado` notation via Qualified Do/Ado.
// |
// | For example, here's how one would rebind do notation.
// | ```purescript
// | import Control.Monad.Indexed.Qualified as Ix
// |
// | f = Ix.do -- remaps do notation to use `ibind` and `idiscard`
// |   x <- foo
// |   bar
// |   I.pure y
// | ```
// |
// | For example, here's how one would rebind ado notation.
// | ```purescript
// | import Control.Monad.Indexed.Qualified as Ix
// |
// | g = Ix.ado -- remaps do notation to use `iapply` and `imap`
// |  x <- foo
// |  y <- bar
// |  in x + y
// | ```
"use strict";
var Control_Applicative_Indexed = require("../Control.Applicative.Indexed/index.js");
var Control_Apply_Indexed = require("../Control.Apply.Indexed/index.js");
var Control_Bind_Indexed = require("../Control.Bind.Indexed/index.js");
var Data_Functor_Indexed = require("../Data.Functor.Indexed/index.js");
var pure = function (dictIxApplicative) {
    return Control_Applicative_Indexed.ipure(dictIxApplicative);
};
var map = function (dictIxFunctor) {
    return Data_Functor_Indexed.imap(dictIxFunctor);
};
var discard = function (dictIxBind) {
    return function (dictIxDiscard) {
        return Control_Bind_Indexed.idiscard(dictIxDiscard)(dictIxBind);
    };
};
var bind = function (dictIxMonad) {
    return Control_Bind_Indexed.ibind(dictIxMonad.IxBind1());
};
var apply = function (dictIxApply) {
    return Control_Apply_Indexed.iapply(dictIxApply);
};
module.exports = {
    map: map,
    apply: apply,
    pure: pure,
    bind: bind,
    discard: discard
};
