"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Lens_Prism = require("../Data.Lens.Prism/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show_Generic = require("../Data.Show.Generic/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators/index.js");
var URI_Host_IPv4Address = require("../URI.Host.IPv4Address/index.js");
var URI_Host_IPv6Address = require("../URI.Host.IPv6Address/index.js");
var URI_Host_RegName = require("../URI.Host.RegName/index.js");

// | A host address. Supports named addresses, IPv4, and IPv6.
var IPv6Address = (function () {
    function IPv6Address(value0) {
        this.value0 = value0;
    };
    IPv6Address.create = function (value0) {
        return new IPv6Address(value0);
    };
    return IPv6Address;
})();

// | A host address. Supports named addresses, IPv4, and IPv6.
var IPv4Address = (function () {
    function IPv4Address(value0) {
        this.value0 = value0;
    };
    IPv4Address.create = function (value0) {
        return new IPv4Address(value0);
    };
    return IPv4Address;
})();

// | A host address. Supports named addresses, IPv4, and IPv6.
var NameAddress = (function () {
    function NameAddress(value0) {
        this.value0 = value0;
    };
    NameAddress.create = function (value0) {
        return new NameAddress(value0);
    };
    return NameAddress;
})();

// | A printer for host addresses.
var print = function (v) {
    if (v instanceof IPv6Address) {
        return URI_Host_IPv6Address.unsafeToString(v.value0);
    };
    if (v instanceof IPv4Address) {
        return URI_Host_IPv4Address.print(v.value0);
    };
    if (v instanceof NameAddress) {
        return URI_Host_RegName.print(v.value0);
    };
    throw new Error("Failed pattern match at URI.Host (line 49, column 9 - line 52, column 40): " + [ v.constructor.name ]);
};

// | A parser for host addresses.
var parser = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(IPv6Address.create)(URI_Host_IPv6Address.parser))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(IPv4Address.create)(URI_Host_IPv4Address.parser))))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(NameAddress.create)(URI_Host_RegName.parser));
var genericHost = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return new IPv6Address(x.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
            return new IPv4Address(x.value0.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
            return new NameAddress(x.value0.value0);
        };
        throw new Error("Failed pattern match at URI.Host (line 37, column 1 - line 37, column 45): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof IPv6Address) {
            return new Data_Generic_Rep.Inl(x.value0);
        };
        if (x instanceof IPv4Address) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
        };
        if (x instanceof NameAddress) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0));
        };
        throw new Error("Failed pattern match at URI.Host (line 37, column 1 - line 37, column 45): " + [ x.constructor.name ]);
    }
};
var showHost = {
    show: Data_Show_Generic.genericShow(genericHost)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(URI_Host_IPv6Address.showIPv6Address))({
        reflectSymbol: function () {
            return "IPv6Address";
        }
    }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(URI_Host_IPv4Address.showIPv4Address))({
        reflectSymbol: function () {
            return "IPv4Address";
        }
    }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(URI_Host_RegName.showRegName))({
        reflectSymbol: function () {
            return "NameAddress";
        }
    }))))
};
var eqHost = {
    eq: function (x) {
        return function (y) {
            if (x instanceof IPv6Address && y instanceof IPv6Address) {
                return Data_Eq.eq(URI_Host_IPv6Address.eqIPv6Address)(x.value0)(y.value0);
            };
            if (x instanceof IPv4Address && y instanceof IPv4Address) {
                return Data_Eq.eq(URI_Host_IPv4Address.eqIPv4Address)(x.value0)(y.value0);
            };
            if (x instanceof NameAddress && y instanceof NameAddress) {
                return Data_Eq.eq(URI_Host_RegName.eqRegName)(x.value0)(y.value0);
            };
            return false;
        };
    }
};
var ordHost = {
    compare: function (x) {
        return function (y) {
            if (x instanceof IPv6Address && y instanceof IPv6Address) {
                return Data_Ord.compare(URI_Host_IPv6Address.ordIPv6Address)(x.value0)(y.value0);
            };
            if (x instanceof IPv6Address) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof IPv6Address) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof IPv4Address && y instanceof IPv4Address) {
                return Data_Ord.compare(URI_Host_IPv4Address.ordIPv4Address)(x.value0)(y.value0);
            };
            if (x instanceof IPv4Address) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof IPv4Address) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof NameAddress && y instanceof NameAddress) {
                return Data_Ord.compare(URI_Host_RegName.ordRegName)(x.value0)(y.value0);
            };
            throw new Error("Failed pattern match at URI.Host (line 36, column 1 - line 36, column 35): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return eqHost;
    }
};

// | A prism for the `NameAddress` constructor.
var _NameAddress = function (dictChoice) {
    return Data_Lens_Prism["prism'"](NameAddress.create)(function (v) {
        if (v instanceof NameAddress) {
            return new Data_Maybe.Just(v.value0);
        };
        return Data_Maybe.Nothing.value;
    })(dictChoice);
};

// | A prism for the `IPv6Address` constructor.
var _IPv6Address = function (dictChoice) {
    return Data_Lens_Prism["prism'"](IPv6Address.create)(function (v) {
        if (v instanceof IPv6Address) {
            return new Data_Maybe.Just(v.value0);
        };
        return Data_Maybe.Nothing.value;
    })(dictChoice);
};

// | A prism for the `IPv4Address` constructor.
var _IPv4Address = function (dictChoice) {
    return Data_Lens_Prism["prism'"](IPv4Address.create)(function (v) {
        if (v instanceof IPv4Address) {
            return new Data_Maybe.Just(v.value0);
        };
        return Data_Maybe.Nothing.value;
    })(dictChoice);
};
module.exports = {
    IPv6Address: IPv6Address,
    IPv4Address: IPv4Address,
    NameAddress: NameAddress,
    parser: parser,
    print: print,
    "_IPv6Address": _IPv6Address,
    "_IPv4Address": _IPv4Address,
    "_NameAddress": _NameAddress,
    eqHost: eqHost,
    ordHost: ordHost,
    genericHost: genericHost,
    showHost: showHost
};
