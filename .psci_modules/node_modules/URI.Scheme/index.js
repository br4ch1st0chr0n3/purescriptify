"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_NonEmpty_CodeUnits = require("../Data.String.NonEmpty.CodeUnits/index.js");
var Data_String_NonEmpty_Internal = require("../Data.String.NonEmpty.Internal/index.js");
var Partial_Unsafe = require("../Partial.Unsafe/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String/index.js");
var URI_Common = require("../URI.Common/index.js");

// | The scheme part of an absolute URI. For example: `http`, `ftp`, `git`.
var Scheme = function (x) {
    return x;
};

// | Returns the string value for a scheme.
// |
// | ``` purescript
// | toString (unsafeFromString "http") == "http"
// | toString (unsafeFromString "git+ssh") == "git+ssh"
// | ```
var toString = function (v) {
    return v;
};
var showScheme = {
    show: function (v) {
        return "(Scheme.unsafeFromString " + (Data_Show.show(Data_Show.showString)(Data_String_NonEmpty_Internal.toString(v)) + ")");
    }
};

// | A printer for the scheme component of a URI. Prints a scheme value
// | followed by a `':'`.
var print = function (v) {
    return Data_String_NonEmpty_Internal.toString(v) + ":";
};
var parseScheme = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(URI_Common.alpha)(function (init) {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(URI_Common.alphaNum)(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("+")))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("-")))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("."))))(function (rest) {
        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_String_NonEmpty_Internal.appendString(Data_String_NonEmpty_CodeUnits.singleton(init))(Data_String_CodeUnits.fromCharArray(rest)));
    });
});

// | A parser for the scheme component of a URI. Expects a scheme string
// | followed by `':'`.
var parser = Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Scheme)(parseScheme))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)(":"));
var ordScheme = Data_String_NonEmpty_Internal.ordNonEmptyString;

// | Attempts to create a `Scheme` from the passed string. The scheme component
// | of a URI has no escape sequences, so this function will return `Nothing`
// | if an invalid value is provided.
// |
// | ``` purescript
// | fromString "http" == Just (Scheme.unsafeFromString "http")
// | fromString "git+ssh" == Just (Scheme.unsafeFromString "git+ssh")
// | fromString "!!!" == Nothing
// | fromString "" == Nothing
// | ```
var fromString = (function () {
    var $9 = Data_Functor.map(Data_Maybe.functorMaybe)(Scheme);
    var $10 = Data_Function.flip(Text_Parsing_Parser.runParser)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(parseScheme)(Text_Parsing_Parser_String.eof(Data_Identity.monadIdentity)));
    return function ($11) {
        return $9(Data_Either.hush($10($11)));
    };
})();

// | Constructs a `Scheme` part unsafely: if the value is not an acceptable
// | scheme a runtime error will be thrown.
// |
// | This is intended as a convenience when describing `Scheme`s statically in
// | PureScript code, in all other cases `fromString` should be used.
var unsafeFromString = function (s) {
    var v = fromString(s);
    if (v instanceof Data_Maybe.Just) {
        return v.value0;
    };
    if (v instanceof Data_Maybe.Nothing) {
        return Partial_Unsafe.unsafeCrashWith("Scheme value is invalid: `" + (Data_Show.show(Data_Show.showString)(s) + "`"));
    };
    throw new Error("Failed pattern match at URI.Scheme (line 62, column 22 - line 64, column 76): " + [ v.constructor.name ]);
};
var eqScheme = Data_String_NonEmpty_Internal.eqNonEmptyString;
module.exports = {
    fromString: fromString,
    toString: toString,
    unsafeFromString: unsafeFromString,
    parser: parser,
    print: print,
    eqScheme: eqScheme,
    ordScheme: ordScheme,
    showScheme: showScheme
};
