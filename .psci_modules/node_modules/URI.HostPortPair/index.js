"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_These = require("../Data.These/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators/index.js");
var URI_Common = require("../URI.Common/index.js");
var URI_Host = require("../URI.Host/index.js");
var URI_Port = require("../URI.Port/index.js");

// | A printer for a spec-conformant host/port pair.
// |
// | As a counterpart to the `parser` this function also requires the `Host`
// | and `Port` components to be printed back from their custom representations.
// | If no custom types are being used, pass `identity` for both of these arguments.
var print = function (printHost) {
    return function (printPort) {
        return function (v) {
            if (v instanceof Data_Maybe.Nothing) {
                return "";
            };
            if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_These.This) {
                return URI_Host.print(printHost(v.value0.value0));
            };
            if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_These.That) {
                return URI_Port.print(printPort(v.value0.value0));
            };
            if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_These.Both) {
                return URI_Host.print(printHost(v.value0.value0)) + URI_Port.print(printPort(v.value0.value1));
            };
            throw new Error("Failed pattern match at URI.HostPortPair (line 58, column 29 - line 66, column 63): " + [ v.constructor.name ]);
        };
    };
};

// | A parser for a spec-conformant host/port pair.
// |
// | This function allows for the `Host` and `Port` components to be parsed into
// | custom representations. If this is not necessary, use `pure` for both of
// | these arguments.
// |
// | Host parsing is dealt with a little differently to all the other URI
// | components, as for hosts the control is passed entirely to the component
// | parser. This is to accomodate multi-host URIs that are used sometimes for
// | connection strings and the like, but as these are not spec-conforming this
// | part of parsing may need to bend the rules a little. See
// | [`URI.Extra.MultiHostPortPair`](../URI.Extra.MultiHostPortPair) for an
// | example of this.
var parser = function (parseHost) {
    return function (parsePort) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(URI_Common.wrapParser(Data_Identity.monadIdentity)(parseHost)(URI_Host.parser)))(function (mh) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(URI_Common.wrapParser(Data_Identity.monadIdentity)(parsePort)(URI_Port.parser)))(function (mp) {
                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))((function () {
                    if (mh instanceof Data_Maybe.Just && mp instanceof Data_Maybe.Nothing) {
                        return new Data_Maybe.Just(new Data_These.This(mh.value0));
                    };
                    if (mh instanceof Data_Maybe.Nothing && mp instanceof Data_Maybe.Just) {
                        return new Data_Maybe.Just(new Data_These.That(mp.value0));
                    };
                    if (mh instanceof Data_Maybe.Just && mp instanceof Data_Maybe.Just) {
                        return new Data_Maybe.Just(new Data_These.Both(mh.value0, mp.value0));
                    };
                    if (mh instanceof Data_Maybe.Nothing && mp instanceof Data_Maybe.Nothing) {
                        return Data_Maybe.Nothing.value;
                    };
                    throw new Error("Failed pattern match at URI.HostPortPair (line 41, column 8 - line 45, column 31): " + [ mh.constructor.name, mp.constructor.name ]);
                })());
            });
        });
    };
};
module.exports = {
    parser: parser,
    print: print
};
