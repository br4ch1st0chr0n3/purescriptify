"use strict";
var Control_Apply = require("../Control.Apply/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Show_Generic = require("../Data.Show.Generic/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String/index.js");
var URI_Path_Segment = require("../URI.Path.Segment/index.js");

// | A generic absolute-or-empty path, used in both hierarchical-part and
// | relative-parts when an authority component is present. Corresponds to
// | _path-abempty_ in the spec.
// |
// | A path value of `/` corresponds to `Path [""]`, an empty path is `Path []`.
var Path = function (x) {
    return x;
};
var semigroupPath = Data_Semigroup.semigroupArray;

// | A printer for a _path-abempty_ URI component.
var print = function (v) {
    if (Data_Array["null"](v)) {
        return "";
    };
    if (Data_Boolean.otherwise) {
        return "/" + Data_String_Common.joinWith("/")(Data_Functor.map(Data_Functor.functorArray)(URI_Path_Segment.unsafeSegmentToString)(v));
    };
    throw new Error("Failed pattern match at URI.Path (line 32, column 1 - line 32, column 22): " + [ v.constructor.name ]);
};

// | A parser for a _path-abempty_ URI component.
var parser = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Path)(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("/"))(URI_Path_Segment.parseSegment)));
var ordPath = Data_Ord.ordArray(URI_Path_Segment.ordPathSegment);
var monoidPath = Data_Monoid.monoidArray;
var genericPath = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showPath = {
    show: Data_Show_Generic.genericShow(genericPath)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showArray(URI_Path_Segment.showPathSegment)))({
        reflectSymbol: function () {
            return "Path";
        }
    }))
};
var eqPath = Data_Eq.eqArray(URI_Path_Segment.eqPathSegment);
module.exports = {
    Path: Path,
    parser: parser,
    print: print,
    eqPath: eqPath,
    ordPath: ordPath,
    semigroupPath: semigroupPath,
    monoidPath: monoidPath,
    genericPath: genericPath,
    showPath: showPath
};
