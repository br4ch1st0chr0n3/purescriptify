"use strict";

// | Writes octets from a string to a buffer at the specified offset. Multi-byte
// | characters will not be written to the buffer if there is not enough capacity
// | to write them fully. The number of bytes written is returned.
var writeString = function (dict) {
    return dict.writeString;
};

// | Writes a numeric value to a buffer at the specified offset.
var write = function (dict) {
    return dict.write;
};

// | O(1) Convert an immutable buffer to a mutable buffer, without copying. The
// | input buffer must not be used afterward.
var unsafeThaw = function (dict) {
    return dict.unsafeThaw;
};

// | O(1). Convert a mutable buffer to an immutable buffer, without copying. The
// | mutable buffer must not be mutated afterwards.
var unsafeFreeze = function (dict) {
    return dict.unsafeFreeze;
};

// | Reads the buffer as a string with the specified encoding.
var toString = function (dict) {
    return dict.toString;
};

// | Copies the data in the buffer to a new JS ArrayBuffer
var toArrayBuffer = function (dict) {
    return dict.toArrayBuffer;
};

// | Creates an array of octets from a buffer's contents.
var toArray = function (dict) {
    return dict.toArray;
};

// | Creates a mutable copy of an immutable buffer.
var thaw = function (dict) {
    return dict.thaw;
};

// | Creates a new buffer slice that acts like a window on the original buffer.
// | Writing to the slice buffer updates the original buffer and vice-versa.
var slice = function (dict) {
    return dict.slice;
};

// | Returns the size of a buffer.
var size = function (dict) {
    return dict.size;
};

// | Writes an octet in the buffer at the specified offset.
var setAtOffset = function (dict) {
    return dict.setAtOffset;
};

// | Reads a section of a buffer as a string with the specified encoding.
var readString = function (dict) {
    return dict.readString;
};

// | Reads a numeric value from a buffer at the specified offset.
var read = function (dict) {
    return dict.read;
};

// | Reads an octet from a buffer at the specified offset.
var getAtOffset = function (dict) {
    return dict.getAtOffset;
};

// | Creates a new buffer from a string with the specified encoding, sized to
// | match the string.
var fromString = function (dict) {
    return dict.fromString;
};

// | Creates a buffer view from a JS ArrayByffer without copying data.
var fromArrayBuffer = function (dict) {
    return dict.fromArrayBuffer;
};

// | Creates a new buffer from an array of octets, sized to match the array.
var fromArray = function (dict) {
    return dict.fromArray;
};

// | Creates an immutable copy of a mutable buffer.
var freeze = function (dict) {
    return dict.freeze;
};

// | Fills a range in a buffer with the specified octet.
var fill = function (dict) {
    return dict.fill;
};

// | Creates a new buffer of the specified size.
var create = function (dict) {
    return dict.create;
};

// | Copies a section of a source buffer into a target buffer at the specified
// | offset, and returns the number of octets copied.
var copy = function (dict) {
    return dict.copy;
};

// | Concatenates a list of buffers, combining them into a new buffer of the
// | specified length.
var concat$prime = function (dict) {
    return dict["concat'"];
};

// | Concatenates a list of buffers.
var concat = function (dict) {
    return dict.concat;
};
module.exports = {
    create: create,
    freeze: freeze,
    unsafeFreeze: unsafeFreeze,
    thaw: thaw,
    unsafeThaw: unsafeThaw,
    fromArray: fromArray,
    fromString: fromString,
    fromArrayBuffer: fromArrayBuffer,
    toArrayBuffer: toArrayBuffer,
    read: read,
    readString: readString,
    toString: toString,
    write: write,
    writeString: writeString,
    toArray: toArray,
    getAtOffset: getAtOffset,
    setAtOffset: setAtOffset,
    slice: slice,
    size: size,
    concat: concat,
    "concat'": concat$prime,
    copy: copy,
    fill: fill
};
