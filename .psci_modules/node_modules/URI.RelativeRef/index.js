"use strict";
var Control_Apply = require("../Control.Apply/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Lens_Lens = require("../Data.Lens.Lens/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show_Generic = require("../Data.Show.Generic/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators/index.js");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String/index.js");
var URI_Common = require("../URI.Common/index.js");
var URI_Fragment = require("../URI.Fragment/index.js");
var URI_Query = require("../URI.Query/index.js");
var URI_RelativePart = require("../URI.RelativePart/index.js");

// | A relative URI. Relative in the sense that it lacks a `Scheme` component.
var RelativeRef = (function () {
    function RelativeRef(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    RelativeRef.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new RelativeRef(value0, value1, value2);
            };
        };
    };
    return RelativeRef;
})();

// | A printer for a relative URI.
var print = function (opts) {
    return function (v) {
        return Data_String_Common.joinWith("")(Data_Array.catMaybes([ new Data_Maybe.Just(URI_RelativePart.print(opts)(v.value0)), Data_Functor.map(Data_Maybe.functorMaybe)(function ($108) {
            return URI_Query.print(opts.printQuery($108));
        })(v.value1), Data_Functor.map(Data_Maybe.functorMaybe)(function ($109) {
            return URI_Fragment.print(opts.printFragment($109));
        })(v.value2) ]));
    };
};

// | A parser for a relative URI.
var parser = function (opts) {
    return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(RelativeRef.create)(URI_RelativePart.parser(opts)))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(URI_Common.wrapParser(Data_Identity.monadIdentity)(opts.parseQuery)(URI_Query.parser))))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(URI_Common.wrapParser(Data_Identity.monadIdentity)(opts.parseFragment)(URI_Fragment.parser))))(Text_Parsing_Parser_String.eof(Data_Identity.monadIdentity));
};
var genericRelativeRef = {
    to: function (x) {
        return new RelativeRef(x.value0, x.value1.value0, x.value1.value1);
    },
    from: function (x) {
        return new Data_Generic_Rep.Product(x.value0, new Data_Generic_Rep.Product(x.value1, x.value2));
    }
};
var showRelativeRef = function (dictShow) {
    return function (dictShow1) {
        return function (dictShow2) {
            return function (dictShow3) {
                return function (dictShow4) {
                    return function (dictShow5) {
                        return {
                            show: Data_Show_Generic.genericShow(genericRelativeRef)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(URI_RelativePart.showRelativePart(dictShow)(dictShow1)(dictShow2)(dictShow3)))(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Data_Maybe.showMaybe(dictShow4)))(Data_Show_Generic.genericShowArgsArgument(Data_Maybe.showMaybe(dictShow5)))))({
                                reflectSymbol: function () {
                                    return "RelativeRef";
                                }
                            }))
                        };
                    };
                };
            };
        };
    };
};
var eqRelativeRef = function (dictEq) {
    return function (dictEq1) {
        return function (dictEq2) {
            return function (dictEq3) {
                return function (dictEq4) {
                    return function (dictEq5) {
                        return {
                            eq: function (x) {
                                return function (y) {
                                    return Data_Eq.eq(URI_RelativePart.eqRelativePart(dictEq)(dictEq1)(dictEq2)(dictEq3))(x.value0)(y.value0) && Data_Eq.eq(Data_Maybe.eqMaybe(dictEq4))(x.value1)(y.value1) && Data_Eq.eq(Data_Maybe.eqMaybe(dictEq5))(x.value2)(y.value2);
                                };
                            }
                        };
                    };
                };
            };
        };
    };
};
var ordRelativeRef = function (dictOrd) {
    return function (dictOrd1) {
        return function (dictOrd2) {
            return function (dictOrd3) {
                return function (dictOrd4) {
                    return function (dictOrd5) {
                        return {
                            compare: function (x) {
                                return function (y) {
                                    var v = Data_Ord.compare(URI_RelativePart.ordRelativePart(dictOrd)(dictOrd1)(dictOrd2)(dictOrd3))(x.value0)(y.value0);
                                    if (v instanceof Data_Ordering.LT) {
                                        return Data_Ordering.LT.value;
                                    };
                                    if (v instanceof Data_Ordering.GT) {
                                        return Data_Ordering.GT.value;
                                    };
                                    var v1 = Data_Ord.compare(Data_Maybe.ordMaybe(dictOrd4))(x.value1)(y.value1);
                                    if (v1 instanceof Data_Ordering.LT) {
                                        return Data_Ordering.LT.value;
                                    };
                                    if (v1 instanceof Data_Ordering.GT) {
                                        return Data_Ordering.GT.value;
                                    };
                                    return Data_Ord.compare(Data_Maybe.ordMaybe(dictOrd5))(x.value2)(y.value2);
                                };
                            },
                            Eq0: function () {
                                return eqRelativeRef(dictOrd.Eq0())(dictOrd1.Eq0())(dictOrd2.Eq0())(dictOrd3.Eq0())(dictOrd4.Eq0())(dictOrd5.Eq0());
                            }
                        };
                    };
                };
            };
        };
    };
};

// | The relative-part component of a relative URI.
var _relPart = function (dictStrong) {
    return Data_Lens_Lens.lens(function (v) {
        return v.value0;
    })(function (v) {
        return function (r) {
            return new RelativeRef(r, v.value1, v.value2);
        };
    })(dictStrong);
};

// | The query component of a relative URI.
var _query = function (dictStrong) {
    return Data_Lens_Lens.lens(function (v) {
        return v.value1;
    })(function (v) {
        return function (q) {
            return new RelativeRef(v.value0, q, v.value2);
        };
    })(dictStrong);
};

// | The fragment component of a relative URI.
var _fragment = function (dictStrong) {
    return Data_Lens_Lens.lens(function (v) {
        return v.value2;
    })(function (v) {
        return function (f) {
            return new RelativeRef(v.value0, v.value1, f);
        };
    })(dictStrong);
};
module.exports = {
    RelativeRef: RelativeRef,
    parser: parser,
    print: print,
    "_relPart": _relPart,
    "_query": _query,
    "_fragment": _fragment,
    eqRelativeRef: eqRelativeRef,
    ordRelativeRef: ordRelativeRef,
    genericRelativeRef: genericRelativeRef,
    showRelativeRef: showRelativeRef,
    Authority: URI_RelativePart.Authority,
    IPv4Address: URI_RelativePart.IPv4Address,
    IPv6Address: URI_RelativePart.IPv6Address,
    NameAddress: URI_RelativePart.NameAddress,
    RelativePartAuth: URI_RelativePart.RelativePartAuth,
    RelativePartNoAuth: URI_RelativePart.RelativePartNoAuth,
    "_IPv4Address": URI_RelativePart["_IPv4Address"],
    "_IPv6Address": URI_RelativePart["_IPv6Address"],
    "_NameAddress": URI_RelativePart["_NameAddress"],
    "_authority": URI_RelativePart["_authority"],
    "_hosts": URI_RelativePart["_hosts"],
    "_path": URI_RelativePart["_path"],
    "_relPath": URI_RelativePart["_relPath"],
    "_userInfo": URI_RelativePart["_userInfo"]
};
