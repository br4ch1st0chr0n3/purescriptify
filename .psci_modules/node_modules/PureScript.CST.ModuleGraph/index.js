"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map = require("../Data.Map/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Set = require("../Data.Set/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var PureScript_CST_Types = require("../PureScript.CST.Types/index.js");
var Sorted = (function () {
    function Sorted(value0) {
        this.value0 = value0;
    };
    Sorted.create = function (value0) {
        return new Sorted(value0);
    };
    return Sorted;
})();
var CycleDetected = (function () {
    function CycleDetected(value0) {
        this.value0 = value0;
    };
    CycleDetected.create = function (value0) {
        return new CycleDetected(value0);
    };
    return CycleDetected;
})();
var topoSort = function (dictOrd) {
    return function (graph) {
        var isRoot = function (v) {
            var $12 = v.value1 === 0;
            if ($12) {
                return new Data_Maybe.Just(v.value0);
            };
            return Data_Maybe.Nothing.value;
        };
        var importCounts = Data_Map_Internal.fromFoldableWith(dictOrd)(Data_Foldable.foldableArray)(Data_Semiring.add(Data_Semiring.semiringInt))(Control_Bind.bind(Control_Bind.bindArray)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(graph))(function (v) {
            return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ new Data_Tuple.Tuple(v.value0, 0) ])(Data_Functor.map(Data_Functor.functorArray)(Data_Function.flip(Data_Tuple.Tuple.create)(1))(Data_Set.toUnfoldable(Data_Unfoldable.unfoldableArray)(v.value1)));
        }));
        var startingModules = Data_Map.keys(Data_Map_Internal.filterWithKey(dictOrd)(function (k) {
            return function (v) {
                return Data_Maybe.isJust(isRoot(new Data_Tuple.Tuple(k, v)));
            };
        })(importCounts));
        var depthFirst = function (v) {
            var $19 = Data_Set.member(dictOrd)(v.curr)(v.visited);
            if ($19) {
                return new Data_Maybe.Just(new Data_List_Types.Cons(v.curr, v.path));
            };
            var $20 = Data_Maybe.maybe(true)(Data_Set.isEmpty)(Data_Map_Internal.lookup(dictOrd)(v.curr)(graph));
            if ($20) {
                return Data_Maybe.Nothing.value;
            };
            return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(dictOrd)(v.curr)(graph))(function (reachable) {
                return Data_Foldable.foldl(Data_Set.foldableSet)(function (b) {
                    return function (a) {
                        var $21 = Data_Maybe.isJust(b);
                        if ($21) {
                            return b;
                        };
                        return depthFirst({
                            path: new Data_List_Types.Cons(v.curr, v.path),
                            visited: Data_Set.insert(dictOrd)(v.curr)(v.visited),
                            curr: a
                        });
                    };
                })(Data_Maybe.Nothing.value)(reachable);
            });
        };
        var decrementImport = function (usages) {
            return function (k) {
                return Data_Map_Internal.insertWith(dictOrd)(Data_Semiring.add(Data_Semiring.semiringInt))(k)(-1 | 0)(usages);
            };
        };
        var appendRoots = function (usages) {
            return function (roots) {
                return function (curr) {
                    return Data_Maybe.maybe(roots)(Data_Function.flip(Data_Set.insert(dictOrd))(roots))(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(dictOrd)(curr)(usages))(function (count) {
                        return isRoot(new Data_Tuple.Tuple(curr, count));
                    }));
                };
            };
        };
        var go = function ($copy_v) {
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v) {
                var v1 = Data_Set.findMin(v.roots);
                if (v1 instanceof Data_Maybe.Nothing) {
                    var $27 = Data_Foldable.all(Data_Map_Internal.foldableMap)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Eq.eq(Data_Eq.eqInt)(0))(v.usages);
                    if ($27) {
                        $tco_done = true;
                        return new Data_Either.Right({
                            roots: v.roots,
                            sorted: v.sorted,
                            usages: v.usages
                        });
                    };
                    var nonLeaf = Data_Map.keys(Data_Map_Internal.filterWithKey(dictOrd)(function (a) {
                        return function (count) {
                            return count > 0 && !Data_Maybe.maybe(true)(Data_Set.isEmpty)(Data_Map_Internal.lookup(dictOrd)(a)(graph));
                        };
                    })(v.usages));
                    var detectCycles = Data_Foldable.foldl(Data_Set.foldableSet)(function (b) {
                        return function (a) {
                            var $28 = Data_Maybe.isJust(b);
                            if ($28) {
                                return b;
                            };
                            return depthFirst({
                                path: Data_List_Types.Nil.value,
                                visited: Data_Set.empty,
                                curr: a
                            });
                        };
                    })(Data_Maybe.Nothing.value)(nonLeaf);
                    if (detectCycles instanceof Data_Maybe.Just) {
                        $tco_done = true;
                        return new Data_Either.Left(detectCycles.value0);
                    };
                    if (detectCycles instanceof Data_Maybe.Nothing) {
                        $tco_done = true;
                        return new Data_Either.Left(Data_List_Types.Nil.value);
                    };
                    throw new Error("Failed pattern match at PureScript.CST.ModuleGraph (line 79, column 9 - line 81, column 30): " + [ detectCycles.constructor.name ]);
                };
                if (v1 instanceof Data_Maybe.Just) {
                    var reachable = Data_Maybe.fromMaybe(Data_Set.empty)(Data_Map_Internal.lookup(dictOrd)(v1.value0)(graph));
                    var usages$prime = Data_Foldable.foldl(Data_Set.foldableSet)(decrementImport)(v.usages)(reachable);
                    $copy_v = {
                        roots: Data_Foldable.foldl(Data_Set.foldableSet)(appendRoots(usages$prime))(Data_Set["delete"](dictOrd)(v1.value0)(v.roots))(reachable),
                        sorted: new Data_List_Types.Cons(v1.value0, v.sorted),
                        usages: usages$prime
                    };
                    return;
                };
                throw new Error("Failed pattern match at PureScript.CST.ModuleGraph (line 66, column 34 - line 91, column 10): " + [ v1.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($copy_v);
            };
            return $tco_result;
        };
        return Data_Functor.map(Data_Either.functorEither)(function (v) {
            return v.sorted;
        })(go({
            roots: startingModules,
            sorted: Data_List_Types.Nil.value,
            usages: importCounts
        }));
    };
};
var moduleGraph = function (k) {
    var getImportName = function (v) {
        return v.module.name;
    };
    var go = function (v) {
        return new Data_Tuple.Tuple(v.name.name, Data_Set.fromFoldable(Data_Foldable.foldableArray)(PureScript_CST_Types.ordModuleName)(Data_Functor.map(Data_Functor.functorArray)(getImportName)(v.imports)));
    };
    var $48 = Data_Map_Internal.fromFoldable(PureScript_CST_Types.ordModuleName)(Data_Foldable.foldableArray);
    var $49 = Data_Functor.map(Data_Functor.functorArray)(function ($51) {
        return go(k($51));
    });
    return function ($50) {
        return $48($49($50));
    };
};
var sortModules = function (k) {
    return function (moduleHeaders) {
        var graph = moduleGraph(k)(moduleHeaders);
        var getModuleName = function (v) {
            return v.name.name;
        };
        var knownModuleHeaders = Data_Map_Internal.fromFoldable(PureScript_CST_Types.ordModuleName)(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(function (a) {
            return new Data_Tuple.Tuple(getModuleName(k(a)), a);
        })(moduleHeaders));
        var lookupModuleHeaders = (function () {
            var $52 = Data_Array.mapMaybe(Data_Function.flip(Data_Map_Internal.lookup(PureScript_CST_Types.ordModuleName))(knownModuleHeaders));
            var $53 = Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray);
            return function ($54) {
                return $52($53($54));
            };
        })();
        var v = topoSort(PureScript_CST_Types.ordModuleName)(graph);
        if (v instanceof Data_Either.Left) {
            return new CycleDetected(lookupModuleHeaders(v.value0));
        };
        if (v instanceof Data_Either.Right) {
            return new Sorted(lookupModuleHeaders(v.value0));
        };
        throw new Error("Failed pattern match at PureScript.CST.ModuleGraph (line 51, column 3 - line 53, column 56): " + [ v.constructor.name ]);
    };
};
module.exports = {
    moduleGraph: moduleGraph,
    sortModules: sortModules,
    Sorted: Sorted,
    CycleDetected: CycleDetected
};
