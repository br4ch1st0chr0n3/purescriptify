"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_Free = require("../Control.Monad.Free/index.js");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");
var Data_Array_NonEmpty_Internal = require("../Data.Array.NonEmpty.Internal/index.js");
var Data_Bitraversable = require("../Data.Bitraversable/index.js");
var Data_Const = require("../Data.Const/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Compose = require("../Data.Functor.Compose/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var PureScript_CST_Types = require("../PureScript.CST.Types/index.js");
var traverseWrapped = function (dictApplicative) {
    return function (k) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (value) {
                return {
                    open: v.open,
                    value: value,
                    close: v.close
                };
            })(k(v.value));
        };
    };
};
var traverseSeparated = function (dictApplicative) {
    return function (k) {
        return function (v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v1) {
                return function (v2) {
                    return {
                        head: v1,
                        tail: v2
                    };
                };
            })(k(v.head)))(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(dictApplicative)(k))(v.tail));
        };
    };
};
var traverseRecordUpdate = function (dictApplicative) {
    return function (k) {
        return function (v) {
            if (v instanceof PureScript_CST_Types.RecordUpdateLeaf) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.RecordUpdateLeaf.create(v.value0)(v.value1))(k.onExpr(v.value2));
            };
            if (v instanceof PureScript_CST_Types.RecordUpdateBranch) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.RecordUpdateBranch.create(v.value0))(traverseWrapped(dictApplicative)(traverseSeparated(dictApplicative)(traverseRecordUpdate(dictApplicative)(k)))(v.value1));
            };
            throw new Error("Failed pattern match at PureScript.CST.Traversal (line 410, column 26 - line 412, column 146): " + [ v.constructor.name ]);
        };
    };
};
var traverseRecordLabeled = function (dictApplicative) {
    return function (k) {
        return function (v) {
            if (v instanceof PureScript_CST_Types.RecordPun) {
                return Control_Applicative.pure(dictApplicative)(new PureScript_CST_Types.RecordPun(v.value0));
            };
            if (v instanceof PureScript_CST_Types.RecordField) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.RecordField.create(v.value0)(v.value1))(k(v.value2));
            };
            throw new Error("Failed pattern match at PureScript.CST.Traversal (line 385, column 27 - line 387, column 57): " + [ v.constructor.name ]);
        };
    };
};
var traverseRecordAccessor = function (dictApplicative) {
    return function (k) {
        return function (r) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v) {
                return {
                    expr: v,
                    dot: r.dot,
                    path: r.path
                };
            })(k.onExpr(r.expr));
        };
    };
};
var traversePatternGuard = function (dictApplicative) {
    return function (k) {
        return function (v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (binder) {
                return function (expr) {
                    return {
                        binder: binder,
                        expr: expr
                    };
                };
            })(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(Data_Bitraversable.ltraverse(Data_Bitraversable.bitraversableTuple)(dictApplicative)(k.onBinder))(v.binder)))(k.onExpr(v.expr));
        };
    };
};
var traverseModuleBody = function (dictApplicative) {
    return function (k) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (decls) {
                return {
                    decls: decls,
                    trailingComments: v.trailingComments,
                    end: v.end
                };
            })(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(k.onDecl)(v.decls));
        };
    };
};
var traverseModule = function (dictApplicative) {
    return function (k) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (body) {
                return {
                    header: v.header,
                    body: body
                };
            })(traverseModuleBody(dictApplicative)(k)(v.body));
        };
    };
};
var traverseLambda = function (dictApplicative) {
    return function (k) {
        return function (l) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v) {
                return function (v1) {
                    return {
                        binders: v,
                        body: v1,
                        arrow: l.arrow,
                        symbol: l.symbol
                    };
                };
            })(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(k.onBinder)(l.binders)))(k.onExpr(l.body));
        };
    };
};
var traverseLabeled = function (dictApplicative) {
    return function (k) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (value) {
                return {
                    label: v.label,
                    separator: v.separator,
                    value: value
                };
            })(k(v.value));
        };
    };
};
var traverseRow = function (dictApplicative) {
    return function (k) {
        return function (v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (labels) {
                return function (tail) {
                    return {
                        labels: labels,
                        tail: tail
                    };
                };
            })(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(traverseSeparated(dictApplicative)(traverseLabeled(dictApplicative)(k.onType)))(v.labels)))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(dictApplicative)(k.onType))(v.tail));
        };
    };
};
var traverseTypeVarBinding = function (dictApplicative) {
    return function (k) {
        return function (v) {
            if (v instanceof PureScript_CST_Types.TypeVarKinded) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.TypeVarKinded.create)(traverseWrapped(dictApplicative)(traverseLabeled(dictApplicative)(k.onType))(v.value0));
            };
            if (v instanceof PureScript_CST_Types.TypeVarName) {
                return Control_Applicative.pure(dictApplicative)(new PureScript_CST_Types.TypeVarName(v.value0));
            };
            throw new Error("Failed pattern match at PureScript.CST.Traversal (line 320, column 28 - line 322, column 46): " + [ v.constructor.name ]);
        };
    };
};
var traverseType = function (dictApplicative) {
    return function (k) {
        return function (v) {
            if (v instanceof PureScript_CST_Types.TypeRow) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.TypeRow.create)(traverseWrapped(dictApplicative)(traverseRow(dictApplicative)(k))(v.value0));
            };
            if (v instanceof PureScript_CST_Types.TypeRecord) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.TypeRecord.create)(traverseWrapped(dictApplicative)(traverseRow(dictApplicative)(k))(v.value0));
            };
            if (v instanceof PureScript_CST_Types.TypeForall) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap((dictApplicative.Apply0()).Functor0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.TypeForall.create(v.value0))(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(traverseTypeVarBinding(dictApplicative)(k))(v.value1)))(v.value2))(k.onType(v.value3));
            };
            if (v instanceof PureScript_CST_Types.TypeKinded) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap((dictApplicative.Apply0()).Functor0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.TypeKinded.create)(k.onType(v.value0)))(v.value1))(k.onType(v.value2));
            };
            if (v instanceof PureScript_CST_Types.TypeApp) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.TypeApp.create)(k.onType(v.value0)))(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(k.onType)(v.value1));
            };
            if (v instanceof PureScript_CST_Types.TypeOp) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.TypeOp.create)(k.onType(v.value0)))(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(dictApplicative)(k.onType))(v.value1));
            };
            if (v instanceof PureScript_CST_Types.TypeArrow) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap((dictApplicative.Apply0()).Functor0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.TypeArrow.create)(k.onType(v.value0)))(v.value1))(k.onType(v.value2));
            };
            if (v instanceof PureScript_CST_Types.TypeConstrained) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap((dictApplicative.Apply0()).Functor0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.TypeConstrained.create)(k.onType(v.value0)))(v.value1))(k.onType(v.value2));
            };
            if (v instanceof PureScript_CST_Types.TypeParens) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.TypeParens.create)(traverseWrapped(dictApplicative)(k.onType)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.TypeUnaryRow) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.TypeUnaryRow.create(v.value0))(k.onType(v.value1));
            };
            return Control_Applicative.pure(dictApplicative)(v);
        };
    };
};
var traverseIfThenElse = function (dictApplicative) {
    return function (k) {
        return function (r) {
            return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v) {
                return function (v1) {
                    return function (v2) {
                        return {
                            cond: v,
                            "true": v1,
                            "false": v2,
                            "else": r["else"],
                            keyword: r.keyword,
                            then: r.then
                        };
                    };
                };
            })(k.onExpr(r.cond)))(k.onExpr(r["true"])))(k.onExpr(r["false"]));
        };
    };
};
var traverseWhere = function (dictApplicative) {
    return function (k) {
        return function (v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (expr) {
                return function (bindings) {
                    return {
                        expr: expr,
                        bindings: bindings
                    };
                };
            })(k.onExpr(v.expr)))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(dictApplicative)(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(traverseLetBinding(dictApplicative)(k))))(v.bindings));
        };
    };
};
var traverseValueBindingFields = function (dictApplicative) {
    return function (k) {
        return function (v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v1) {
                return function (v2) {
                    return {
                        binders: v1,
                        guarded: v2,
                        name: v.name
                    };
                };
            })(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(k.onBinder)(v.binders)))(traverseGuarded(dictApplicative)(k)(v.guarded));
        };
    };
};
var traverseLetBinding = function (dictApplicative) {
    return function (k) {
        return function (v) {
            if (v instanceof PureScript_CST_Types.LetBindingSignature) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.LetBindingSignature.create)(traverseLabeled(dictApplicative)(k.onType)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.LetBindingName) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.LetBindingName.create)(traverseValueBindingFields(dictApplicative)(k)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.LetBindingPattern) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap((dictApplicative.Apply0()).Functor0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.LetBindingPattern.create)(k.onBinder(v.value0)))(v.value1))(traverseWhere(dictApplicative)(k)(v.value2));
            };
            if (v instanceof PureScript_CST_Types.LetBindingError) {
                return Control_Applicative.pure(dictApplicative)(new PureScript_CST_Types.LetBindingError(v.value0));
            };
            throw new Error("Failed pattern match at PureScript.CST.Traversal (line 489, column 24 - line 493, column 48): " + [ v.constructor.name ]);
        };
    };
};
var traverseGuardedExpr = function (dictApplicative) {
    return function (k) {
        return function (v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (ps) {
                return function (wh) {
                    return {
                        bar: v.bar,
                        patterns: ps,
                        separator: v.separator,
                        where: wh
                    };
                };
            })(traverseSeparated(dictApplicative)(traversePatternGuard(dictApplicative)(k))(v.patterns)))(traverseWhere(dictApplicative)(k)(v.where));
        };
    };
};
var traverseGuarded = function (dictApplicative) {
    return function (k) {
        return function (v) {
            if (v instanceof PureScript_CST_Types.Unconditional) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.Unconditional.create(v.value0))(traverseWhere(dictApplicative)(k)(v.value1));
            };
            if (v instanceof PureScript_CST_Types.Guarded) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.Guarded.create)(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(traverseGuardedExpr(dictApplicative)(k))(v.value0));
            };
            throw new Error("Failed pattern match at PureScript.CST.Traversal (line 450, column 21 - line 452, column 72): " + [ v.constructor.name ]);
        };
    };
};
var traverseInstanceBinding = function (dictApplicative) {
    return function (k) {
        return function (v) {
            if (v instanceof PureScript_CST_Types.InstanceBindingSignature) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.InstanceBindingSignature.create)(traverseLabeled(dictApplicative)(k.onType)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.InstanceBindingName) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.InstanceBindingName.create)(traverseValueBindingFields(dictApplicative)(k)(v.value0));
            };
            throw new Error("Failed pattern match at PureScript.CST.Traversal (line 246, column 29 - line 248, column 92): " + [ v.constructor.name ]);
        };
    };
};
var traverseLetIn = function (dictApplicative) {
    return function (k) {
        return function (l) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v) {
                return function (v1) {
                    return {
                        bindings: v,
                        body: v1,
                        "in": l["in"],
                        keyword: l.keyword
                    };
                };
            })(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(traverseLetBinding(dictApplicative)(k))(l.bindings)))(k.onExpr(l.body));
        };
    };
};
var traverseForeign = function (dictApplicative) {
    return function (k) {
        return function (v) {
            if (v instanceof PureScript_CST_Types.ForeignValue) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ForeignValue.create)(traverseLabeled(dictApplicative)(k.onType)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.ForeignData) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ForeignData.create(v.value0))(traverseLabeled(dictApplicative)(k.onType)(v.value1));
            };
            if (v instanceof PureScript_CST_Types.ForeignKind) {
                return Control_Applicative.pure(dictApplicative)(v);
            };
            throw new Error("Failed pattern match at PureScript.CST.Traversal (line 216, column 21 - line 219, column 40): " + [ v.constructor.name ]);
        };
    };
};
var traverseDoStatement = function (dictApplicative) {
    return function (k) {
        return function (v) {
            if (v instanceof PureScript_CST_Types.DoLet) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.DoLet.create(v.value0))(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(traverseLetBinding(dictApplicative)(k))(v.value1));
            };
            if (v instanceof PureScript_CST_Types.DoDiscard) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.DoDiscard.create)(k.onExpr(v.value0));
            };
            if (v instanceof PureScript_CST_Types.DoBind) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap((dictApplicative.Apply0()).Functor0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.DoBind.create)(k.onBinder(v.value0)))(v.value1))(k.onExpr(v.value2));
            };
            if (v instanceof PureScript_CST_Types.DoError) {
                return Control_Applicative.pure(dictApplicative)(new PureScript_CST_Types.DoError(v.value0));
            };
            throw new Error("Failed pattern match at PureScript.CST.Traversal (line 520, column 25 - line 524, column 32): " + [ v.constructor.name ]);
        };
    };
};
var traverseDoBlock = function (dictApplicative) {
    return function (k) {
        return function (d) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v) {
                return {
                    statements: v,
                    keyword: d.keyword
                };
            })(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(traverseDoStatement(dictApplicative)(k))(d.statements));
        };
    };
};
var traverseDelimitedNonEmpty = function (dictApplicative) {
    return function (k) {
        return traverseWrapped(dictApplicative)(traverseSeparated(dictApplicative)(k));
    };
};
var traverseOneOrDelimited = function (dictApplicative) {
    return function (k) {
        return function (v) {
            if (v instanceof PureScript_CST_Types.One) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.One.create)(k(v.value0));
            };
            if (v instanceof PureScript_CST_Types.Many) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.Many.create)(traverseDelimitedNonEmpty(dictApplicative)(k)(v.value0));
            };
            throw new Error("Failed pattern match at PureScript.CST.Traversal (line 265, column 28 - line 267, column 55): " + [ v.constructor.name ]);
        };
    };
};
var traverseInstanceHead = function (dictApplicative) {
    return function (k) {
        return function (head) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v) {
                return function (v1) {
                    return {
                        constraints: v,
                        types: v1,
                        className: head.className,
                        keyword: head.keyword,
                        name: head.name
                    };
                };
            })(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(Data_Bitraversable.ltraverse(Data_Bitraversable.bitraversableTuple)(dictApplicative)(traverseOneOrDelimited(dictApplicative)(k.onType)))(head.constraints)))(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(k.onType)(head.types));
        };
    };
};
var traverseInstance = function (dictApplicative) {
    return function (k) {
        return function (v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (head) {
                return function (body) {
                    return {
                        head: head,
                        body: body
                    };
                };
            })(traverseInstanceHead(dictApplicative)(k)(v.head)))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(dictApplicative)(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(traverseInstanceBinding(dictApplicative)(k))))(v.body));
        };
    };
};
var traverseDelimited = function (dictApplicative) {
    return function (k) {
        return traverseWrapped(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(traverseSeparated(dictApplicative)(k)));
    };
};
var traverseDataHead = function (dictApplicative) {
    return function (k) {
        return function (head) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v) {
                return {
                    vars: v,
                    keyword: head.keyword,
                    name: head.name
                };
            })(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(traverseTypeVarBinding(dictApplicative)(k))(head.vars));
        };
    };
};
var traverseDataCtor = function (dictApplicative) {
    return function (k) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (fields) {
                return {
                    name: v.name,
                    fields: fields
                };
            })(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(k.onType)(v.fields));
        };
    };
};
var traverseClassHead = function (dictApplicative) {
    return function (k) {
        return function (head) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v) {
                return function (v1) {
                    return {
                        "super": v,
                        vars: v1,
                        fundeps: head.fundeps,
                        keyword: head.keyword,
                        name: head.name
                    };
                };
            })(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(Data_Bitraversable.ltraverse(Data_Bitraversable.bitraversableTuple)(dictApplicative)(traverseOneOrDelimited(dictApplicative)(k.onType)))(head["super"])))(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(traverseTypeVarBinding(dictApplicative)(k))(head.vars));
        };
    };
};
var traverseDecl = function (dictApplicative) {
    return function (k) {
        return function (v) {
            if (v instanceof PureScript_CST_Types.DeclData) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.DeclData.create)(traverseDataHead(dictApplicative)(k)(v.value0)))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(dictApplicative)(traverseSeparated(dictApplicative)(traverseDataCtor(dictApplicative)(k))))(v.value1));
            };
            if (v instanceof PureScript_CST_Types.DeclType) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap((dictApplicative.Apply0()).Functor0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.DeclType.create)(traverseDataHead(dictApplicative)(k)(v.value0)))(v.value1))(k.onType(v.value2));
            };
            if (v instanceof PureScript_CST_Types.DeclNewtype) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap((dictApplicative.Apply0()).Functor0())(Data_Functor.flap((dictApplicative.Apply0()).Functor0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.DeclNewtype.create)(traverseDataHead(dictApplicative)(k)(v.value0)))(v.value1))(v.value2))(k.onType(v.value3));
            };
            if (v instanceof PureScript_CST_Types.DeclClass) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.DeclClass.create)(traverseClassHead(dictApplicative)(k)(v.value0)))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(dictApplicative)(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(traverseLabeled(dictApplicative)(k.onType))))(v.value1));
            };
            if (v instanceof PureScript_CST_Types.DeclInstanceChain) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.DeclInstanceChain.create)(traverseSeparated(dictApplicative)(traverseInstance(dictApplicative)(k))(v.value0));
            };
            if (v instanceof PureScript_CST_Types.DeclDerive) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.DeclDerive.create(v.value0)(v.value1))(traverseInstanceHead(dictApplicative)(k)(v.value2));
            };
            if (v instanceof PureScript_CST_Types.DeclKindSignature) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.DeclKindSignature.create(v.value0))(traverseLabeled(dictApplicative)(k.onType)(v.value1));
            };
            if (v instanceof PureScript_CST_Types.DeclSignature) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.DeclSignature.create)(traverseLabeled(dictApplicative)(k.onType)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.DeclValue) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.DeclValue.create)(traverseValueBindingFields(dictApplicative)(k)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.DeclForeign) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.DeclForeign.create(v.value0)(v.value1))(traverseForeign(dictApplicative)(k)(v.value2));
            };
            return Control_Applicative.pure(dictApplicative)(v);
        };
    };
};
var traverseCaseOf = function (dictApplicative) {
    return function (k) {
        return function (r) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v) {
                return function (v1) {
                    return {
                        head: v,
                        branches: v1,
                        keyword: r.keyword,
                        of: r.of
                    };
                };
            })(traverseSeparated(dictApplicative)(k.onExpr)(r.head)))(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(Data_Bitraversable.bitraverse(Data_Bitraversable.bitraversableTuple)(dictApplicative)(traverseSeparated(dictApplicative)(k.onBinder))(traverseGuarded(dictApplicative)(k)))(r.branches));
        };
    };
};
var traverseBinder = function (dictApplicative) {
    return function (k) {
        return function (v) {
            if (v instanceof PureScript_CST_Types.BinderNamed) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.BinderNamed.create(v.value0)(v.value1))(k.onBinder(v.value2));
            };
            if (v instanceof PureScript_CST_Types.BinderConstructor) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.BinderConstructor.create(v.value0))(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(k.onBinder)(v.value1));
            };
            if (v instanceof PureScript_CST_Types.BinderArray) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.BinderArray.create)(traverseDelimited(dictApplicative)(k.onBinder)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.BinderRecord) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.BinderRecord.create)(traverseDelimited(dictApplicative)(traverseRecordLabeled(dictApplicative)(k.onBinder))(v.value0));
            };
            if (v instanceof PureScript_CST_Types.BinderParens) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.BinderParens.create)(traverseWrapped(dictApplicative)(k.onBinder)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.BinderTyped) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap((dictApplicative.Apply0()).Functor0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.BinderTyped.create)(k.onBinder(v.value0)))(v.value1))(k.onType(v.value2));
            };
            if (v instanceof PureScript_CST_Types.BinderOp) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.BinderOp.create)(k.onBinder(v.value0)))(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(dictApplicative)(k.onBinder))(v.value1));
            };
            return Control_Applicative.pure(dictApplicative)(v);
        };
    };
};
var traverseAdoBlock = function (dictApplicative) {
    return function (k) {
        return function (a) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v) {
                return function (v1) {
                    return {
                        statements: v,
                        result: v1,
                        "in": a["in"],
                        keyword: a.keyword
                    };
                };
            })(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(traverseDoStatement(dictApplicative)(k))(a.statements)))(k.onExpr(a.result));
        };
    };
};
var traverseExpr = function (dictApplicative) {
    return function (k) {
        return function (v) {
            if (v instanceof PureScript_CST_Types.ExprArray) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprArray.create)(traverseDelimited(dictApplicative)(k.onExpr)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.ExprRecord) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprRecord.create)(traverseDelimited(dictApplicative)(traverseRecordLabeled(dictApplicative)(k.onExpr))(v.value0));
            };
            if (v instanceof PureScript_CST_Types.ExprParens) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprParens.create)(traverseWrapped(dictApplicative)(k.onExpr)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.ExprTyped) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap((dictApplicative.Apply0()).Functor0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprTyped.create)(k.onExpr(v.value0)))(v.value1))(k.onType(v.value2));
            };
            if (v instanceof PureScript_CST_Types.ExprInfix) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprInfix.create)(k.onExpr(v.value0)))(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(Data_Bitraversable.bitraverse(Data_Bitraversable.bitraversableTuple)(dictApplicative)(traverseWrapped(dictApplicative)(k.onExpr))(k.onExpr))(v.value1));
            };
            if (v instanceof PureScript_CST_Types.ExprOp) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprOp.create)(k.onExpr(v.value0)))(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(dictApplicative)(k.onExpr))(v.value1));
            };
            if (v instanceof PureScript_CST_Types.ExprNegate) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprNegate.create(v.value0))(k.onExpr(v.value1));
            };
            if (v instanceof PureScript_CST_Types.ExprRecordAccessor) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprRecordAccessor.create)(traverseRecordAccessor(dictApplicative)(k)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.ExprRecordUpdate) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprRecordUpdate.create)(k.onExpr(v.value0)))(traverseWrapped(dictApplicative)(traverseSeparated(dictApplicative)(traverseRecordUpdate(dictApplicative)(k)))(v.value1));
            };
            if (v instanceof PureScript_CST_Types.ExprApp) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprApp.create)(k.onExpr(v.value0)))(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(k.onExpr)(v.value1));
            };
            if (v instanceof PureScript_CST_Types.ExprLambda) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprLambda.create)(traverseLambda(dictApplicative)(k)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.ExprIf) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprIf.create)(traverseIfThenElse(dictApplicative)(k)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.ExprCase) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprCase.create)(traverseCaseOf(dictApplicative)(k)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.ExprLet) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprLet.create)(traverseLetIn(dictApplicative)(k)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.ExprDo) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprDo.create)(traverseDoBlock(dictApplicative)(k)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.ExprAdo) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(PureScript_CST_Types.ExprAdo.create)(traverseAdoBlock(dictApplicative)(k)(v.value0));
            };
            return Control_Applicative.pure(dictApplicative)(v);
        };
    };
};
var topDownTraversalWithContextM = function (dictMonad) {
    return function (visitor) {
        var visitor$prime = {
            onBinder: function (a) {
                return function (ctx) {
                    return Control_Bind.bind(dictMonad.Bind1())(visitor.onBinder(ctx)(a))(Data_Tuple.uncurry(Data_Function.flip((function () {
                        var $324 = traverseBinder(Control_Monad_Reader_Trans.applicativeReaderT(dictMonad.Applicative0()))(visitor$prime);
                        return function ($325) {
                            return Control_Monad_Reader_Trans.runReaderT($324($325));
                        };
                    })())));
                };
            },
            onExpr: function (a) {
                return function (ctx) {
                    return Control_Bind.bind(dictMonad.Bind1())(visitor.onExpr(ctx)(a))(Data_Tuple.uncurry(Data_Function.flip((function () {
                        var $326 = traverseExpr(Control_Monad_Reader_Trans.applicativeReaderT(dictMonad.Applicative0()))(visitor$prime);
                        return function ($327) {
                            return Control_Monad_Reader_Trans.runReaderT($326($327));
                        };
                    })())));
                };
            },
            onDecl: function (a) {
                return function (ctx) {
                    return Control_Bind.bind(dictMonad.Bind1())(visitor.onDecl(ctx)(a))(Data_Tuple.uncurry(Data_Function.flip((function () {
                        var $328 = traverseDecl(Control_Monad_Reader_Trans.applicativeReaderT(dictMonad.Applicative0()))(visitor$prime);
                        return function ($329) {
                            return Control_Monad_Reader_Trans.runReaderT($328($329));
                        };
                    })())));
                };
            },
            onType: function (a) {
                return function (ctx) {
                    return Control_Bind.bind(dictMonad.Bind1())(visitor.onType(ctx)(a))(Data_Tuple.uncurry(Data_Function.flip((function () {
                        var $330 = traverseType(Control_Monad_Reader_Trans.applicativeReaderT(dictMonad.Applicative0()))(visitor$prime);
                        return function ($331) {
                            return Control_Monad_Reader_Trans.runReaderT($330($331));
                        };
                    })())));
                };
            }
        };
        return visitor$prime;
    };
};
var topDownTraversalWithContext = function (visitor) {
    var visitor$prime = {
        onBinder: function (a) {
            return function (ctx) {
                return Control_Bind.bind(Data_Identity.bindIdentity)(Control_Applicative.pure(Data_Identity.applicativeIdentity)(visitor.onBinder(ctx)(a)))(Data_Tuple.uncurry(Data_Function.flip((function () {
                    var $332 = traverseBinder(Control_Monad_Reader_Trans.applicativeReaderT(Data_Identity.applicativeIdentity))(visitor$prime);
                    return function ($333) {
                        return Control_Monad_Reader_Trans.runReaderT($332($333));
                    };
                })())));
            };
        },
        onExpr: function (a) {
            return function (ctx) {
                return Control_Bind.bind(Data_Identity.bindIdentity)(Control_Applicative.pure(Data_Identity.applicativeIdentity)(visitor.onExpr(ctx)(a)))(Data_Tuple.uncurry(Data_Function.flip((function () {
                    var $334 = traverseExpr(Control_Monad_Reader_Trans.applicativeReaderT(Data_Identity.applicativeIdentity))(visitor$prime);
                    return function ($335) {
                        return Control_Monad_Reader_Trans.runReaderT($334($335));
                    };
                })())));
            };
        },
        onDecl: function (a) {
            return function (ctx) {
                return Control_Bind.bind(Data_Identity.bindIdentity)(Control_Applicative.pure(Data_Identity.applicativeIdentity)(visitor.onDecl(ctx)(a)))(Data_Tuple.uncurry(Data_Function.flip((function () {
                    var $336 = traverseDecl(Control_Monad_Reader_Trans.applicativeReaderT(Data_Identity.applicativeIdentity))(visitor$prime);
                    return function ($337) {
                        return Control_Monad_Reader_Trans.runReaderT($336($337));
                    };
                })())));
            };
        },
        onType: function (a) {
            return function (ctx) {
                return Control_Bind.bind(Data_Identity.bindIdentity)(Control_Applicative.pure(Data_Identity.applicativeIdentity)(visitor.onType(ctx)(a)))(Data_Tuple.uncurry(Data_Function.flip((function () {
                    var $338 = traverseType(Control_Monad_Reader_Trans.applicativeReaderT(Data_Identity.applicativeIdentity))(visitor$prime);
                    return function ($339) {
                        return Control_Monad_Reader_Trans.runReaderT($338($339));
                    };
                })())));
            };
        }
    };
    return visitor$prime;
};
var topDownTraversal = function (dictMonad) {
    return function (visitor) {
        var visitor$prime = {
            onBinder: function (a) {
                return Control_Bind.bind(dictMonad.Bind1())(visitor.onBinder(a))(traverseBinder(dictMonad.Applicative0())(visitor$prime));
            },
            onExpr: function (a) {
                return Control_Bind.bind(dictMonad.Bind1())(visitor.onExpr(a))(traverseExpr(dictMonad.Applicative0())(visitor$prime));
            },
            onType: function (a) {
                return Control_Bind.bind(dictMonad.Bind1())(visitor.onType(a))(traverseType(dictMonad.Applicative0())(visitor$prime));
            },
            onDecl: function (a) {
                return Control_Bind.bind(dictMonad.Bind1())(visitor.onDecl(a))(traverseDecl(dictMonad.Applicative0())(visitor$prime));
            }
        };
        return visitor$prime;
    };
};
var topDownPureTraversal = function (visitor) {
    var visitor$prime = {
        onBinder: function (a) {
            return Control_Bind.bind(Control_Monad_Free.freeBind)(Control_Applicative.pure(Control_Monad_Free.freeApplicative)(visitor.onBinder(a)))(traverseBinder(Control_Monad_Free.freeApplicative)(visitor$prime));
        },
        onExpr: function (a) {
            return Control_Bind.bind(Control_Monad_Free.freeBind)(Control_Applicative.pure(Control_Monad_Free.freeApplicative)(visitor.onExpr(a)))(traverseExpr(Control_Monad_Free.freeApplicative)(visitor$prime));
        },
        onType: function (a) {
            return Control_Bind.bind(Control_Monad_Free.freeBind)(Control_Applicative.pure(Control_Monad_Free.freeApplicative)(visitor.onType(a)))(traverseType(Control_Monad_Free.freeApplicative)(visitor$prime));
        },
        onDecl: function (a) {
            return Control_Bind.bind(Control_Monad_Free.freeBind)(Control_Applicative.pure(Control_Monad_Free.freeApplicative)(visitor.onDecl(a)))(traverseDecl(Control_Monad_Free.freeApplicative)(visitor$prime));
        }
    };
    return visitor$prime;
};
var rewriteWithContextM = function (dictMonad) {
    return function (traversal) {
        return function (visitor) {
            return function (ctx) {
                return function (g) {
                    var visitor$prime = topDownTraversalWithContextM(dictMonad)(visitor);
                    return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Tuple.Tuple.create(ctx))(Control_Monad_Reader_Trans.runReaderT(traversal(visitor$prime)(g))(ctx));
                };
            };
        };
    };
};
var rewriteWithContext = function (traversal) {
    return function (visitor) {
        return function (ctx) {
            return function (g) {
                var visitor$prime = topDownTraversalWithContext(visitor);
                return new Data_Tuple.Tuple(ctx, Data_Newtype.un()(Data_Identity.Identity)(Control_Monad_Reader_Trans.runReaderT(traversal(visitor$prime)(g))(ctx)));
            };
        };
    };
};
var rewriteTypeWithContextM = function (dictMonad) {
    return rewriteWithContextM(dictMonad)(function (v) {
        return v.onType;
    });
};
var rewriteTypeWithContext = rewriteWithContext(function (v) {
    return v.onType;
});
var rewriteTopDownM = function (dictMonad) {
    return function (traversal) {
        return function (visitor) {
            var visitor$prime = topDownTraversal(dictMonad)(visitor);
            return traversal(visitor$prime);
        };
    };
};
var rewriteTypeTopDownM = function (dictMonad) {
    return rewriteTopDownM(dictMonad)(function (v) {
        return v.onType;
    });
};
var rewriteTopDown = function (traversal) {
    return function (visitor) {
        var visitor$prime = topDownPureTraversal(visitor);
        var $340 = Control_Monad_Free.runFree(Data_Identity.functorIdentity)(Data_Newtype.un()(Data_Identity.Identity));
        var $341 = traversal(visitor$prime);
        return function ($342) {
            return $340($341($342));
        };
    };
};
var rewriteTypeTopDown = rewriteTopDown(function (v) {
    return v.onType;
});
var rewriteModuleWithContextM = function (dictMonad) {
    return rewriteWithContextM(dictMonad)(traverseModule(Control_Monad_Reader_Trans.applicativeReaderT(dictMonad.Applicative0())));
};
var rewriteModuleWithContext = rewriteWithContext(traverseModule(Control_Monad_Reader_Trans.applicativeReaderT(Data_Identity.applicativeIdentity)));
var rewriteModuleTopDownM = function (dictMonad) {
    return rewriteTopDownM(dictMonad)(traverseModule(dictMonad.Applicative0()));
};
var rewriteModuleTopDown = rewriteTopDown(traverseModule(Control_Monad_Free.freeApplicative));
var rewriteExprWithContextM = function (dictMonad) {
    return rewriteWithContextM(dictMonad)(function (v) {
        return v.onExpr;
    });
};
var rewriteExprWithContext = rewriteWithContext(function (v) {
    return v.onExpr;
});
var rewriteExprTopDownM = function (dictMonad) {
    return rewriteTopDownM(dictMonad)(function (v) {
        return v.onExpr;
    });
};
var rewriteExprTopDown = rewriteTopDown(function (v) {
    return v.onExpr;
});
var rewriteDeclWithContextM = function (dictMonad) {
    return rewriteWithContextM(dictMonad)(function (v) {
        return v.onDecl;
    });
};
var rewriteDeclWithContext = rewriteWithContext(function (v) {
    return v.onDecl;
});
var rewriteDeclTopDownM = function (dictMonad) {
    return rewriteTopDownM(dictMonad)(function (v) {
        return v.onDecl;
    });
};
var rewriteDeclTopDown = rewriteTopDown(function (v) {
    return v.onDecl;
});
var rewriteBinderWithContextM = function (dictMonad) {
    return rewriteWithContextM(dictMonad)(function (v) {
        return v.onBinder;
    });
};
var rewriteBinderWithContext = rewriteWithContext(function (v) {
    return v.onBinder;
});
var rewriteBinderTopDownM = function (dictMonad) {
    return rewriteTopDownM(dictMonad)(function (v) {
        return v.onBinder;
    });
};
var rewriteBinderTopDown = rewriteTopDown(function (v) {
    return v.onBinder;
});
var defer = function (dictMonad) {
    return function (v) {
        return Control_Bind.bind(dictMonad.Bind1())(Control_Applicative.pure(dictMonad.Applicative0())(Data_Unit.unit))(v);
    };
};
var topDownMonoidalTraversal = function (dictMonoid) {
    return function (visitor) {
        var visitor$prime = {
            onBinder: function (a) {
                return Control_Apply.apply(Data_Functor_Compose.applyCompose(Control_Monad_Free.freeApply)(Data_Const.applyConst(dictMonoid.Semigroup0())))(Control_Applicative.pure(Control_Monad_Free.freeApplicative)(visitor.onBinder(a)))(defer(Control_Monad_Free.freeMonad)(function (v) {
                    return Data_Newtype.un()(Data_Functor_Compose.Compose)(traverseBinder(Data_Functor_Compose.applicativeCompose(Control_Monad_Free.freeApplicative)(Data_Const.applicativeConst(dictMonoid)))(visitor$prime)(a));
                }));
            },
            onExpr: function (a) {
                return Control_Apply.apply(Data_Functor_Compose.applyCompose(Control_Monad_Free.freeApply)(Data_Const.applyConst(dictMonoid.Semigroup0())))(Control_Applicative.pure(Control_Monad_Free.freeApplicative)(visitor.onExpr(a)))(defer(Control_Monad_Free.freeMonad)(function (v) {
                    return Data_Newtype.un()(Data_Functor_Compose.Compose)(traverseExpr(Data_Functor_Compose.applicativeCompose(Control_Monad_Free.freeApplicative)(Data_Const.applicativeConst(dictMonoid)))(visitor$prime)(a));
                }));
            },
            onDecl: function (a) {
                return Control_Apply.apply(Data_Functor_Compose.applyCompose(Control_Monad_Free.freeApply)(Data_Const.applyConst(dictMonoid.Semigroup0())))(Control_Applicative.pure(Control_Monad_Free.freeApplicative)(visitor.onDecl(a)))(defer(Control_Monad_Free.freeMonad)(function (v) {
                    return Data_Newtype.un()(Data_Functor_Compose.Compose)(traverseDecl(Data_Functor_Compose.applicativeCompose(Control_Monad_Free.freeApplicative)(Data_Const.applicativeConst(dictMonoid)))(visitor$prime)(a));
                }));
            },
            onType: function (a) {
                return Control_Apply.apply(Data_Functor_Compose.applyCompose(Control_Monad_Free.freeApply)(Data_Const.applyConst(dictMonoid.Semigroup0())))(Control_Applicative.pure(Control_Monad_Free.freeApplicative)(visitor.onType(a)))(defer(Control_Monad_Free.freeMonad)(function (v) {
                    return Data_Newtype.un()(Data_Functor_Compose.Compose)(traverseType(Data_Functor_Compose.applicativeCompose(Control_Monad_Free.freeApplicative)(Data_Const.applicativeConst(dictMonoid)))(visitor$prime)(a));
                }));
            }
        };
        return visitor$prime;
    };
};
var monoidalRewrite = function (dictMonoid) {
    return function (traversal) {
        return function (visitor) {
            return function (g) {
                var visitor$prime = topDownMonoidalTraversal(dictMonoid)(visitor);
                return Data_Newtype.un()(Data_Const.Const)(Control_Monad_Free.runFree(Data_Identity.functorIdentity)(Data_Newtype.un()(Data_Identity.Identity))(Data_Newtype.un()(Data_Functor_Compose.Compose)(traversal(visitor$prime)(g))));
            };
        };
    };
};
var foldMapBinder = function (dictMonoid) {
    return monoidalRewrite(dictMonoid)(function (v) {
        return v.onBinder;
    });
};
var foldMapDecl = function (dictMonoid) {
    return monoidalRewrite(dictMonoid)(function (v) {
        return v.onDecl;
    });
};
var foldMapExpr = function (dictMonoid) {
    return monoidalRewrite(dictMonoid)(function (v) {
        return v.onExpr;
    });
};
var foldMapModule = function (dictMonoid) {
    return monoidalRewrite(dictMonoid)(traverseModule(Data_Functor_Compose.applicativeCompose(Control_Monad_Free.freeApplicative)(Data_Const.applicativeConst(dictMonoid))));
};
var foldMapType = function (dictMonoid) {
    return monoidalRewrite(dictMonoid)(function (v) {
        return v.onType;
    });
};
var defaultVisitorWithContextM = function (dictMonad) {
    return {
        onBinder: Data_Tuple.curry(Control_Applicative.pure(dictMonad.Applicative0())),
        onDecl: Data_Tuple.curry(Control_Applicative.pure(dictMonad.Applicative0())),
        onExpr: Data_Tuple.curry(Control_Applicative.pure(dictMonad.Applicative0())),
        onType: Data_Tuple.curry(Control_Applicative.pure(dictMonad.Applicative0()))
    };
};
var defaultVisitorWithContext = {
    onBinder: Data_Tuple.curry(Control_Category.identity(Control_Category.categoryFn)),
    onDecl: Data_Tuple.curry(Control_Category.identity(Control_Category.categoryFn)),
    onExpr: Data_Tuple.curry(Control_Category.identity(Control_Category.categoryFn)),
    onType: Data_Tuple.curry(Control_Category.identity(Control_Category.categoryFn))
};
var defaultVisitorM = function (dictApplicative) {
    return {
        onBinder: Control_Applicative.pure(dictApplicative),
        onDecl: Control_Applicative.pure(dictApplicative),
        onExpr: Control_Applicative.pure(dictApplicative),
        onType: Control_Applicative.pure(dictApplicative)
    };
};
var defaultVisitor = {
    onBinder: Control_Category.identity(Control_Category.categoryFn),
    onDecl: Control_Category.identity(Control_Category.categoryFn),
    onExpr: Control_Category.identity(Control_Category.categoryFn),
    onType: Control_Category.identity(Control_Category.categoryFn)
};
var defaultMonoidalVisitor = function (dictMonoid) {
    return {
        onBinder: Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)),
        onDecl: Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)),
        onExpr: Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)),
        onType: Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid))
    };
};
var bottomUpTraversal = function (dictMonad) {
    return function (visitor) {
        var visitor$prime = {
            onBinder: function (a) {
                return Control_Bind.bindFlipped(dictMonad.Bind1())(visitor.onBinder)(defer(dictMonad)(function (v) {
                    return traverseBinder(dictMonad.Applicative0())(visitor$prime)(a);
                }));
            },
            onExpr: function (a) {
                return Control_Bind.bindFlipped(dictMonad.Bind1())(visitor.onExpr)(defer(dictMonad)(function (v) {
                    return traverseExpr(dictMonad.Applicative0())(visitor$prime)(a);
                }));
            },
            onType: function (a) {
                return Control_Bind.bindFlipped(dictMonad.Bind1())(visitor.onType)(defer(dictMonad)(function (v) {
                    return traverseType(dictMonad.Applicative0())(visitor$prime)(a);
                }));
            },
            onDecl: function (a) {
                return Control_Bind.bindFlipped(dictMonad.Bind1())(visitor.onDecl)(defer(dictMonad)(function (v) {
                    return traverseDecl(dictMonad.Applicative0())(visitor$prime)(a);
                }));
            }
        };
        return visitor$prime;
    };
};
var rewriteBottomUpM = function (dictMonad) {
    return function (traversal) {
        return function (visitor) {
            var visitor$prime = bottomUpTraversal(dictMonad)(visitor);
            return traversal(visitor$prime);
        };
    };
};
var rewriteBinderBottomUpM = function (dictMonad) {
    return rewriteBottomUpM(dictMonad)(function (v) {
        return v.onBinder;
    });
};
var rewriteDeclBottomUpM = function (dictMonad) {
    return rewriteBottomUpM(dictMonad)(function (v) {
        return v.onDecl;
    });
};
var rewriteExprBottomUpM = function (dictMonad) {
    return rewriteBottomUpM(dictMonad)(function (v) {
        return v.onExpr;
    });
};
var rewriteModuleBottomUpM = function (dictMonad) {
    return rewriteBottomUpM(dictMonad)(traverseModule(dictMonad.Applicative0()));
};
var rewriteTypeBottomUpM = function (dictMonad) {
    return rewriteBottomUpM(dictMonad)(function (v) {
        return v.onType;
    });
};
var bottomUpPureTraversal = function (visitor) {
    var visitor$prime = {
        onBinder: function (a) {
            return Control_Bind.bindFlipped(Control_Monad_Free.freeBind)((function () {
                var $343 = Control_Applicative.pure(Control_Monad_Free.freeApplicative);
                return function ($344) {
                    return $343(visitor.onBinder($344));
                };
            })())(traverseBinder(Control_Monad_Free.freeApplicative)(visitor$prime)(a));
        },
        onExpr: function (a) {
            return Control_Bind.bindFlipped(Control_Monad_Free.freeBind)((function () {
                var $345 = Control_Applicative.pure(Control_Monad_Free.freeApplicative);
                return function ($346) {
                    return $345(visitor.onExpr($346));
                };
            })())(traverseExpr(Control_Monad_Free.freeApplicative)(visitor$prime)(a));
        },
        onType: function (a) {
            return Control_Bind.bindFlipped(Control_Monad_Free.freeBind)((function () {
                var $347 = Control_Applicative.pure(Control_Monad_Free.freeApplicative);
                return function ($348) {
                    return $347(visitor.onType($348));
                };
            })())(traverseType(Control_Monad_Free.freeApplicative)(visitor$prime)(a));
        },
        onDecl: function (a) {
            return Control_Bind.bindFlipped(Control_Monad_Free.freeBind)((function () {
                var $349 = Control_Applicative.pure(Control_Monad_Free.freeApplicative);
                return function ($350) {
                    return $349(visitor.onDecl($350));
                };
            })())(traverseDecl(Control_Monad_Free.freeApplicative)(visitor$prime)(a));
        }
    };
    return visitor$prime;
};
var rewriteBottomUp = function (traversal) {
    return function (visitor) {
        var visitor$prime = bottomUpPureTraversal(visitor);
        var $351 = Control_Monad_Free.runFree(Data_Identity.functorIdentity)(Data_Newtype.un()(Data_Identity.Identity));
        var $352 = traversal(visitor$prime);
        return function ($353) {
            return $351($352($353));
        };
    };
};
var rewriteBinderBottomUp = rewriteBottomUp(function (v) {
    return v.onBinder;
});
var rewriteDeclBottomUp = rewriteBottomUp(function (v) {
    return v.onDecl;
});
var rewriteExprBottomUp = rewriteBottomUp(function (v) {
    return v.onExpr;
});
var rewriteModuleBottomUp = rewriteBottomUp(traverseModule(Control_Monad_Free.freeApplicative));
var rewriteTypeBottomUp = rewriteBottomUp(function (v) {
    return v.onType;
});
module.exports = {
    defaultVisitorM: defaultVisitorM,
    rewriteModuleBottomUpM: rewriteModuleBottomUpM,
    rewriteBinderBottomUpM: rewriteBinderBottomUpM,
    rewriteExprBottomUpM: rewriteExprBottomUpM,
    rewriteDeclBottomUpM: rewriteDeclBottomUpM,
    rewriteTypeBottomUpM: rewriteTypeBottomUpM,
    rewriteModuleTopDownM: rewriteModuleTopDownM,
    rewriteBinderTopDownM: rewriteBinderTopDownM,
    rewriteExprTopDownM: rewriteExprTopDownM,
    rewriteDeclTopDownM: rewriteDeclTopDownM,
    rewriteTypeTopDownM: rewriteTypeTopDownM,
    defaultVisitorWithContextM: defaultVisitorWithContextM,
    rewriteModuleWithContextM: rewriteModuleWithContextM,
    rewriteBinderWithContextM: rewriteBinderWithContextM,
    rewriteExprWithContextM: rewriteExprWithContextM,
    rewriteDeclWithContextM: rewriteDeclWithContextM,
    rewriteTypeWithContextM: rewriteTypeWithContextM,
    defaultMonoidalVisitor: defaultMonoidalVisitor,
    foldMapModule: foldMapModule,
    foldMapBinder: foldMapBinder,
    foldMapDecl: foldMapDecl,
    foldMapExpr: foldMapExpr,
    foldMapType: foldMapType,
    defaultVisitor: defaultVisitor,
    rewriteModuleBottomUp: rewriteModuleBottomUp,
    rewriteBinderBottomUp: rewriteBinderBottomUp,
    rewriteExprBottomUp: rewriteExprBottomUp,
    rewriteDeclBottomUp: rewriteDeclBottomUp,
    rewriteTypeBottomUp: rewriteTypeBottomUp,
    rewriteModuleTopDown: rewriteModuleTopDown,
    rewriteBinderTopDown: rewriteBinderTopDown,
    rewriteExprTopDown: rewriteExprTopDown,
    rewriteDeclTopDown: rewriteDeclTopDown,
    rewriteTypeTopDown: rewriteTypeTopDown,
    defaultVisitorWithContext: defaultVisitorWithContext,
    rewriteModuleWithContext: rewriteModuleWithContext,
    rewriteBinderWithContext: rewriteBinderWithContext,
    rewriteExprWithContext: rewriteExprWithContext,
    rewriteDeclWithContext: rewriteDeclWithContext,
    rewriteTypeWithContext: rewriteTypeWithContext,
    traverseModule: traverseModule,
    traverseModuleBody: traverseModuleBody,
    traverseDecl: traverseDecl,
    traverseForeign: traverseForeign,
    traverseInstance: traverseInstance,
    traverseInstanceHead: traverseInstanceHead,
    traverseInstanceBinding: traverseInstanceBinding,
    traverseClassHead: traverseClassHead,
    traverseOneOrDelimited: traverseOneOrDelimited,
    traverseDataHead: traverseDataHead,
    traverseDataCtor: traverseDataCtor,
    traverseType: traverseType,
    traverseRow: traverseRow,
    traverseTypeVarBinding: traverseTypeVarBinding,
    traverseExpr: traverseExpr,
    traverseDelimited: traverseDelimited,
    traverseDelimitedNonEmpty: traverseDelimitedNonEmpty,
    traverseSeparated: traverseSeparated,
    traverseWrapped: traverseWrapped,
    traverseRecordLabeled: traverseRecordLabeled,
    traverseLabeled: traverseLabeled,
    traverseRecordAccessor: traverseRecordAccessor,
    traverseRecordUpdate: traverseRecordUpdate,
    traverseLambda: traverseLambda,
    traverseIfThenElse: traverseIfThenElse,
    traverseCaseOf: traverseCaseOf,
    traverseGuarded: traverseGuarded,
    traverseGuardedExpr: traverseGuardedExpr,
    traversePatternGuard: traversePatternGuard,
    traverseWhere: traverseWhere,
    traverseLetBinding: traverseLetBinding,
    traverseValueBindingFields: traverseValueBindingFields,
    traverseLetIn: traverseLetIn,
    traverseDoStatement: traverseDoStatement,
    traverseDoBlock: traverseDoBlock,
    traverseAdoBlock: traverseAdoBlock,
    traverseBinder: traverseBinder,
    bottomUpTraversal: bottomUpTraversal,
    rewriteBottomUpM: rewriteBottomUpM,
    topDownTraversal: topDownTraversal,
    rewriteTopDownM: rewriteTopDownM,
    topDownTraversalWithContextM: topDownTraversalWithContextM,
    rewriteWithContextM: rewriteWithContextM,
    topDownMonoidalTraversal: topDownMonoidalTraversal,
    monoidalRewrite: monoidalRewrite,
    bottomUpPureTraversal: bottomUpPureTraversal,
    rewriteBottomUp: rewriteBottomUp,
    topDownPureTraversal: topDownPureTraversal,
    rewriteTopDown: rewriteTopDown,
    topDownTraversalWithContext: topDownTraversalWithContext,
    rewriteWithContext: rewriteWithContext
};
