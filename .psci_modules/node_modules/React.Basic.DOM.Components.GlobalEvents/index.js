
// | These helper components register and unregister event callbacks
// | using React's the lifecycle callbacks. They're useful for
// | declaratively defining global behavior which is associated with
// | a particular component being mounted without having to wire
// | all that lifecycle logic up manually.
// |
// | For example:
// |
// | ```purs
// | render self =
// |   R.div
// |     { className: "dropdown-wrapper"
// |     , children:
// |         [ dropdownButton
// |         , guard showDropdown $
// |             windowEvent
// |               { eventType: EventType "click"
// |               , options: defaultOptions
// |               , handler: \_ -> send self CloseDropdown
// |               }
// |               dropdownMenu
// |         ]
// |     }
// | ```
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var React_Basic = require("../React.Basic/index.js");
var globalEvent = function (target) {
    return function (v) {
        return function (child) {
            return React_Basic.element($foreign.globalEvent_)({
                target: target,
                eventType: v.eventType,
                handler: v.handler,
                options: v.options,
                child: child
            });
        };
    };
};
var globalEvents = function (target) {
    return Data_Function.flip(Data_Foldable.foldr(Data_Foldable.foldableArray)(globalEvent(target)));
};
var windowEvents = globalEvents($foreign.unsafeWindowEventTarget);
var windowEvent = (function () {
    var $7 = Control_Applicative.pure(Control_Applicative.applicativeArray);
    return function ($8) {
        return windowEvents($7($8));
    };
})();
var defaultOptions = {
    capture: false,
    once: false,
    passive: false
};
module.exports = {
    defaultOptions: defaultOptions,
    globalEvent: globalEvent,
    globalEvents: globalEvents,
    windowEvent: windowEvent,
    windowEvents: windowEvents
};
