"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Free_Trans = require("../Control.Monad.Free.Trans/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Lens_Internal_Market = require("../Data.Lens.Internal.Market/index.js");
var Data_Lens_Lens = require("../Data.Lens.Lens/index.js");
var Data_Lens_Prism = require("../Data.Lens.Prism/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Web_Router_Types = require("../Web.Router.Types/index.js");
var redirect = function (route) {
    return Control_Monad_Free_Trans.liftFreeT(Web_Router_Types.functorCommand)(Effect_Aff.monadAff)(new Web_Router_Types.Redirect(route));
};
var override = function (route) {
    return Control_Monad_Free_Trans.liftFreeT(Web_Router_Types.functorCommand)(Effect_Aff.monadAff)(new Web_Router_Types.Override(route));
};
var makeRouter = function (handleTransition) {
    return function (handleState) {
        return function (v) {
            return function __do() {
                var fiberRef = Effect_Ref["new"](Control_Applicative.pure(Effect_Aff.applicativeFiber)(Data_Unit.unit))();
                var previousRouteRef = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                var runRouter = function (route) {
                    return function __do() {
                        var oldFiber = Effect_Ref.read(fiberRef)();
                        Effect_Aff.launchAff_(Effect_Aff.killFiber(Effect_Exception.error("Transition cancelled"))(oldFiber))();
                        var previousRoute = Effect_Ref.read(previousRouteRef)();
                        handleState(new Web_Router_Types.Transitioning(previousRoute, route))();
                        var finalise = function (r) {
                            return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                Effect_Ref.write(new Data_Maybe.Just(r))(previousRouteRef)();
                                return handleState(new Web_Router_Types.Resolved(previousRoute, r))();
                            });
                        };
                        var fiber = Effect_Aff.launchAff((function () {
                            var v1 = handleTransition(previousRoute)(route);
                            return Control_Monad_Free_Trans.runFreeT(Web_Router_Types.functorCommand)(Effect_Aff.monadRecAff)(function (cmd) {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)((function () {
                                    if (cmd instanceof Web_Router_Types.Redirect) {
                                        return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(v.redirect(cmd.value0));
                                    };
                                    if (cmd instanceof Web_Router_Types.Override) {
                                        return finalise(cmd.value0);
                                    };
                                    if (cmd instanceof Web_Router_Types.Continue) {
                                        return finalise(route);
                                    };
                                    throw new Error("Failed pattern match at Web.Router (line 50, column 19 - line 53, column 47): " + [ cmd.constructor.name ]);
                                })())(function () {
                                    return Data_Monoid.mempty(Effect_Aff.monoidAff(Control_Monad_Free_Trans.monoidFreeT(Web_Router_Types.functorCommand)(Effect_Aff.monadAff)(Data_Monoid.monoidUnit)));
                                });
                            })(v1);
                        })())();
                        return Effect_Ref.write(fiber)(fiberRef)();
                    };
                };
                return {
                    initialize: v.initialize(runRouter),
                    navigate: v.navigate,
                    redirect: v.redirect
                };
            };
        };
    };
};
var $$continue = Control_Monad_Free_Trans.liftFreeT(Web_Router_Types.functorCommand)(Effect_Aff.monadAff)(Web_Router_Types.Continue.value);
var _Transitioning = function (dictChoice) {
    return Data_Lens_Prism["prism'"](Web_Router_Types.Transitioning.create(Data_Maybe.Nothing.value))(function (v) {
        if (v instanceof Web_Router_Types.Transitioning) {
            return new Data_Maybe.Just(v.value1);
        };
        return Data_Maybe.Nothing.value;
    })(dictChoice);
};
var isTransitioning = Data_Lens_Prism.is(Data_HeytingAlgebra.heytingAlgebraBoolean)(_Transitioning(Data_Lens_Internal_Market.choiceMarket));
var _RouterState = function (dictStrong) {
    var setter = function (v) {
        if (v instanceof Web_Router_Types.Transitioning) {
            return Web_Router_Types.Transitioning.create(v.value0);
        };
        if (v instanceof Web_Router_Types.Resolved) {
            return Web_Router_Types.Resolved.create(v.value0);
        };
        throw new Error("Failed pattern match at Web.Router (line 74, column 12 - line 76, column 39): " + [ v.constructor.name ]);
    };
    var getter = function (v) {
        if (v instanceof Web_Router_Types.Transitioning) {
            return v.value1;
        };
        if (v instanceof Web_Router_Types.Resolved) {
            return v.value1;
        };
        throw new Error("Failed pattern match at Web.Router (line 70, column 12 - line 72, column 30): " + [ v.constructor.name ]);
    };
    return Data_Lens_Lens.lens(getter)(setter)(dictStrong);
};
var _Resolved = function (dictChoice) {
    return Data_Lens_Prism["prism'"](Web_Router_Types.Resolved.create(Data_Maybe.Nothing.value))(function (v) {
        if (v instanceof Web_Router_Types.Resolved) {
            return new Data_Maybe.Just(v.value1);
        };
        return Data_Maybe.Nothing.value;
    })(dictChoice);
};
var isResolved = Data_Lens_Prism.is(Data_HeytingAlgebra.heytingAlgebraBoolean)(_Resolved(Data_Lens_Internal_Market.choiceMarket));
module.exports = {
    makeRouter: makeRouter,
    override: override,
    redirect: redirect,
    "continue": $$continue,
    "_RouterState": _RouterState,
    "_Transitioning": _Transitioning,
    "_Resolved": _Resolved,
    isTransitioning: isTransitioning,
    isResolved: isResolved,
    Resolved: Web_Router_Types.Resolved,
    Transitioning: Web_Router_Types.Transitioning
};
