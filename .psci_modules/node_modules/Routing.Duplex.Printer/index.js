"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var JSURI = require("../JSURI/index.js");
var Routing_Duplex_Types = require("../Routing.Duplex.Types/index.js");
var RoutePrinter = function (x) {
    return x;
};
var semigroupRoutePrinter = {
    append: function (v) {
        return function (v1) {
            return function ($24) {
                return v1(v($24));
            };
        };
    }
};
var put = function (str) {
    return function (state) {
        return {
            segments: Data_Array.snoc(state.segments)(str),
            params: state.params,
            hash: state.hash
        };
    };
};
var printPath = function (v) {
    var unsafeEncodeURIComponent = (function () {
        var $25 = Data_Maybe.fromJust();
        return function ($26) {
            return $25(JSURI["encodeURIComponent"]($26));
        };
    })();
    var printSegments = function (v1) {
        if (v1.length === 1 && v1[0] === "") {
            return "/";
        };
        return Data_String_Common.joinWith("/")(Data_Functor.map(Data_Functor.functorArray)(unsafeEncodeURIComponent)(v1));
    };
    var printParam = function (key) {
        return function (v1) {
            if (v1 === "") {
                return unsafeEncodeURIComponent(key);
            };
            return unsafeEncodeURIComponent(key) + ("=" + unsafeEncodeURIComponent(v1));
        };
    };
    var printParams = function (v1) {
        if (v1.length === 0) {
            return "";
        };
        return "?" + Data_String_Common.joinWith("&")(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.uncurry(printParam))(v1));
    };
    var printHash = function (v1) {
        if (v1 === "") {
            return "";
        };
        return "#" + v1;
    };
    return printSegments(v.segments) + (printParams(v.params) + printHash(v.hash));
};
var param = function (key) {
    return function (val) {
        return function (state) {
            return {
                segments: state.segments,
                params: Data_Array.cons(new Data_Tuple.Tuple(key, val))(state.params),
                hash: state.hash
            };
        };
    };
};
var newtypeRoutePrinter = {
    Coercible0: function () {
        return undefined;
    }
};
var run = (function () {
    var $27 = Data_Function.applyFlipped(Routing_Duplex_Types.emptyRouteState);
    var $28 = Data_Newtype.unwrap();
    return function ($29) {
        return printPath($27($28($29)));
    };
})();
var monoidRoutePRinter = {
    mempty: Control_Category.identity(Control_Category.categoryFn),
    Semigroup0: function () {
        return semigroupRoutePrinter;
    }
};
var hash = function (h) {
    return function (v) {
        return {
            segments: v.segments,
            params: v.params,
            hash: h
        };
    };
};
var flag = function (key) {
    return function (val) {
        if (val) {
            return param(key)("");
        };
        if (Data_Boolean.otherwise) {
            return Data_Monoid.mempty(monoidRoutePRinter);
        };
        throw new Error("Failed pattern match at Routing.Duplex.Printer (line 39, column 1 - line 39, column 42): " + [ key.constructor.name, val.constructor.name ]);
    };
};
module.exports = {
    RoutePrinter: RoutePrinter,
    put: put,
    param: param,
    flag: flag,
    hash: hash,
    run: run,
    printPath: printPath,
    newtypeRoutePrinter: newtypeRoutePrinter,
    semigroupRoutePrinter: semigroupRoutePrinter,
    monoidRoutePRinter: monoidRoutePRinter
};
