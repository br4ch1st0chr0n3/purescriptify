"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var React_Basic_Hooks = require("../React.Basic.Hooks/index.js");
var React_Basic_Hooks_Internal = require("../React.Basic.Hooks.Internal/index.js");
var Type_Equality = require("../Type.Equality/index.js");
var UseResetToken = function (x) {
    return x;
};
var ResetToken = function (x) {
    return x;
};
var showResetToken = {
    show: function (v) {
        return "(ResetToken " + (Data_Show.show(Data_Show.showInt)(v) + ")");
    }
};
var ntUseResetToken = {
    Coercible0: function () {
        return undefined;
    }
};

// | Useful for resetting effects or component state. A `ResetToken` can be
// | used alongside other hook dependencies to force a reevaluation of
// | whatever depends on those dependencies.
// |
// | For example, consider an effect or API call which depends on the state
// | of a search bar. You may want a button in the UI to refresh stale data.
// | In this case you would include a `ResetToken` in your search effect/aff's
// | dependencies and call `useResetToken`'s reset effect in the button's
// | `onClick` handler.
var useResetToken = React_Basic_Hooks_Internal.coerceHook()(React_Basic_Hooks_Internal.bind(React_Basic_Hooks_Internal.ixBindRender)(React_Basic_Hooks.useState(0))(function (v) {
    var reset = v.value1(function (v1) {
        return v1 + 1 | 0;
    });
    return Control_Applicative.pure(React_Basic_Hooks_Internal.applicativeRender(Type_Equality.refl))(new Data_Tuple.Tuple(v.value0, reset));
}));
var eqResetToken = Data_Eq.eqInt;
module.exports = {
    UseResetToken: UseResetToken,
    useResetToken: useResetToken,
    ntUseResetToken: ntUseResetToken,
    eqResetToken: eqResetToken,
    showResetToken: showResetToken
};
