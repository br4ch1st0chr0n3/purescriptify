"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Purescriptify_Data_Log = require("../Purescriptify.Data.Log/index.js");
var React_Halo_Internal_Control = require("../React.Halo.Internal.Control/index.js");
var logMessage = function (dict) {
    return dict.logMessage;
};

// | This instance lets us avoid having to use `lift` when we use these functions in a component.
var logMessagesHalogenM = function (dictLogMessages) {
    return {
        logMessage: (function () {
            var $21 = Control_Monad_Trans_Class.lift(React_Halo_Internal_Control.monadTransHaloM)(dictLogMessages.Monad0());
            var $22 = logMessage(dictLogMessages);
            return function ($23) {
                return $21($22($23));
            };
        })(),
        Monad0: function () {
            return React_Halo_Internal_Control.monadHaloM;
        }
    };
};
var log = function (dictLogMessages) {
    return function (dictNow) {
        return function (reason) {
            return Control_Bind.composeKleisliFlipped((dictLogMessages.Monad0()).Bind1())(logMessage(dictLogMessages))(Purescriptify_Data_Log.mkLog(dictNow)(reason));
        };
    };
};

// | Log a message for debugging purposes
var logDebug = function (dictLogMessages) {
    return function (dictNow) {
        return log(dictLogMessages)(dictNow)(Purescriptify_Data_Log.Debug.value);
    };
};

// | Log a message as an error
var logError = function (dictLogMessages) {
    return function (dictNow) {
        return log(dictLogMessages)(dictNow)(Purescriptify_Data_Log["Error"].value);
    };
};

// | Log a message to convey non-error information
var logInfo = function (dictLogMessages) {
    return function (dictNow) {
        return log(dictLogMessages)(dictNow)(Purescriptify_Data_Log.Info.value);
    };
};

// | Log a message as a warning
var logWarn = function (dictLogMessages) {
    return function (dictNow) {
        return log(dictLogMessages)(dictNow)(Purescriptify_Data_Log.Warn.value);
    };
};

// | Hush a monadic action by logging the error, leaving it open why the error is being logged
var logHush = function (dictLogMessages) {
    return function (dictNow) {
        return function (reason) {
            return function (action) {
                return Control_Bind.bind((dictLogMessages.Monad0()).Bind1())(action)(function (v) {
                    if (v instanceof Data_Either.Left) {
                        if (reason instanceof Purescriptify_Data_Log.Debug) {
                            return Control_Apply.applySecond(((dictLogMessages.Monad0()).Bind1()).Apply0())(logDebug(dictLogMessages)(dictNow)(v.value0))(Control_Applicative.pure((dictLogMessages.Monad0()).Applicative0())(Data_Maybe.Nothing.value));
                        };
                        if (reason instanceof Purescriptify_Data_Log.Info) {
                            return Control_Apply.applySecond(((dictLogMessages.Monad0()).Bind1()).Apply0())(logInfo(dictLogMessages)(dictNow)(v.value0))(Control_Applicative.pure((dictLogMessages.Monad0()).Applicative0())(Data_Maybe.Nothing.value));
                        };
                        if (reason instanceof Purescriptify_Data_Log.Warn) {
                            return Control_Apply.applySecond(((dictLogMessages.Monad0()).Bind1()).Apply0())(logWarn(dictLogMessages)(dictNow)(v.value0))(Control_Applicative.pure((dictLogMessages.Monad0()).Applicative0())(Data_Maybe.Nothing.value));
                        };
                        if (reason instanceof Purescriptify_Data_Log["Error"]) {
                            return Control_Apply.applySecond(((dictLogMessages.Monad0()).Bind1()).Apply0())(logError(dictLogMessages)(dictNow)(v.value0))(Control_Applicative.pure((dictLogMessages.Monad0()).Applicative0())(Data_Maybe.Nothing.value));
                        };
                        throw new Error("Failed pattern match at Purescriptify.Capability.Log (line 43, column 19 - line 47, column 46): " + [ reason.constructor.name ]);
                    };
                    if (v instanceof Data_Either.Right) {
                        return Control_Applicative.pure((dictLogMessages.Monad0()).Applicative0())(new Data_Maybe.Just(v.value0));
                    };
                    throw new Error("Failed pattern match at Purescriptify.Capability.Log (line 42, column 9 - line 48, column 33): " + [ v.constructor.name ]);
                });
            };
        };
    };
};

// | Hush a monadic action by logging the error in debug mode
var debugHush = function (dictLogMessages) {
    return function (dictNow) {
        return logHush(dictLogMessages)(dictNow)(Purescriptify_Data_Log.Debug.value);
    };
};
module.exports = {
    logMessage: logMessage,
    log: log,
    logDebug: logDebug,
    logInfo: logInfo,
    logWarn: logWarn,
    logError: logError,
    logHush: logHush,
    debugHush: debugHush,
    logMessagesHalogenM: logMessagesHalogenM
};
