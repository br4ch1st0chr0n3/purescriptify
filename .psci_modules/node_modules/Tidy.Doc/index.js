"use strict";
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Dodo = require("../Dodo/index.js");
var Dodo_Internal = require("../Dodo.Internal/index.js");
var Tidy_Util = require("../Tidy.Util/index.js");
var ForceNone = (function () {
    function ForceNone() {

    };
    ForceNone.value = new ForceNone();
    return ForceNone;
})();
var ForceSpace = (function () {
    function ForceSpace() {

    };
    ForceSpace.value = new ForceSpace();
    return ForceSpace;
})();
var ForceBreak = (function () {
    function ForceBreak() {

    };
    ForceBreak.value = new ForceBreak();
    return ForceBreak;
})();
var LeadingComment = function (x) {
    return x;
};
var TrailingComment = function (x) {
    return x;
};
var FormatDoc = function (x) {
    return x;
};
var sourceBreak = function (n) {
    return function (v) {
        return {
            doc: v.doc,
            isEmpty: false,
            leading: {
                doc: v.leading.doc,
                left: v.leading.left,
                lines: v.leading.lines + n | 0,
                multiline: v.leading.multiline,
                right: v.leading.right
            },
            multiline: v.multiline,
            trailing: v.trailing
        };
    };
};
var softSpaceDoc = Dodo.flexAlt(Data_Monoid.mempty(Dodo_Internal.monoidDoc))(Dodo.space);
var mapDocs = function (k) {
    return function (v) {
        if (v.isEmpty) {
            return v;
        };
        if (Data_Boolean.otherwise) {
            return {
                doc: k(v.doc),
                isEmpty: v.isEmpty,
                leading: {
                    doc: k(v.leading.doc),
                    left: v.leading.left,
                    lines: v.leading.lines,
                    multiline: v.leading.multiline,
                    right: v.leading.right
                },
                multiline: v.multiline,
                trailing: {
                    doc: k(v.trailing.doc),
                    left: v.trailing.left,
                    multiline: v.trailing.multiline,
                    right: v.trailing.right
                }
            };
        };
        throw new Error("Failed pattern match at Tidy.Doc (line 470, column 1 - line 470, column 68): " + [ k.constructor.name, v.constructor.name ]);
    };
};
var mapDoc = function (k) {
    return function (v) {
        if (v.isEmpty) {
            return v;
        };
        if (Data_Boolean.otherwise) {
            return {
                doc: k(v.doc),
                isEmpty: v.isEmpty,
                leading: v.leading,
                multiline: v.multiline,
                trailing: v.trailing
            };
        };
        throw new Error("Failed pattern match at Tidy.Doc (line 465, column 1 - line 465, column 67): " + [ k.constructor.name, v.constructor.name ]);
    };
};
var locally = function (k) {
    return function (v) {
        return {
            doc: Dodo.locally(k)(v.doc),
            isEmpty: v.isEmpty,
            leading: v.leading,
            multiline: v.multiline,
            trailing: v.trailing
        };
    };
};
var isEmpty = function (v) {
    return v.isEmpty;
};
var indent = mapDocs(Dodo.indent);
var formatBlockComment = function ($156) {
    return (function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return new Data_Tuple.Tuple(false, Data_Monoid.mempty(Dodo_Internal.monoidDoc));
        };
        if (v instanceof Data_Maybe.Just) {
            var prefixSpaces = Data_Array.head(Data_Array.sort(Data_Ord.ordInt)(Data_Array.mapMaybe(function (str) {
                var spaces = Data_String_CodeUnits.length(Data_String_CodePoints.takeWhile(Data_Eq.eq(Data_String_CodePoints.eqCodePoint)(Data_String_CodePoints.codePointFromChar(" ")))(str));
                return Data_Functor.voidLeft(Data_Maybe.functorMaybe)(Control_Alternative.guard(Data_Maybe.alternativeMaybe)(spaces < Data_String_CodeUnits.length(str)))(spaces);
            })(v.value0.tail)));
            if (prefixSpaces instanceof Data_Maybe.Nothing) {
                return new Data_Tuple.Tuple(false, Dodo.text(v.value0.head));
            };
            if (prefixSpaces instanceof Data_Maybe.Just) {
                return new Data_Tuple.Tuple(true, Dodo.withPosition(function (pos) {
                    var newIndent = (function () {
                        var $80 = prefixSpaces.value0 < pos.indent;
                        if ($80) {
                            return 0;
                        };
                        return prefixSpaces.value0;
                    })();
                    var spaces = Data_Monoid.power(Data_Monoid.monoidString)(" ")(newIndent);
                    var tailDocs = Data_Functor.map(Data_Functor.functorArray)(function (str) {
                        return Dodo.text(Data_Maybe.fromMaybe(str)(Data_String_CodeUnits.stripPrefix(spaces)(str)));
                    })(v.value0.tail);
                    return Dodo.lines(Data_Foldable.foldableArray)([ Dodo.text(v.value0.head), Dodo.locally(function (prev) {
                        var $81 = newIndent < prev.indent;
                        if ($81) {
                            return {
                                indent: newIndent,
                                indentSpaces: spaces,
                                indentUnit: prev.indentUnit,
                                indentWidth: prev.indentWidth,
                                pageWidth: prev.pageWidth,
                                ribbonRatio: prev.ribbonRatio
                            };
                        };
                        return prev;
                    })(Data_Foldable.intercalate(Data_Foldable.foldableArray)(Dodo_Internal.monoidDoc)(Dodo["break"])(tailDocs)) ]);
                }));
            };
            throw new Error("Failed pattern match at Tidy.Doc (line 204, column 5 - line 224, column 14): " + [ prefixSpaces.constructor.name ]);
        };
        throw new Error("Failed pattern match at Tidy.Doc (line 200, column 54 - line 234, column 21): " + [ v.constructor.name ]);
    })(Data_Array.uncons(Tidy_Util.splitLines($156)));
};
var forceMinSourceBreaks = function (n) {
    return function (v) {
        if (v.isEmpty) {
            return v;
        };
        if (Data_Boolean.otherwise) {
            return {
                doc: v.doc,
                isEmpty: v.isEmpty,
                leading: {
                    doc: v.leading.doc,
                    left: v.leading.left,
                    lines: Data_Ord.max(Data_Ord.ordInt)(v.leading.lines)(n),
                    multiline: v.leading.multiline,
                    right: v.leading.right
                },
                multiline: v.multiline,
                trailing: v.trailing
            };
        };
        throw new Error("Failed pattern match at Tidy.Doc (line 314, column 1 - line 314, column 68): " + [ n.constructor.name, v.constructor.name ]);
    };
};
var force = function (k) {
    return function (f) {
        return function (m) {
            return function (doc) {
                if (f instanceof ForceBreak) {
                    return new Data_Tuple.Tuple(true, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(doc));
                };
                return new Data_Tuple.Tuple(m, k(doc));
            };
        };
    };
};
var flexGroup = function (v) {
    if (v.multiline) {
        return v;
    };
    if (Data_Boolean.otherwise) {
        return {
            doc: Dodo.flexGroup(v.doc),
            isEmpty: v.isEmpty,
            leading: v.leading,
            multiline: v.multiline,
            trailing: v.trailing
        };
    };
    throw new Error("Failed pattern match at Tidy.Doc (line 289, column 1 - line 289, column 50): " + [ v.constructor.name ]);
};
var flattenMax = function (n) {
    return function (v) {
        return {
            doc: v.doc,
            isEmpty: v.isEmpty,
            leading: {
                doc: v.leading.doc,
                left: v.leading.left,
                lines: Data_Ord.min(Data_Ord.ordInt)(v.leading.lines)(n),
                multiline: v.leading.multiline,
                right: v.leading.right
            },
            multiline: v.multiline,
            trailing: v.trailing
        };
    };
};
var flatten = flattenMax(0);
var eqForceBreak = {
    eq: function (x) {
        return function (y) {
            if (x instanceof ForceNone && y instanceof ForceNone) {
                return true;
            };
            if (x instanceof ForceSpace && y instanceof ForceSpace) {
                return true;
            };
            if (x instanceof ForceBreak && y instanceof ForceBreak) {
                return true;
            };
            return false;
        };
    }
};
var ordForceBreak = {
    compare: function (x) {
        return function (y) {
            if (x instanceof ForceNone && y instanceof ForceNone) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof ForceNone) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof ForceNone) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof ForceSpace && y instanceof ForceSpace) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof ForceSpace) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof ForceSpace) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof ForceBreak && y instanceof ForceBreak) {
                return Data_Ordering.EQ.value;
            };
            throw new Error("Failed pattern match at Tidy.Doc (line 57, column 1 - line 57, column 48): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return eqForceBreak;
    }
};
var breaks = function (fl) {
    return function (n) {
        if (n >= 2) {
            return Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(Dodo["break"]);
        };
        if (n === 1) {
            return Dodo["break"];
        };
        if (Data_Boolean.otherwise) {
            if (fl instanceof ForceBreak) {
                return Dodo["break"];
            };
            if (fl instanceof ForceSpace) {
                return Dodo.space;
            };
            if (fl instanceof ForceNone) {
                return Data_Monoid.mempty(Dodo_Internal.monoidDoc);
            };
            throw new Error("Failed pattern match at Tidy.Doc (line 430, column 17 - line 433, column 26): " + [ fl.constructor.name ]);
        };
        throw new Error("Failed pattern match at Tidy.Doc (line 426, column 1 - line 426, column 47): " + [ fl.constructor.name, n.constructor.name ]);
    };
};
var breakDoc = function (br) {
    return function (doc) {
        if (Dodo_Internal.isEmpty(doc)) {
            return doc;
        };
        if (Data_Boolean.otherwise) {
            if (br instanceof ForceBreak) {
                return Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(doc);
            };
            if (br instanceof ForceSpace) {
                return Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.space)(doc);
            };
            if (br instanceof ForceNone) {
                return doc;
            };
            throw new Error("Failed pattern match at Tidy.Doc (line 421, column 17 - line 424, column 23): " + [ br.constructor.name ]);
        };
        throw new Error("Failed pattern match at Tidy.Doc (line 418, column 1 - line 418, column 51): " + [ br.constructor.name, doc.constructor.name ]);
    };
};

// | Warning: This is not an associative join operation, and *requires*
// | right associativity. You will always get double breaks when used
// | with left associativity.
var flexDoubleBreak = function (v) {
    return function (v1) {
        if (v.isEmpty) {
            return v1;
        };
        if (v1.isEmpty) {
            return v;
        };
        if (Data_Boolean.otherwise) {
            var docLeft = Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v.doc)(breakDoc(v.trailing.left)(v.trailing.doc));
            var docRight = Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v1.leading.doc)(breakDoc(v1.leading.right)(v1.doc));
            var $108 = v1.leading.lines >= 2 || v.multiline;
            if ($108) {
                return {
                    doc: Data_Semigroup.append(Dodo_Internal.semigroupDoc)(docLeft)(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(docRight))),
                    isEmpty: v.isEmpty,
                    leading: v.leading,
                    multiline: true,
                    trailing: v1.trailing
                };
            };
            return {
                doc: Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.flexSelect(docLeft)(Data_Monoid.mempty(Dodo_Internal.monoidDoc))(Dodo["break"]))(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(docRight)),
                isEmpty: v.isEmpty,
                leading: v.leading,
                multiline: true,
                trailing: v1.trailing
            };
        };
        throw new Error("Failed pattern match at Tidy.Doc (line 393, column 1 - line 393, column 49): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var joinDoc = function (spaceFn) {
    return function (v) {
        return function (v1) {
            if (v.isEmpty) {
                return v1;
            };
            if (v1.isEmpty) {
                return v;
            };
            if (Data_Boolean.otherwise) {
                var docLeft = Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v.doc)(breakDoc(v.trailing.left)(v.trailing.doc));
                var docRight = Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v1.leading.doc)(breakDoc(v1.leading.right)(v1.doc));
                var $114 = v1.leading.lines > 0;
                if ($114) {
                    return {
                        doc: Data_Semigroup.append(Dodo_Internal.semigroupDoc)(docLeft)(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(breaks(ForceBreak.value)(v1.leading.lines))(docRight)),
                        isEmpty: v.isEmpty,
                        leading: v.leading,
                        multiline: true,
                        trailing: v1.trailing
                    };
                };
                var v2 = spaceFn(Data_Ord.max(ordForceBreak)(v.trailing.right)(v1.leading.left))(v1.leading.multiline || v1.multiline)(docRight);
                return {
                    doc: Data_Semigroup.append(Dodo_Internal.semigroupDoc)(docLeft)(v2.value1),
                    isEmpty: v.isEmpty,
                    leading: v.leading,
                    multiline: v.trailing.multiline || (v.multiline || v2.value0),
                    trailing: v1.trailing
                };
            };
            throw new Error("Failed pattern match at Tidy.Doc (line 435, column 1 - line 435, column 102): " + [ spaceFn.constructor.name, v.constructor.name, v1.constructor.name ]);
        };
    };
};
var flexSoftBreak = joinDoc(function (f) {
    return function (m) {
        return function (doc) {
            if (f instanceof ForceBreak) {
                return new Data_Tuple.Tuple(true, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(doc));
            };
            if (f instanceof ForceSpace) {
                if (m) {
                    return new Data_Tuple.Tuple(true, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.space)(doc));
                };
                return new Data_Tuple.Tuple(false, Dodo.flexGroup(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.spaceBreak)(doc)));
            };
            if (f instanceof ForceNone) {
                if (m) {
                    return new Data_Tuple.Tuple(true, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(doc));
                };
                return new Data_Tuple.Tuple(false, Dodo.flexGroup(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.softBreak)(doc)));
            };
            throw new Error("Failed pattern match at Tidy.Doc (line 358, column 37 - line 370, column 59): " + [ f.constructor.name ]);
        };
    };
});
var flexSoftSpace = joinDoc(function (f) {
    return function (m) {
        return function (doc) {
            if (f instanceof ForceBreak) {
                return new Data_Tuple.Tuple(true, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(doc));
            };
            if (f instanceof ForceSpace) {
                if (m) {
                    return new Data_Tuple.Tuple(true, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.space)(doc));
                };
                return new Data_Tuple.Tuple(false, Dodo.flexGroup(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.space)(doc)));
            };
            if (f instanceof ForceNone) {
                if (m) {
                    return new Data_Tuple.Tuple(true, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(softSpaceDoc)(doc));
                };
                return new Data_Tuple.Tuple(false, Dodo.flexGroup(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(softSpaceDoc)(doc)));
            };
            throw new Error("Failed pattern match at Tidy.Doc (line 343, column 37 - line 355, column 57): " + [ f.constructor.name ]);
        };
    };
});
var flexSpaceBreak = joinDoc(function (f) {
    return function (m) {
        return function (doc) {
            if (f instanceof ForceBreak) {
                return new Data_Tuple.Tuple(true, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(doc));
            };
            if (m) {
                return new Data_Tuple.Tuple(true, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.spaceBreak)(doc));
            };
            return new Data_Tuple.Tuple(false, Dodo.flexGroup(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.spaceBreak)(doc)));
        };
    };
});
var semigroupFormatDoc = {
    append: joinDoc(force(Control_Category.identity(Control_Category.categoryFn)))
};
var softBreak = joinDoc(function (f) {
    return function (m) {
        return function (doc) {
            if (f instanceof ForceBreak) {
                return new Data_Tuple.Tuple(true, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(doc));
            };
            if (f instanceof ForceSpace) {
                return new Data_Tuple.Tuple(m, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.spaceBreak)(doc));
            };
            if (f instanceof ForceNone) {
                return new Data_Tuple.Tuple(m, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.softBreak)(doc));
            };
            throw new Error("Failed pattern match at Tidy.Doc (line 373, column 33 - line 379, column 36): " + [ f.constructor.name ]);
        };
    };
});
var softSpace = joinDoc(function (f) {
    return function (m) {
        return function (doc) {
            if (f instanceof ForceBreak) {
                return new Data_Tuple.Tuple(true, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(doc));
            };
            if (f instanceof ForceSpace) {
                return new Data_Tuple.Tuple(m, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.space)(doc));
            };
            if (f instanceof ForceNone) {
                return new Data_Tuple.Tuple(m, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(softSpaceDoc)(doc));
            };
            throw new Error("Failed pattern match at Tidy.Doc (line 382, column 33 - line 388, column 34): " + [ f.constructor.name ]);
        };
    };
});
var space = joinDoc(force(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.space)));
var spaceBreak = joinDoc(force(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.spaceBreak)));
var toDoc = function (v) {
    if (v.isEmpty) {
        return Data_Monoid.mempty(Dodo_Internal.monoidDoc);
    };
    if (Data_Boolean.otherwise) {
        return Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v.leading.doc)(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(breakDoc(v.leading.right)(v.doc))(breakDoc(v.trailing.left)(v.trailing.doc)));
    };
    throw new Error("Failed pattern match at Tidy.Doc (line 482, column 1 - line 482, column 40): " + [ v.constructor.name ]);
};
var semigroupLeadingComment = {
    append: function (v) {
        return function (v1) {
            if (Dodo_Internal.isEmpty(v.doc)) {
                return {
                    doc: v1.doc,
                    left: Data_Ord.max(ordForceBreak)(v.left)(v1.left),
                    lines: v.lines + v1.lines | 0,
                    multiline: v1.multiline,
                    right: v1.right
                };
            };
            if (Dodo_Internal.isEmpty(v1.doc)) {
                return {
                    doc: Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v.doc)(breaks(ForceNone.value)(v1.lines)),
                    left: v.left,
                    lines: v.lines,
                    multiline: v.multiline || v1.lines > 0,
                    right: (function () {
                        var $133 = v1.lines > 0;
                        if ($133) {
                            return ForceNone.value;
                        };
                        return Data_Ord.max(ordForceBreak)(v.right)(v1.right);
                    })()
                };
            };
            if (Data_Boolean.otherwise) {
                var br = Data_Ord.max(ordForceBreak)(v.right)(v1.left);
                var $134 = v1.lines > 0 || Data_Eq.eq(eqForceBreak)(br)(ForceBreak.value);
                if ($134) {
                    return {
                        doc: Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v.doc)(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(breaks(ForceBreak.value)(v1.lines))(v1.doc)),
                        left: v.left,
                        lines: v.lines,
                        multiline: true,
                        right: v1.right
                    };
                };
                return {
                    doc: Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v.doc)(breakDoc(br)(v1.doc)),
                    left: v.left,
                    lines: v.lines,
                    multiline: v.multiline || v1.multiline,
                    right: v1.right
                };
            };
            throw new Error("Failed pattern match at Tidy.Doc (line 74, column 1 - line 104, column 14): " + [ v.constructor.name, v1.constructor.name ]);
        };
    }
};
var leadingBlockComment = function (str) {
    return function (v) {
        var v1 = formatBlockComment(str);
        var comm = {
            doc: v1.value1,
            left: ForceSpace.value,
            lines: 0,
            multiline: v1.value0,
            right: ForceSpace.value
        };
        return {
            doc: v.doc,
            isEmpty: false,
            leading: Data_Semigroup.append(semigroupLeadingComment)(comm)(v.leading),
            multiline: v.multiline,
            trailing: v.trailing
        };
    };
};
var leadingLineComment = function (str) {
    return function (v) {
        var comm = {
            doc: Dodo.text(str),
            left: ForceBreak.value,
            lines: 0,
            multiline: false,
            right: ForceBreak.value
        };
        return {
            doc: v.doc,
            isEmpty: false,
            leading: Data_Semigroup.append(semigroupLeadingComment)(comm)(v.leading),
            multiline: v.multiline,
            trailing: v.trailing
        };
    };
};
var monoidLeadingComment = {
    mempty: {
        doc: Data_Monoid.mempty(Dodo_Internal.monoidDoc),
        left: ForceNone.value,
        lines: 0,
        multiline: false,
        right: ForceNone.value
    },
    Semigroup0: function () {
        return semigroupLeadingComment;
    }
};
var semigroupTrailingComment = {
    append: function (v) {
        return function (v1) {
            if (Dodo_Internal.isEmpty(v.doc)) {
                return {
                    doc: v1.doc,
                    left: Data_Ord.max(ordForceBreak)(v.left)(v1.left),
                    multiline: v1.multiline,
                    right: v1.right
                };
            };
            if (Dodo_Internal.isEmpty(v1.doc)) {
                return {
                    doc: v.doc,
                    left: v.left,
                    multiline: v.multiline,
                    right: Data_Ord.max(ordForceBreak)(v.right)(v1.right)
                };
            };
            if (Data_Boolean.otherwise) {
                return {
                    doc: Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v.doc)(breakDoc(Data_Ord.max(ordForceBreak)(v.right)(v1.left))(v1.doc)),
                    left: v.left,
                    multiline: v.multiline || v1.multiline,
                    right: v1.right
                };
            };
            throw new Error("Failed pattern match at Tidy.Doc (line 115, column 1 - line 126, column 12): " + [ v.constructor.name, v1.constructor.name ]);
        };
    }
};
var trailingBlockComment = function (str) {
    return function (v) {
        var v1 = formatBlockComment(str);
        var comm = {
            doc: v1.value1,
            left: ForceSpace.value,
            multiline: v1.value0,
            right: ForceSpace.value
        };
        return {
            doc: v.doc,
            isEmpty: false,
            leading: v.leading,
            multiline: v.multiline,
            trailing: Data_Semigroup.append(semigroupTrailingComment)(comm)(v.trailing)
        };
    };
};
var trailingLineComment = function (str) {
    return function (v) {
        var comm = {
            doc: Dodo.text(str),
            left: ForceSpace.value,
            multiline: false,
            right: ForceBreak.value
        };
        return {
            doc: v.doc,
            isEmpty: false,
            leading: v.leading,
            multiline: v.multiline,
            trailing: Data_Semigroup.append(semigroupTrailingComment)(comm)(v.trailing)
        };
    };
};
var monoidTrailingComment = {
    mempty: {
        doc: Data_Monoid.mempty(Dodo_Internal.monoidDoc),
        left: ForceNone.value,
        multiline: false,
        right: ForceNone.value
    },
    Semigroup0: function () {
        return semigroupTrailingComment;
    }
};
var monoidFormatDoc = {
    mempty: {
        doc: Data_Monoid.mempty(Dodo_Internal.monoidDoc),
        leading: Data_Monoid.mempty(monoidLeadingComment),
        isEmpty: true,
        multiline: false,
        trailing: Data_Monoid.mempty(monoidTrailingComment)
    },
    Semigroup0: function () {
        return semigroupFormatDoc;
    }
};
var fromDoc = function (doc) {
    if (Dodo_Internal.isEmpty(doc)) {
        return Data_Monoid.mempty(monoidFormatDoc);
    };
    if (Data_Boolean.otherwise) {
        return {
            doc: doc,
            leading: Data_Monoid.mempty(monoidLeadingComment),
            isEmpty: false,
            multiline: false,
            trailing: Data_Monoid.mempty(monoidTrailingComment)
        };
    };
    throw new Error("Failed pattern match at Tidy.Doc (line 158, column 1 - line 158, column 42): " + [ doc.constructor.name ]);
};
var text = function ($157) {
    return fromDoc(Dodo.text($157));
};
var joinWithMap = function (dictFoldable) {
    return function (op) {
        return function (k) {
            var go = function (a) {
                return function (b) {
                    if (isEmpty(a)) {
                        return k(b);
                    };
                    if (Data_Boolean.otherwise) {
                        return op(a)(k(b));
                    };
                    throw new Error("Failed pattern match at Tidy.Doc (line 501, column 3 - line 503, column 29): " + [ a.constructor.name, b.constructor.name ]);
                };
            };
            return Data_Foldable.foldl(dictFoldable)(go)(Data_Monoid.mempty(monoidFormatDoc));
        };
    };
};
var joinWith = function (dictFoldable) {
    return Data_Function.flip(joinWithMap(dictFoldable))(Control_Category.identity(Control_Category.categoryFn));
};
var $$break = joinDoc(force(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])));
var anchor = function (v) {
    if (v.leading.lines > 0) {
        return {
            doc: v.doc,
            isEmpty: v.isEmpty,
            leading: {
                doc: v.leading.doc,
                left: v.leading.left,
                lines: 0,
                multiline: v.leading.multiline,
                right: v.leading.right
            },
            multiline: true,
            trailing: v.trailing
        };
    };
    return v;
};
var alignCurrentColumn = mapDocs(Dodo.alignCurrentColumn);
var align = function ($158) {
    return mapDocs(Dodo.align($158));
};
module.exports = {
    FormatDoc: FormatDoc,
    LeadingComment: LeadingComment,
    TrailingComment: TrailingComment,
    ForceNone: ForceNone,
    ForceSpace: ForceSpace,
    ForceBreak: ForceBreak,
    text: text,
    leadingLineComment: leadingLineComment,
    trailingLineComment: trailingLineComment,
    leadingBlockComment: leadingBlockComment,
    trailingBlockComment: trailingBlockComment,
    anchor: anchor,
    flatten: flatten,
    flattenMax: flattenMax,
    indent: indent,
    align: align,
    alignCurrentColumn: alignCurrentColumn,
    locally: locally,
    "break": $$break,
    softBreak: softBreak,
    spaceBreak: spaceBreak,
    sourceBreak: sourceBreak,
    forceMinSourceBreaks: forceMinSourceBreaks,
    space: space,
    softSpace: softSpace,
    flexSpaceBreak: flexSpaceBreak,
    flexSoftSpace: flexSoftSpace,
    flexSoftBreak: flexSoftBreak,
    flexDoubleBreak: flexDoubleBreak,
    flexGroup: flexGroup,
    fromDoc: fromDoc,
    toDoc: toDoc,
    mapDoc: mapDoc,
    breakDoc: breakDoc,
    breaks: breaks,
    joinWithMap: joinWithMap,
    joinWith: joinWith,
    eqForceBreak: eqForceBreak,
    ordForceBreak: ordForceBreak,
    semigroupLeadingComment: semigroupLeadingComment,
    monoidLeadingComment: monoidLeadingComment,
    semigroupTrailingComment: semigroupTrailingComment,
    monoidTrailingComment: monoidTrailingComment,
    semigroupFormatDoc: semigroupFormatDoc,
    monoidFormatDoc: monoidFormatDoc
};
