
// | This module provides the `bench` function, which prints a short summary
// | of the running times of a synchronous function to the console.
// |
// | For benchmarking tasks which require finer accuracy, or graphs as output,
// | consider using `purescript-benchotron` instead.
"use strict";
var $foreign = require("./foreign.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Number = require("../Data.Number/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Console = require("../Effect.Console/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var $$Math = require("../Math/index.js");
var Partial_Unsafe = require("../Partial.Unsafe/index.js");
var withUnits = function (t) {
    if (t < 1000.0) {
        return $foreign.toFixed(t) + " ns";
    };
    if (t < 1000000.0) {
        return $foreign.toFixed(t / 1000.0) + " \u03bcs";
    };
    if (t < 1.0e9) {
        return $foreign.toFixed(t / 1000000.0) + " ms";
    };
    if (Data_Boolean.otherwise) {
        return $foreign.toFixed(t / 1.0e9) + " s";
    };
    throw new Error("Failed pattern match at Performance.Minibench (line 39, column 1 - line 39, column 30): " + [ t.constructor.name ]);
};
var fromHrTime = function (v) {
    if (v.length === 2) {
        return Data_Int.toNumber(v[0]) * 1.0e9 + Data_Int.toNumber(v[1]);
    };
    return Partial_Unsafe.unsafeCrashWith("fromHrTime: unexpected result from process.hrtime()");
};
var benchWith$prime = function (n) {
    return function (f) {
        return function __do() {
            var sumRef = Effect_Ref["new"](0.0)();
            var sum2Ref = Effect_Ref["new"](0.0)();
            var minRef = Effect_Ref["new"](Data_Number.infinity)();
            var maxRef = Effect_Ref["new"](0.0)();
            $foreign.gc();
            Effect.forE(0)(n)(function (v) {
                return function __do() {
                    var t1 = $foreign.hrTime([ 0, 0 ]);
                    var t2 = Data_Function["const"](function () {
                        return $foreign.hrTime(t1);
                    })(f(Data_Unit.unit))();
                    var ns = fromHrTime(t2);
                    var square = ns * ns;
                    Effect_Ref.modify(function (v1) {
                        return v1 + ns;
                    })(sumRef)();
                    Effect_Ref.modify(function (v1) {
                        return v1 + square;
                    })(sum2Ref)();
                    Effect_Ref.modify(function (v1) {
                        return $$Math.min(v1)(ns);
                    })(minRef)();
                    Effect_Ref.modify(function (v1) {
                        return $$Math.max(v1)(ns);
                    })(maxRef)();
                    return Data_Unit.unit;
                };
            })();
            var sum = Effect_Ref.read(sumRef)();
            var sum2 = Effect_Ref.read(sum2Ref)();
            var min$prime = Effect_Ref.read(minRef)();
            var max$prime = Effect_Ref.read(maxRef)();
            var n$prime = Data_Int.toNumber(n);
            var mean = sum / n$prime;
            var stdDev = $$Math.sqrt((sum2 - n$prime * mean * mean) / (n$prime - 1.0));
            return {
                mean: mean,
                stdDev: stdDev,
                min: min$prime,
                max: max$prime
            };
        };
    };
};

// | Estimate the running time of a function and print a summary to the console,
// | specifying the number of samples to take. More samples will give a better
// | estimate of both mean and standard deviation, but will increase running time.
// |
// | To increase benchmark accuracy by forcing garbage collection before the
// | benchmark is run, node should be invoked with the '--expose-gc' flag.
var benchWith = function (n) {
    return function (f) {
        return function __do() {
            var res = benchWith$prime(n)(f)();
            Effect_Console.log("mean   = " + withUnits(res.mean))();
            Effect_Console.log("stddev = " + withUnits(res.stdDev))();
            Effect_Console.log("min    = " + withUnits(res.min))();
            return Effect_Console.log("max    = " + withUnits(res.max))();
        };
    };
};

// | Estimate the running time of a function and print a summary to the console,
// | by running the function 1000 times.
// |
// | For example:
// |
// | ```
// | > import Data.Array
// | > import Data.Foldable
// | > import Performance.Minibench
// | > bench \_ -> sum (1 .. 10000)
// |
// | mean   = 414.00 μs
// | stddev = 494.82 μs
// | ```
var bench = benchWith(1000);
module.exports = {
    bench: bench,
    benchWith: benchWith,
    "benchWith'": benchWith$prime,
    withUnits: withUnits
};
