"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Data_Argonaut_Aeson = require("../Data.Argonaut.Aeson/index.js");
var Data_Argonaut_Decode_Decoders = require("../Data.Argonaut.Decode.Decoders/index.js");
var Data_Argonaut_Decode_Error = require("../Data.Argonaut.Decode.Error/index.js");
var Data_Argonaut_Encode_Encoders = require("../Data.Argonaut.Encode.Encoders/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Lens_Iso_Newtype = require("../Data.Lens.Iso.Newtype/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_UUID = require("../Data.UUID/index.js");
var Effect = require("../Effect/index.js");
var UUID = function (x) {
    return x;
};
var toPathSegmentUUID = {
    toPathSegment: function (v) {
        return Data_UUID.toString(v);
    }
};
var showUUID = {
    show: function (v) {
        return Data_UUID.toString(v);
    }
};
var parseUUID = (function () {
    var $22 = Data_Functor.map(Data_Maybe.functorMaybe)(UUID);
    return function ($23) {
        return $22(Data_UUID.parseUUID($23));
    };
})();
var newtypeUUID = {
    Coercible0: function () {
        return undefined;
    }
};
var toString = (function () {
    var $24 = Data_Newtype.unwrap();
    return function ($25) {
        return Data_UUID.toString($24($25));
    };
})();
var genv5UUID = function (s) {
    var $26 = Data_UUID.genv5UUID(s);
    var $27 = Data_Newtype.unwrap();
    return function ($28) {
        return UUID($26($27($28)));
    };
};
var genv3UUID = function (s) {
    var $29 = Data_UUID.genv3UUID(s);
    var $30 = Data_Newtype.unwrap();
    return function ($31) {
        return UUID($29($30($31)));
    };
};
var genericUUID = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var genUUID = Data_Functor.map(Effect.functorEffect)(UUID)(Data_UUID.genUUID);
var eqUUID = {
    eq: function (x) {
        return function (y) {
            return Data_Eq.eq(Data_UUID.eqUUID)(x)(y);
        };
    }
};
var ordUUID = {
    compare: function (x) {
        return function (y) {
            return Data_Ord.compare(Data_UUID.ordUUID)(x)(y);
        };
    },
    Eq0: function () {
        return eqUUID;
    }
};
var encodeJsonUUID = {
    encodeJson: (function () {
        var $32 = Data_Newtype.unwrap();
        return function ($33) {
            return Data_Argonaut_Encode_Encoders.encodeString(Data_UUID.toString($32($33)));
        };
    })()
};
var emptyUUID = Data_UUID.emptyUUID;
var decodeJsonUUID = {
    decodeJson: Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
        var $34 = Data_Functor.map(Data_Either.functorEither)(UUID);
        var $35 = Data_Argonaut_Aeson.maybeToEither(new Data_Argonaut_Decode_Error.TypeMismatch("String in UUID format"));
        return function ($36) {
            return $34($35(Data_UUID.parseUUID($36)));
        };
    })())(Data_Argonaut_Decode_Decoders.decodeString)
};
var _UUID = function (dictProfunctor) {
    return Data_Lens_Iso_Newtype["_Newtype"]()()(dictProfunctor);
};
module.exports = {
    UUID: UUID,
    "_UUID": _UUID,
    emptyUUID: emptyUUID,
    genUUID: genUUID,
    parseUUID: parseUUID,
    genv3UUID: genv3UUID,
    genv5UUID: genv5UUID,
    toString: toString,
    newtypeUUID: newtypeUUID,
    genericUUID: genericUUID,
    eqUUID: eqUUID,
    ordUUID: ordUUID,
    showUUID: showUUID,
    toPathSegmentUUID: toPathSegmentUUID,
    encodeJsonUUID: encodeJsonUUID,
    decodeJsonUUID: decodeJsonUUID
};
