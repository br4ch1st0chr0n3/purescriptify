"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Node_FS_Async = require("../Node.FS.Async/index.js");
var toAff = function (p) {
    return Effect_Aff.makeAff(function (k) {
        return Data_Functor.voidLeft(Effect.functorEffect)(p(k))(Effect_Aff.nonCanceler);
    });
};
var toAff1 = function (f) {
    return function (a) {
        return toAff(f(a));
    };
};

// |
// | Deletes a file.
// |
var unlink = toAff1(Node_FS_Async.unlink);
var toAff2 = function (f) {
    return function (a) {
        return function (b) {
            return toAff(f(a)(b));
        };
    };
};

// |
// | Truncates a file to the specified length.
// |
var truncate = toAff2(Node_FS_Async.truncate);

// |
// | Writes a buffer to a file.
// |
var writeFile = toAff2(Node_FS_Async.writeFile);
var toAff3 = function (f) {
    return function (a) {
        return function (b) {
            return function (c) {
                return toAff(f(a)(b)(c));
            };
        };
    };
};

// |
// | Sets the accessed and modified times for the specified file.
// |
var utimes = toAff3(Node_FS_Async.utimes);

// |
// | Writes text to a file using the specified encoding.
// |
var writeTextFile = toAff3(Node_FS_Async.writeTextFile);
var toAff5 = function (f) {
    return function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return toAff(f(a)(b)(c)(d)(e));
                    };
                };
            };
        };
    };
};

// |
// | Creates a symlink.
// |
var symlink = toAff3(Node_FS_Async.symlink);

// |
// | Gets file statistics.
// |
var stat = toAff1(Node_FS_Async.stat);

// |
// | Deletes a directory.
// |
var rmdir = toAff1(Node_FS_Async.rmdir);

// |
// | Rename a file.
// |
var rename = toAff2(Node_FS_Async.rename);

// |
// | Find the canonicalized absolute location for a path using a cache object
// | for already resolved paths.
// |
var realpath$prime = toAff2(Node_FS_Async["realpath'"]);

// |
// | Find the canonicalized absolute location for a path.
// |
var realpath = toAff1(Node_FS_Async.realpath);

// |
// | Reads the value of a symlink.
// |
var readlink = toAff1(Node_FS_Async.readlink);

// |
// | Reads the contents of a directory.
// |
var readdir = toAff1(Node_FS_Async.readdir);

// |
// | Reads the entire contents of a text file with the specified encoding.
// |
var readTextFile = toAff2(Node_FS_Async.readTextFile);

// |
// | Reads the entire contents of a file returning the result as a raw buffer.
// |
var readFile = toAff1(Node_FS_Async.readFile);

// |
// | Makes a new directory with the specified permissions.
// |
var mkdir$prime = toAff2(Node_FS_Async["mkdir'"]);

// |
// | Makes a new directory.
// |
var mkdir = toAff1(Node_FS_Async.mkdir);

// |
// | Creates a link to an existing file.
// |
var link = toAff2(Node_FS_Async.link);

// | Write to a file asynchronously. See the [Node Documentation](https://nodejs.org/api/fs.html#fs_fs_write_fd_buffer_offset_length_position_callback)
// | for details.
var fdWrite = toAff5(Node_FS_Async.fdWrite);

// | Read from a file asynchronously. See the [Node Documentation](https://nodejs.org/api/fs.html#fs_fs_read_fd_buffer_offset_length_position_callback)
// | for details.
var fdRead = toAff5(Node_FS_Async.fdRead);

// | Open a file asynchronously. See the [Node Documentation](https://nodejs.org/api/fs.html#fs_fs_open_path_flags_mode_callback)
// | for details.
var fdOpen = toAff3(Node_FS_Async.fdOpen);

// | Convenience function to fill the whole buffer from the current
// | file position.
var fdNext = toAff2(Node_FS_Async.fdNext);

// | Close a file asynchronously. See the [Node Documentation](https://nodejs.org/api/fs.html#fs_fs_close_fd_callback)
// | for details.
var fdClose = toAff1(Node_FS_Async.fdClose);

// | Convenience function to append the whole buffer to the current
// | file position.
var fdAppend = toAff2(Node_FS_Async.fdAppend);

// |
// | Check to see if a file exists.
// |
var exists = function (file) {
    return Effect_Aff.makeAff(function (k) {
        return Data_Functor.voidLeft(Effect.functorEffect)(Node_FS_Async.exists(file)((function () {
            var $0 = Control_Applicative.pure(Data_Either.applicativeEither);
            return function ($1) {
                return k($0($1));
            };
        })()))(Effect_Aff.nonCanceler);
    });
};

// |
// | Changes the ownership of a file.
// |
var chown = toAff3(Node_FS_Async.chown);

// |
// | Changes the permissions of a file.
// |
var chmod = toAff2(Node_FS_Async.chmod);

// |
// | Appends text to a file using the specified encoding.
// |
var appendTextFile = toAff3(Node_FS_Async.appendTextFile);

// |
// | Appends the contents of a buffer to a file.
// |
var appendFile = toAff2(Node_FS_Async.appendFile);
module.exports = {
    rename: rename,
    truncate: truncate,
    chown: chown,
    chmod: chmod,
    stat: stat,
    link: link,
    symlink: symlink,
    readlink: readlink,
    realpath: realpath,
    "realpath'": realpath$prime,
    unlink: unlink,
    rmdir: rmdir,
    mkdir: mkdir,
    "mkdir'": mkdir$prime,
    readdir: readdir,
    utimes: utimes,
    readFile: readFile,
    readTextFile: readTextFile,
    writeFile: writeFile,
    writeTextFile: writeTextFile,
    appendFile: appendFile,
    appendTextFile: appendTextFile,
    exists: exists,
    fdOpen: fdOpen,
    fdRead: fdRead,
    fdNext: fdNext,
    fdWrite: fdWrite,
    fdAppend: fdAppend,
    fdClose: fdClose
};
