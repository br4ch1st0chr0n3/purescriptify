"use strict";
var Control_Apply = require("../Control.Apply/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");

// | A `Perm` value specifies what is allowed to be done with a particular
// | file by a particular class of user &mdash; that is, whether it is
// | readable, writable, and/or executable. It has a `Semiring` instance, which
// | allows you to combine permissions:
// |
// | - `(+)` adds `Perm` values together. For example, `read + write` means
// |   "readable and writable".
// | - `(*)` masks permissions. It can be thought of as selecting only the
// |    permissions that two `Perm` values have in common. For example:
// |    `(read + write) * (write + execute) == write`.
// |
// | You can think also of a `Perm` value as a subset of the set
// | `{ read, write, execute }`; then, `(+)` and `(*)` represent set union and
// | intersection respectively.
var Perm = function (x) {
    return x;
};

// | A `Perms` value includes all the permissions information about a
// | particular file or directory, by storing a `Perm` value for each of the
// | file owner, the group, and any other users.
var Perms = function (x) {
    return x;
};

// | The "writable" permission.
var write = {
    r: false,
    w: true,
    x: false
};
var semiringPerm = {
    add: function (v) {
        return function (v1) {
            return {
                r: v.r || v1.r,
                w: v.w || v1.w,
                x: v.x || v1.x
            };
        };
    },
    zero: {
        r: false,
        w: false,
        x: false
    },
    mul: function (v) {
        return function (v1) {
            return {
                r: v.r && v1.r,
                w: v.w && v1.w,
                x: v.x && v1.x
            };
        };
    },
    one: {
        r: true,
        w: true,
        x: true
    }
};

// | The "readable" permission.
var read = {
    r: true,
    w: false,
    x: false
};

// | Convert a `Perm` to an octal digit. For example:
// |
// | * `permToInt r == 4`
// | * `permToInt w == 2`
// | * `permToInt (r + w) == 6`
var permToInt = function (v) {
    return ((function () {
        if (v.r) {
            return 4;
        };
        return 0;
    })() + (function () {
        if (v.w) {
            return 2;
        };
        return 0;
    })() | 0) + (function () {
        if (v.x) {
            return 1;
        };
        return 0;
    })() | 0;
};

// | Convert a `Perm` to an octal string, via `permToInt`.
var permToString = (function () {
    var $95 = Data_Show.show(Data_Show.showInt);
    return function ($96) {
        return $95(permToInt($96));
    };
})();

// | Convert a `Perms` value to an octal string, in a format similar to that
// | accepted by `chmod`. For example:
// | `permsToString (mkPerms (read + write) read read) == "0644"`
var permsToString = function (v) {
    return "0" + (permToString(v.u) + (permToString(v.g) + permToString(v.o)));
};

// | Convert a `Perms` value to an `Int`, via `permsToString`.
var permsToInt = (function () {
    var $97 = Data_Maybe.fromJust();
    var $98 = Data_Int.fromStringAs(Data_Int.octal);
    return function ($99) {
        return $97($98(permsToString($99)));
    };
})();

// | No permissions. This is the identity of the `Semiring` operation `(+)`
// | for `Perm`; that is, it is the same as `zero`.
var none = Data_Semiring.zero(semiringPerm);

// | Create a `Perms` value. The arguments represent the owner's, group's, and
// | other users' permission sets, respectively.
var mkPerms = function (u) {
    return function (g) {
        return function (o) {
            return {
                u: u,
                g: g,
                o: o
            };
        };
    };
};

// | Create a `Perm` value. The arguments represent the readable, writable, and
// | executable permissions, in that order.
var mkPerm = function (r) {
    return function (w) {
        return function (x) {
            return {
                r: r,
                w: w,
                x: x
            };
        };
    };
};

// | The "executable" permission.
var execute = {
    r: false,
    w: false,
    x: true
};
var permFromChar = function (c) {
    if (c === "0") {
        return new Data_Maybe.Just(none);
    };
    if (c === "1") {
        return new Data_Maybe.Just(execute);
    };
    if (c === "2") {
        return new Data_Maybe.Just(write);
    };
    if (c === "3") {
        return new Data_Maybe.Just(Data_Semiring.add(semiringPerm)(write)(execute));
    };
    if (c === "4") {
        return new Data_Maybe.Just(read);
    };
    if (c === "5") {
        return new Data_Maybe.Just(Data_Semiring.add(semiringPerm)(read)(execute));
    };
    if (c === "6") {
        return new Data_Maybe.Just(Data_Semiring.add(semiringPerm)(read)(write));
    };
    if (c === "7") {
        return new Data_Maybe.Just(Data_Semiring.add(semiringPerm)(Data_Semiring.add(semiringPerm)(read)(write))(execute));
    };
    return Data_Maybe.Nothing.value;
};

// | Attempt to parse a `Perms` value from a `String` containing an octal
// | integer. For example,
// | `permsFromString "0644" == Just (mkPerms (read + write) read read)`.
var permsFromString = (function () {
    var zeroChar = Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Enum.boundedEnumChar)(48));
    var dropPrefix = function (x) {
        return function (xs) {
            if (Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqChar))(Data_String_CodeUnits.charAt(0)(xs))(new Data_Maybe.Just(x))) {
                return Data_String_CodePoints.drop(1)(xs);
            };
            if (Data_Boolean.otherwise) {
                return xs;
            };
            throw new Error("Failed pattern match at Node.FS.Perms (line 126, column 5 - line 128, column 35): " + [ x.constructor.name, xs.constructor.name ]);
        };
    };
    var _perms = function (v) {
        if (v.length === 3) {
            return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(mkPerms)(permFromChar(v[0])))(permFromChar(v[1])))(permFromChar(v[2]));
        };
        return Data_Maybe.Nothing.value;
    };
    var $100 = dropPrefix(zeroChar);
    return function ($101) {
        return _perms(Data_String_CodeUnits.toCharArray($100($101)));
    };
})();
var eqPerm = {
    eq: function (v) {
        return function (v1) {
            return v.r === v1.r && (v.w === v1.w && v.x === v1.x);
        };
    }
};
var eqPerms = {
    eq: function (v) {
        return function (v1) {
            return Data_Eq.eq(eqPerm)(v.u)(v1.u) && (Data_Eq.eq(eqPerm)(v.g)(v1.g) && Data_Eq.eq(eqPerm)(v.o)(v1.o));
        };
    }
};
var ordPerm = {
    compare: function (v) {
        return function (v1) {
            return Data_Ord.compare(Data_Ord.ordArray(Data_Ord.ordBoolean))([ v.r, v.w, v.x ])([ v1.r, v1.w, v1.x ]);
        };
    },
    Eq0: function () {
        return eqPerm;
    }
};
var ordPerms = {
    compare: function (v) {
        return function (v1) {
            return Data_Ord.compare(Data_Ord.ordArray(ordPerm))([ v.u, v.g, v.o ])([ v1.u, v1.g, v1.o ]);
        };
    },
    Eq0: function () {
        return eqPerms;
    }
};

// | All permissions: readable, writable, and executable. This is the identity
// | of the `Semiring` operation `(*)` for `Perm`; that is, it is the same as
// | `one`.
var all = Data_Semiring.one(semiringPerm);
var showPerm = {
    show: function (v) {
        if (Data_Eq.eq(eqPerm)(v)(none)) {
            return "none";
        };
        if (Data_Eq.eq(eqPerm)(v)(all)) {
            return "all";
        };
        var ps = Data_Semigroup.append(Data_Semigroup.semigroupArray)((function () {
            if (v.r) {
                return [ "read" ];
            };
            return [  ];
        })())(Data_Semigroup.append(Data_Semigroup.semigroupArray)((function () {
            if (v.w) {
                return [ "write" ];
            };
            return [  ];
        })())((function () {
            if (v.x) {
                return [ "execute" ];
            };
            return [  ];
        })()));
        return Data_String_Common.joinWith(" + ")(ps);
    }
};
var showPerms = {
    show: function (v) {
        var f = function (perm) {
            var str = Data_Show.show(showPerm)(perm);
            var $91 = Data_Maybe.isNothing(Data_String_CodePoints.indexOf(" ")(str));
            if ($91) {
                return str;
            };
            return "(" + (str + ")");
        };
        return "mkPerms " + Data_String_Common.joinWith(" ")(Data_Functor.map(Data_Functor.functorArray)(f)([ v.u, v.g, v.o ]));
    }
};
module.exports = {
    mkPerm: mkPerm,
    none: none,
    read: read,
    write: write,
    execute: execute,
    all: all,
    mkPerms: mkPerms,
    permsFromString: permsFromString,
    permsToString: permsToString,
    permsToInt: permsToInt,
    eqPerm: eqPerm,
    ordPerm: ordPerm,
    showPerm: showPerm,
    semiringPerm: semiringPerm,
    eqPerms: eqPerms,
    ordPerms: ordPerms,
    showPerms: showPerms
};
