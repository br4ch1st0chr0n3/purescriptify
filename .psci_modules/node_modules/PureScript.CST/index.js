"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array_NonEmpty = require("../Data.Array.NonEmpty/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Lazy = require("../Data.Lazy/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var PureScript_CST_Lexer = require("../PureScript.CST.Lexer/index.js");
var PureScript_CST_Parser = require("../PureScript.CST.Parser/index.js");
var PureScript_CST_Parser_Monad = require("../PureScript.CST.Parser.Monad/index.js");
var PureScript_CST_Print = require("../PureScript.CST.Print/index.js");
var PureScript_CST_Range = require("../PureScript.CST.Range/index.js");
var PureScript_CST_Range_TokenList = require("../PureScript.CST.Range.TokenList/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var ParseSucceeded = (function () {
    function ParseSucceeded(value0) {
        this.value0 = value0;
    };
    ParseSucceeded.create = function (value0) {
        return new ParseSucceeded(value0);
    };
    return ParseSucceeded;
})();
var ParseSucceededWithErrors = (function () {
    function ParseSucceededWithErrors(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ParseSucceededWithErrors.create = function (value0) {
        return function (value1) {
            return new ParseSucceededWithErrors(value0, value1);
        };
    };
    return ParseSucceededWithErrors;
})();
var ParseFailed = (function () {
    function ParseFailed(value0) {
        this.value0 = value0;
    };
    ParseFailed.create = function (value0) {
        return new ParseFailed(value0);
    };
    return ParseFailed;
})();
var PartialModule = function (x) {
    return x;
};
var toRecoveredParserResult = function (v) {
    var v1 = function (v2) {
        if (v instanceof Data_Either.Right && Data_Boolean.otherwise) {
            return new ParseSucceeded(v.value0.value0);
        };
        if (v instanceof Data_Either.Left) {
            return new ParseFailed(v.value0);
        };
        throw new Error("Failed pattern match at PureScript.CST (line 41, column 1 - line 44, column 29): " + [ v.constructor.name ]);
    };
    if (v instanceof Data_Either.Right) {
        var $12 = Data_Array_NonEmpty.fromArray(v.value0.value1);
        if ($12 instanceof Data_Maybe.Just) {
            return new ParseSucceededWithErrors(v.value0.value0, $12.value0);
        };
        return v1(true);
    };
    return v1(true);
};
var toRecovered = Unsafe_Coerce.unsafeCoerce;
var runRecoveredParser = function (p) {
    var $22 = Data_Function.flip(PureScript_CST_Parser_Monad.runParser)(p);
    return function ($23) {
        return toRecoveredParserResult($22(PureScript_CST_Lexer.lex($23)));
    };
};
var printModule = function (dictTokensOf) {
    return function (mod) {
        return Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(PureScript_CST_Print.printSourceToken)(PureScript_CST_Range_TokenList.toArray(PureScript_CST_Range.tokensOf(PureScript_CST_Range.tokensOfModule(dictTokensOf))(mod))) + Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(PureScript_CST_Print.printComment(PureScript_CST_Print.printLineFeed))((Data_Newtype.unwrap()((Data_Newtype.unwrap()(mod)).body)).trailingComments);
    };
};
var parseType = runRecoveredParser(PureScript_CST_Parser.parseType);
var parsePartialModule = function (src) {
    return toRecoveredParserResult((function () {
        var v = PureScript_CST_Parser_Monad["runParser'"](PureScript_CST_Parser_Monad.initialParserState(PureScript_CST_Lexer.lex(src)))(PureScript_CST_Parser.parseModuleHeader);
        if (v instanceof PureScript_CST_Parser_Monad.ParseSucc) {
            var res = {
                header: v.value0,
                full: Data_Lazy.defer(function (v1) {
                    return toRecoveredParserResult(PureScript_CST_Parser_Monad.fromParserResult(PureScript_CST_Parser_Monad["runParser'"](v.value1)(Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser.parseModuleBody)(function (body) {
                        return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                            header: v.value0,
                            body: body
                        });
                    }))));
                })
            };
            return new Data_Either.Right(new Data_Tuple.Tuple(res, v.value1.errors));
        };
        if (v instanceof PureScript_CST_Parser_Monad.ParseFail) {
            return new Data_Either.Left(v.value0);
        };
        throw new Error("Failed pattern match at PureScript.CST (line 85, column 29 - line 97, column 17): " + [ v.constructor.name ]);
    })());
};
var parseModule = runRecoveredParser(PureScript_CST_Parser.parseModule);
var parseImportDecl = runRecoveredParser(PureScript_CST_Parser.parseImportDecl);
var parseExpr = runRecoveredParser(PureScript_CST_Parser.parseExpr);
var parseDecl = runRecoveredParser(PureScript_CST_Parser.parseDecl);
var parseBinder = runRecoveredParser(PureScript_CST_Parser.parseBinder);
module.exports = {
    ParseSucceeded: ParseSucceeded,
    ParseSucceededWithErrors: ParseSucceededWithErrors,
    ParseFailed: ParseFailed,
    PartialModule: PartialModule,
    parseModule: parseModule,
    parsePartialModule: parsePartialModule,
    parseImportDecl: parseImportDecl,
    parseDecl: parseDecl,
    parseExpr: parseExpr,
    parseType: parseType,
    parseBinder: parseBinder,
    printModule: printModule,
    toRecovered: toRecovered
};
