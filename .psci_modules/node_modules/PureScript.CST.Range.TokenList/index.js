"use strict";
var Data_Array = require("../Data.Array/index.js");
var Data_Array_ST = require("../Data.Array.ST/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var TokenEmpty = (function () {
    function TokenEmpty() {

    };
    TokenEmpty.value = new TokenEmpty();
    return TokenEmpty;
})();
var TokenCons = (function () {
    function TokenCons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    TokenCons.create = function (value0) {
        return function (value1) {
            return new TokenCons(value0, value1);
        };
    };
    return TokenCons;
})();
var TokenWrap = (function () {
    function TokenWrap(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    TokenWrap.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new TokenWrap(value0, value1, value2);
            };
        };
    };
    return TokenWrap;
})();
var TokenAppend = (function () {
    function TokenAppend(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    TokenAppend.create = function (value0) {
        return function (value1) {
            return new TokenAppend(value0, value1);
        };
    };
    return TokenAppend;
})();
var TokenDefer = (function () {
    function TokenDefer(value0) {
        this.value0 = value0;
    };
    TokenDefer.create = function (value0) {
        return new TokenDefer(value0);
    };
    return TokenDefer;
})();
var TokenArray = (function () {
    function TokenArray(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    TokenArray.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new TokenArray(value0, value1, value2);
            };
        };
    };
    return TokenArray;
})();
var UnconsDone = (function () {
    function UnconsDone() {

    };
    UnconsDone.value = new UnconsDone();
    return UnconsDone;
})();
var UnconsMore = (function () {
    function UnconsMore(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    UnconsMore.create = function (value0) {
        return function (value1) {
            return new UnconsMore(value0, value1);
        };
    };
    return UnconsMore;
})();
var wrap = TokenWrap.create;
var singleton = function (a) {
    return new TokenCons(a, TokenEmpty.value);
};
var semigroupTokenList = {
    append: function (v) {
        return function (v1) {
            if (v1 instanceof TokenEmpty) {
                return v;
            };
            if (v instanceof TokenEmpty) {
                return v1;
            };
            return new TokenAppend(v, v1);
        };
    }
};
var uncons2 = function ($copy_done) {
    return function ($copy_more) {
        return function ($copy_l) {
            return function ($copy_r) {
                var $tco_var_done = $copy_done;
                var $tco_var_more = $copy_more;
                var $tco_var_l = $copy_l;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(done, more, l, r) {
                    if (l instanceof TokenEmpty) {
                        $tco_done = true;
                        return uncons$prime(done)(more)(r);
                    };
                    if (l instanceof TokenCons) {
                        $tco_done = true;
                        return more(l.value0)(Data_Semigroup.append(semigroupTokenList)(l.value1)(r));
                    };
                    if (l instanceof TokenWrap) {
                        $tco_done = true;
                        return more(l.value0)(Data_Semigroup.append(semigroupTokenList)(l.value1)(new TokenCons(l.value2, r)));
                    };
                    if (l instanceof TokenAppend) {
                        $tco_var_done = done;
                        $tco_var_more = more;
                        $tco_var_l = l.value0;
                        $copy_r = Data_Semigroup.append(semigroupTokenList)(l.value1)(r);
                        return;
                    };
                    if (l instanceof TokenDefer) {
                        $tco_var_done = done;
                        $tco_var_more = more;
                        $tco_var_l = l.value0(Data_Unit.unit);
                        $copy_r = r;
                        return;
                    };
                    if (l instanceof TokenArray) {
                        var next = (function () {
                            if (l.value0 === l.value1) {
                                return r;
                            };
                            if (Data_Boolean.otherwise) {
                                return Data_Semigroup.append(semigroupTokenList)(new TokenArray(l.value0 + 1 | 0, l.value1, l.value2))(r);
                            };
                            throw new Error("Failed pattern match at PureScript.CST.Range.TokenList (line 102, column 7 - line 104, column 56): " + [  ]);
                        })();
                        $tco_done = true;
                        return more(l["value2"][l.value0])(next);
                    };
                    throw new Error("Failed pattern match at PureScript.CST.Range.TokenList (line 94, column 25 - line 105, column 52): " + [ l.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_done, $tco_var_more, $tco_var_l, $copy_r);
                };
                return $tco_result;
            };
        };
    };
};
var uncons$prime = function ($copy_done) {
    return function ($copy_more) {
        return function ($copy_v) {
            var $tco_var_done = $copy_done;
            var $tco_var_more = $copy_more;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(done, more, v) {
                if (v instanceof TokenEmpty) {
                    $tco_done = true;
                    return done;
                };
                if (v instanceof TokenCons) {
                    $tco_done = true;
                    return more(v.value0)(v.value1);
                };
                if (v instanceof TokenWrap) {
                    $tco_done = true;
                    return more(v.value0)(Data_Semigroup.append(semigroupTokenList)(v.value1)(singleton(v.value2)));
                };
                if (v instanceof TokenAppend) {
                    $tco_done = true;
                    return uncons2(done)(more)(v.value0)(v.value1);
                };
                if (v instanceof TokenDefer) {
                    $tco_var_done = done;
                    $tco_var_more = more;
                    $copy_v = v.value0(Data_Unit.unit);
                    return;
                };
                if (v instanceof TokenArray) {
                    var next = (function () {
                        if (v.value0 === v.value1) {
                            return TokenEmpty.value;
                        };
                        if (Data_Boolean.otherwise) {
                            return new TokenArray(v.value0 + 1 | 0, v.value1, v.value2);
                        };
                        throw new Error("Failed pattern match at PureScript.CST.Range.TokenList (line 88, column 7 - line 90, column 51): " + [  ]);
                    })();
                    $tco_done = true;
                    return more(v["value2"][v.value0])(next);
                };
                throw new Error("Failed pattern match at PureScript.CST.Range.TokenList (line 80, column 21 - line 91, column 52): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_done, $tco_var_more, $copy_v);
            };
            return $tco_result;
        };
    };
};
var toUnfoldable = function (dictUnfoldable) {
    return Data_Unfoldable.unfoldr(dictUnfoldable)(uncons$prime(Data_Maybe.Nothing.value)(function (a) {
        return function (b) {
            return new Data_Maybe.Just(new Data_Tuple.Tuple(a, b));
        };
    }));
};
var uncons = uncons$prime(UnconsDone.value)(UnconsMore.create);
var toArray = function (init) {
    return (function __do() {
        var arr = Data_Array_ST["new"]();
        var cur = init;
        var $$continue = true;
        (function () {
            while ($$continue) {
                (function __do() {
                    var tree = cur;
                    var v = uncons(tree);
                    if (v instanceof UnconsDone) {
                        $$continue = false;
                        return Data_Unit.unit;
                    };
                    if (v instanceof UnconsMore) {
                        cur = v.value1;
                        Data_Array_ST.push(v.value0)(arr)();
                        return Data_Unit.unit;
                    };
                    throw new Error("Failed pattern match at PureScript.CST.Range.TokenList (line 117, column 5 - line 124, column 18): " + [ v.constructor.name ]);
                })();
            };
            return {};
        })();
        return Data_Array_ST.unsafeFreeze(arr)();
    })();
};
var monoidTokenList = {
    mempty: TokenEmpty.value,
    Semigroup0: function () {
        return semigroupTokenList;
    }
};
var lazyTokenList = {
    defer: TokenDefer.create
};
var head = function ($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
        if (v instanceof TokenEmpty) {
            $tco_done = true;
            return Data_Maybe.Nothing.value;
        };
        if (v instanceof TokenCons) {
            $tco_done = true;
            return new Data_Maybe.Just(v.value0);
        };
        if (v instanceof TokenDefer) {
            $copy_v = v.value0(Data_Unit.unit);
            return;
        };
        if (v instanceof TokenWrap) {
            $tco_done = true;
            return new Data_Maybe.Just(v.value0);
        };
        if (v instanceof TokenAppend) {
            $copy_v = v.value0;
            return;
        };
        if (v instanceof TokenArray) {
            $tco_done = true;
            return new Data_Maybe.Just(v["value2"][v.value0]);
        };
        throw new Error("Failed pattern match at PureScript.CST.Range.TokenList (line 64, column 8 - line 70, column 67): " + [ v.constructor.name ]);
    };
    while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
    };
    return $tco_result;
};
var fromArray = function (arr) {
    var len = Data_Array.length(arr);
    var $47 = len === 0;
    if ($47) {
        return TokenEmpty.value;
    };
    return new TokenArray(0, len - 1 | 0, arr);
};
var cons = TokenCons.create;
module.exports = {
    singleton: singleton,
    cons: cons,
    wrap: wrap,
    head: head,
    UnconsDone: UnconsDone,
    UnconsMore: UnconsMore,
    uncons: uncons,
    "uncons'": uncons$prime,
    toUnfoldable: toUnfoldable,
    toArray: toArray,
    fromArray: fromArray,
    lazyTokenList: lazyTokenList,
    semigroupTokenList: semigroupTokenList,
    monoidTokenList: monoidTokenList
};
