"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var warn = function () {
    return {};
};

// | Log any PureScript value to the console for debugging purposes and then
// | return a value. This will log the value's underlying representation for
// | low-level debugging, so it may be desireable to `show` the value first.
// |
// | The return value is thunked so it is not evaluated until after the
// | message has been printed, to preserve a predictable console output.
// |
// | For example:
// | ``` purescript
// | doSomething = trace "Hello" \_ -> ... some value or computation ...
// | ```
var trace = function () {
    return function (a) {
        return function (k) {
            return $foreign["_trace"](a, k);
        };
    };
};

// | Log any PureScript value to the console and return the unit value of the
// | Monad `m`.
var traceM = function () {
    return function (dictMonad) {
        return function (s) {
            return Control_Bind.discard(Control_Bind.discardUnit)(dictMonad.Bind1())(Control_Applicative.pure(dictMonad.Applicative0())(Data_Unit.unit))(function () {
                return trace()(s)(function (v) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(Data_Unit.unit);
                });
            });
        };
    };
};

// | Logs any value and returns it, using a "tag" or key value to annotate the
// | traced value. Useful when debugging something in the middle of a
// | expression, as you can insert this into the expression without having to
// | break it up.
var spy = function () {
    return function (tag) {
        return function (a) {
            return $foreign["_spy"](tag, a);
        };
    };
};

// | Similar to `spy`, but allows a function to be passed in to alter the value
// | that will be printed. Useful in cases where the raw printed form of a value
// | is inconvenient to read - for example, when spying on a `Set`, passing
// | `Array.fromFoldable` here will print it in a more useful form.
var spyWith = function () {
    return function (msg) {
        return function (f) {
            return function (a) {
                return Data_Function["const"](a)(spy()(msg)(f(a)));
            };
        };
    };
};

// | Triggers any available debugging features in the current runtime - in a
// | web browser with the debug tools open, this acts like setting a breakpoint
// | in the script. If no debugging feature are available nothing will occur,
// | although the passed contination will still be evaluated.
// |
// | Generally this works best by passing in a block of code to debug as the
// | continuation argument, as stepping forward in the debugger will then drop
// | straight into the passed code block.
var $$debugger = function () {
    return function (f) {
        return $foreign["_debugger"](f);
    };
};
module.exports = {
    trace: trace,
    traceM: traceM,
    spy: spy,
    spyWith: spyWith,
    "debugger": $$debugger,
    warn: warn
};
