"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Function_Uncurried = require("../Data.Function.Uncurried/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Tuple_Nested = require("../Data.Tuple.Nested/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Uncurried = require("../Effect.Uncurried/index.js");
var React_Basic = require("../React.Basic/index.js");
var React_Basic_Hooks_Internal = require("../React.Basic.Hooks.Internal/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Unsafe_Reference = require("../Unsafe.Reference/index.js");
var UnsafeReference = function (x) {
    return x;
};
var Reducer = function (x) {
    return x;
};
var writeRef = Effect_Uncurried.runEffectFn2($foreign.writeRef_);
var useState = function (initialState) {
    return React_Basic_Hooks_Internal.unsafeHook(function () {
        return $foreign.useState_(Data_Function_Uncurried.mkFn2(Data_Tuple.Tuple.create), initialState);
    });
};
var useState$prime = function (initialState) {
    return Data_Functor.mapFlipped(React_Basic_Hooks_Internal.functorRender)(useState(initialState))(Data_Bifunctor.rmap(Data_Bifunctor.bifunctorTuple)(function (v) {
        return function ($16) {
            return v(Data_Function["const"]($16));
        };
    }));
};
var useRef = function (initialValue) {
    return React_Basic_Hooks_Internal.unsafeHook(function () {
        return $foreign.useRef_(initialValue);
    });
};

// | Use `mkReducer` to construct a reducer function.
var useReducer = function (initialState) {
    return function (v) {
        return React_Basic_Hooks_Internal.unsafeHook(function () {
            return $foreign.useReducer_(Data_Function_Uncurried.mkFn2(Data_Tuple.Tuple.create), v, initialState);
        });
    };
};

// | Lazily compute a value. The result is cached until the `deps` change.
var useMemo = function (dictEq) {
    return function (deps) {
        return function (computeA) {
            return React_Basic_Hooks_Internal.unsafeHook(function () {
                return $foreign.useMemo_(Data_Function_Uncurried.mkFn2(Data_Eq.eq(dictEq)), deps, computeA);
            });
        };
    };
};

// | Like `useLayoutEffect`, but the effect is only performed a single time per component
// | instance. Prefer `useLayoutEffect` with a proper dependency list whenever possible!
var useLayoutEffectOnce = function (effect) {
    return React_Basic_Hooks_Internal.unsafeHook(function () {
        return $foreign.useLayoutEffect_(function (v, v1) {
            return true;
        }, Data_Unit.unit, effect);
    });
};

// | Like `useLayoutEffect`, but the effect is performed on every render. Prefer `useLayoutEffect`
// | with a proper dependency list whenever possible!
var useLayoutEffectAlways = function (effect) {
    return React_Basic_Hooks_Internal.unsafeHook(function () {
        return $foreign.useLayoutEffectAlways_(effect);
    });
};

// | Like `useEffect`, but the effect is performed synchronously after the browser has
// | calculated layout. Useful for reading properties from the DOM that are not available
// | before layout, such as element sizes and positions. Prefer `useEffect` whenever
// | possible to avoid blocking browser painting.
var useLayoutEffect = function (dictEq) {
    return function (deps) {
        return function (effect) {
            return React_Basic_Hooks_Internal.unsafeHook(function () {
                return $foreign.useLayoutEffect_(Data_Function_Uncurried.mkFn2(Data_Eq.eq(dictEq)), deps, effect);
            });
        };
    };
};

// | Cache an instance of a value, replacing it when `eq` returns `false`.
// |
// | This is a low-level performance optimization tool. It can be useful
// | for optimizing a component's props for use with `memo`, where
// | JavaScript instance equality matters.
var useEqCache = function (dictEq) {
    return function (a) {
        return React_Basic_Hooks_Internal.unsafeHook(function () {
            return $foreign.useEqCache_(Data_Function_Uncurried.mkFn2(Data_Eq.eq(dictEq)), a);
        });
    };
};

// | Like `useEffect`, but the effect is only performed a single time per component
// | instance. Prefer `useEffect` with a proper dependency list whenever possible!
var useEffectOnce = function (effect) {
    return React_Basic_Hooks_Internal.unsafeHook(function () {
        return $foreign.useEffect_(function (v, v1) {
            return true;
        }, Data_Unit.unit, effect);
    });
};

// | Like `useEffect`, but the effect is performed on every render. Prefer `useEffect`
// | with a proper dependency list whenever possible!
var useEffectAlways = function (effect) {
    return React_Basic_Hooks_Internal.unsafeHook(function () {
        return $foreign.useEffectAlways_(effect);
    });
};

// | Runs the given effect when the component is mounted and any time the given
// | dependencies change. The effect should return its cleanup function. For
// | example, if the effect registers a global event listener, it should return
// | an Effect which removes the listener.
// |
// | ```purs
// | useEffect deps do
// |   timeoutId <- setTimeout 1000 (logShow deps)
// |   pure (clearTimeout timeoutId)
// | ```
// |
// | If no cleanup is needed, use `pure (pure unit)` or `pure mempty` to return
// | a no-op Effect
// |
// | ```purs
// | useEffect deps do
// |   logShow deps
// |   pure mempty
// | ```
var useEffect = function (dictEq) {
    return function (deps) {
        return function (effect) {
            return React_Basic_Hooks_Internal.unsafeHook(function () {
                return $foreign.useEffect_(Data_Function_Uncurried.mkFn2(Data_Eq.eq(dictEq)), deps, effect);
            });
        };
    };
};

// | Use this hook to display a label for custom hooks in React DevTools
var useDebugValue = function (debugValue) {
    return function (display) {
        return React_Basic_Hooks_Internal.unsafeHook(function () {
            return $foreign.useDebugValue_(debugValue, display);
        });
    };
};
var useContext = function (context) {
    return React_Basic_Hooks_Internal.unsafeHook(function () {
        return $foreign.useContext_(context);
    });
};
var unsafeReactFunctionComponent = Unsafe_Coerce.unsafeCoerce;
var unsafeDiscardRenderEffects = Unsafe_Coerce.unsafeCoerce;
var unsafeReactComponent = function () {
    return function () {
        return function (name) {
            return function (renderFn) {
                var c = unsafeReactFunctionComponent(function (props) {
                    return unsafeDiscardRenderEffects(renderFn(props))();
                });
                return function () {
                    return $foreign.unsafeSetDisplayName(name, c);
                };
            };
        };
    };
};

// | Run a wrapped `Reducer` function as a normal function (like `runFn2`).
// | Useful for testing, simulating actions, or building more complicated
// | hooks on top of `useReducer`
var runReducer = function (v) {
    return Data_Function_Uncurried.runFn2(v);
};
var readRef = Effect_Uncurried.runEffectFn1($foreign.readRef_);
var readRefMaybe = function (a) {
    return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)(readRef(a));
};

// | Create a React component given a display name and render function.
// | This is the same as `component` but allows the use of the `children`
// | prop.
var reactComponentWithChildren = unsafeReactComponent;

// | Create a React component given a display name and render function.
// | Creating components is effectful because React uses the function
// | instance as the component's "identity" or "type". Components should
// | be created during a bootstrap phase and not within component
// | lifecycles or render functions. See `componentWithChildren` if
// | you need to use the `children` prop.
var reactComponent = function () {
    return unsafeReactComponent;
};

// | Convert a hook to a render-prop component. The value returned from the
// | hook will be passed to the `render` prop, a function from that value
// | to `JSX`.
// |
// | This function is useful for consuming a hook within a non-hook component.
var reactComponentFromHook = function () {
    return function () {
        return function () {
            return function (name) {
                return function (propsToHook) {
                    return reactComponent()()()(name)(function (props) {
                        return Data_Functor.map(React_Basic_Hooks_Internal.functorRender)(props.render)(propsToHook(props));
                    });
                };
            };
        };
    };
};
var reactChildrenFromArray = Unsafe_Coerce.unsafeCoerce;
var newtypeUnsafeReference = {
    Coercible0: function () {
        return undefined;
    }
};

// | Creating reducer functions for React is effectful because
// | React uses the function instance's reference to optimize
// | rendering behavior.
var mkReducer = (function () {
    var $17 = Control_Applicative.pure(Effect.applicativeEffect);
    return function ($18) {
        return $17(Reducer(Data_Function_Uncurried.mkFn2($18)));
    };
})();

// | Prevents a component from re-rendering if its new props are referentially
// | equal to its old props (not value-based equality -- this is due to the
// | underlying React implementation).
var memo = Data_Function.flip(Control_Bind.bind(Effect.bindEffect))(Effect_Uncurried.runEffectFn1($foreign.memo_));
var eqUnsafeReference = {
    eq: Unsafe_Reference.unsafeRefEq
};

// | Create a component function given a display name and render function.
// | Creating components is effectful because React uses the function
// | instance as the component's "identity" or "type". Components should
// | be created during a bootstrap phase and not within component
// | lifecycles or render functions.
var component = function (name) {
    return function (renderFn) {
        return function __do() {
            var c = reactComponent()()()(name)(function ($19) {
                return renderFn((function (v) {
                    return v.nested;
                })($19));
            })();
            var $20 = React_Basic.element(c);
            return function ($21) {
                return $20((function (v) {
                    return {
                        nested: v
                    };
                })($21));
            };
        };
    };
};
module.exports = {
    component: component,
    reactComponent: reactComponent,
    reactComponentWithChildren: reactComponentWithChildren,
    reactComponentFromHook: reactComponentFromHook,
    reactChildrenFromArray: reactChildrenFromArray,
    memo: memo,
    useState: useState,
    "useState'": useState$prime,
    useEffect: useEffect,
    useEffectOnce: useEffectOnce,
    useEffectAlways: useEffectAlways,
    useLayoutEffect: useLayoutEffect,
    useLayoutEffectOnce: useLayoutEffectOnce,
    useLayoutEffectAlways: useLayoutEffectAlways,
    mkReducer: mkReducer,
    runReducer: runReducer,
    useReducer: useReducer,
    readRef: readRef,
    readRefMaybe: readRefMaybe,
    writeRef: writeRef,
    useRef: useRef,
    useContext: useContext,
    useEqCache: useEqCache,
    useMemo: useMemo,
    useDebugValue: useDebugValue,
    UnsafeReference: UnsafeReference,
    newtypeUnsafeReference: newtypeUnsafeReference,
    eqUnsafeReference: eqUnsafeReference,
    reactChildrenToArray: $foreign.reactChildrenToArray,
    displayName: $foreign.displayName,
    consumer: React_Basic.consumer,
    contextConsumer: React_Basic.contextConsumer,
    contextProvider: React_Basic.contextProvider,
    createContext: React_Basic.createContext,
    element: React_Basic.element,
    elementKeyed: React_Basic.elementKeyed,
    empty: React_Basic.empty,
    fragment: React_Basic.fragment,
    keyed: React_Basic.keyed,
    provider: React_Basic.provider,
    bind: React_Basic_Hooks_Internal.bind,
    coerceHook: React_Basic_Hooks_Internal.coerceHook,
    discard: React_Basic_Hooks_Internal.discard,
    unsafeHook: React_Basic_Hooks_Internal.unsafeHook,
    unsafeRenderEffect: React_Basic_Hooks_Internal.unsafeRenderEffect
};
