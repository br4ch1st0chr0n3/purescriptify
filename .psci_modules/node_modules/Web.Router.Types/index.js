"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Free_Trans = require("../Control.Monad.Free.Trans/index.js");
var Control_Monad_Indexed = require("../Control.Monad.Indexed/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Transitioning = (function () {
    function Transitioning(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Transitioning.create = function (value0) {
        return function (value1) {
            return new Transitioning(value0, value1);
        };
    };
    return Transitioning;
})();
var Resolved = (function () {
    function Resolved(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Resolved.create = function (value0) {
        return function (value1) {
            return new Resolved(value0, value1);
        };
    };
    return Resolved;
})();
var Driver = function (x) {
    return x;
};
var Override = (function () {
    function Override(value0) {
        this.value0 = value0;
    };
    Override.create = function (value0) {
        return new Override(value0);
    };
    return Override;
})();
var Redirect = (function () {
    function Redirect(value0) {
        this.value0 = value0;
    };
    Redirect.create = function (value0) {
        return new Redirect(value0);
    };
    return Redirect;
})();
var Continue = (function () {
    function Continue() {

    };
    Continue.value = new Continue();
    return Continue;
})();
var Transition = function (x) {
    return x;
};
var newtypeTransition = {
    Coercible0: function () {
        return undefined;
    }
};
var functorCommand = {
    map: function (f) {
        return function (m) {
            if (m instanceof Override) {
                return new Override(m.value0);
            };
            if (m instanceof Redirect) {
                return new Redirect(m.value0);
            };
            if (m instanceof Continue) {
                return Continue.value;
            };
            throw new Error("Failed pattern match at Web.Router.Types (line 43, column 1 - line 43, column 56): " + [ m.constructor.name ]);
        };
    }
};
var functorTransition = function (dictTypeEquals) {
    return function (dictTypeEquals1) {
        return {
            map: function (f) {
                return function (v) {
                    return Data_Functor.map(Control_Monad_Free_Trans.functorFreeT(functorCommand)(Effect_Aff.functorAff))(f)(v);
                };
            }
        };
    };
};
var ixFunctorTransition = {
    imap: function (f) {
        return function (v) {
            return Data_Functor.map(Control_Monad_Free_Trans.functorFreeT(functorCommand)(Effect_Aff.functorAff))(f)(v);
        };
    }
};
var ixMonadTransition = {
    IxApplicative0: function () {
        return ixApplicativeTransition;
    },
    IxBind1: function () {
        return ixBindTransition;
    }
};
var ixBindTransition = {
    ibind: function (v) {
        return function (f) {
            return Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(functorCommand)(Effect_Aff.monadAff))(v)(function (a) {
                var v1 = f(a);
                return v1;
            });
        };
    },
    IxApply0: function () {
        return ixApplyTransition;
    }
};
var ixApplyTransition = {
    iapply: Control_Monad_Indexed.iap(ixMonadTransition),
    IxFunctor0: function () {
        return ixFunctorTransition;
    }
};
var ixApplicativeTransition = {
    ipure: function (a) {
        return Control_Applicative.pure(Control_Monad_Free_Trans.applicativeFreeT(functorCommand)(Effect_Aff.monadAff))(a);
    },
    IxApply0: function () {
        return ixApplyTransition;
    }
};
var eqRoute = function (dictEq) {
    return {
        eq: function (x) {
            return function (y) {
                if (x instanceof Transitioning && y instanceof Transitioning) {
                    return Data_Eq.eq(Data_Maybe.eqMaybe(dictEq))(x.value0)(y.value0) && Data_Eq.eq(dictEq)(x.value1)(y.value1);
                };
                if (x instanceof Resolved && y instanceof Resolved) {
                    return Data_Eq.eq(Data_Maybe.eqMaybe(dictEq))(x.value0)(y.value0) && Data_Eq.eq(dictEq)(x.value1)(y.value1);
                };
                return false;
            };
        }
    };
};
var monadTransition = function (dictTypeEquals) {
    return function (dictTypeEquals1) {
        return {
            Applicative0: function () {
                return applicativeTransition(dictTypeEquals)(dictTypeEquals1);
            },
            Bind1: function () {
                return bindTransition(dictTypeEquals)(dictTypeEquals1);
            }
        };
    };
};
var bindTransition = function (dictTypeEquals) {
    return function (dictTypeEquals1) {
        return {
            bind: function (v) {
                return function (f) {
                    return Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(functorCommand)(Effect_Aff.monadAff))(v)(function (a) {
                        var v1 = f(a);
                        return v1;
                    });
                };
            },
            Apply0: function () {
                return applyTransition(dictTypeEquals)(dictTypeEquals1);
            }
        };
    };
};
var applyTransition = function (dictTypeEquals) {
    return function (dictTypeEquals1) {
        return {
            apply: Control_Monad.ap(monadTransition(dictTypeEquals)(dictTypeEquals1)),
            Functor0: function () {
                return functorTransition(dictTypeEquals)(dictTypeEquals1);
            }
        };
    };
};
var applicativeTransition = function (dictTypeEquals) {
    return function (dictTypeEquals1) {
        return {
            pure: function (a) {
                return Control_Applicative.pure(Control_Monad_Free_Trans.applicativeFreeT(functorCommand)(Effect_Aff.monadAff))(a);
            },
            Apply0: function () {
                return applyTransition(dictTypeEquals)(dictTypeEquals1);
            }
        };
    };
};
var monadEffectTransition = function (dictTypeEquals) {
    return function (dictTypeEquals1) {
        return {
            liftEffect: function (eff) {
                return Effect_Class.liftEffect(Control_Monad_Free_Trans.monadEffectFreeT(functorCommand)(Effect_Aff.monadEffectAff))(eff);
            },
            Monad0: function () {
                return monadTransition(dictTypeEquals)(dictTypeEquals1);
            }
        };
    };
};
var monadAffTransition = function (dictTypeEquals) {
    return function (dictTypeEquals1) {
        return {
            liftAff: function (aff) {
                return Effect_Aff_Class.liftAff(Control_Monad_Free_Trans.monadAffFreeT(functorCommand)(Effect_Aff_Class.monadAffAff))(aff);
            },
            MonadEffect0: function () {
                return monadEffectTransition(dictTypeEquals)(dictTypeEquals1);
            }
        };
    };
};
module.exports = {
    Driver: Driver,
    Transitioning: Transitioning,
    Resolved: Resolved,
    Override: Override,
    Redirect: Redirect,
    Continue: Continue,
    Transition: Transition,
    eqRoute: eqRoute,
    functorCommand: functorCommand,
    newtypeTransition: newtypeTransition,
    ixFunctorTransition: ixFunctorTransition,
    ixApplyTransition: ixApplyTransition,
    ixApplicativeTransition: ixApplicativeTransition,
    ixBindTransition: ixBindTransition,
    ixMonadTransition: ixMonadTransition,
    functorTransition: functorTransition,
    applyTransition: applyTransition,
    applicativeTransition: applicativeTransition,
    bindTransition: bindTransition,
    monadTransition: monadTransition,
    monadEffectTransition: monadEffectTransition,
    monadAffTransition: monadAffTransition
};
