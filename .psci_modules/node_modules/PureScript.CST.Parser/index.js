"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Array_NonEmpty = require("../Data.Array.NonEmpty/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Set = require("../Data.Set/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var PureScript_CST_Errors = require("../PureScript.CST.Errors/index.js");
var PureScript_CST_Layout = require("../PureScript.CST.Layout/index.js");
var PureScript_CST_Parser_Monad = require("../PureScript.CST.Parser.Monad/index.js");
var PureScript_CST_TokenStream = require("../PureScript.CST.TokenStream/index.js");
var PureScript_CST_Types = require("../PureScript.CST.Types/index.js");
var wrapped = function (openTok) {
    return function (closeTok) {
        return function (valueParser) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(openTok)(function (open) {
                return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(valueParser)(function (value) {
                    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(closeTok)(function (close) {
                        return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                            open: open,
                            value: value,
                            close: close
                        });
                    });
                });
            });
        };
    };
};
var separated = function (sepParser) {
    return function (valueParser) {
        return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function (v) {
            return function (v1) {
                return {
                    head: v,
                    tail: v1
                };
            };
        })(valueParser))(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(sepParser))(valueParser)));
    };
};
var reservedKeywords = Data_Set.fromFoldable(Data_Foldable.foldableArray)(Data_Ord.ordString)([ "ado", "case", "class", "data", "derive", "do", "else", "false", "foreign", "if", "import", "in", "infix", "infixl", "infixr", "instance", "let", "module", "newtype", "of", "then", "true", "type", "where" ]);
var recoverTokensWhile = function (p) {
    return function (initStream) {
        var indent = Data_Maybe.maybe(0)(function (v) {
            return v.column;
        })(PureScript_CST_Layout.currentIndent(PureScript_CST_TokenStream.layoutStack(initStream)));
        var go = function ($copy_acc) {
            return function ($copy_stream) {
                var $tco_var_acc = $copy_acc;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(acc, stream) {
                    var v = PureScript_CST_TokenStream.step(stream);
                    if (v instanceof PureScript_CST_TokenStream.TokenError) {
                        $tco_done = true;
                        return new Data_Tuple.Tuple(acc, stream);
                    };
                    if (v instanceof PureScript_CST_TokenStream.TokenEOF) {
                        $tco_done = true;
                        return new Data_Tuple.Tuple(acc, stream);
                    };
                    if (v instanceof PureScript_CST_TokenStream.TokenCons) {
                        var $115 = p(v.value0)(indent);
                        if ($115) {
                            $tco_var_acc = Data_Array.snoc(acc)(v.value0);
                            $copy_stream = v.value2;
                            return;
                        };
                        $tco_done = true;
                        return new Data_Tuple.Tuple(acc, stream);
                    };
                    throw new Error("Failed pattern match at PureScript.CST.Parser (line 1170, column 19 - line 1179, column 25): " + [ v.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_acc, $copy_stream);
                };
                return $tco_result;
            };
        };
        return go([  ])(initStream);
    };
};
var recoverIndent = function (mkNode) {
    return PureScript_CST_Parser_Monad.recover(function (v) {
        return function (stream) {
            var v1 = recoverTokensWhile(function (tok) {
                return function (indent) {
                    if (tok.value instanceof PureScript_CST_Types.TokLayoutEnd) {
                        return tok.value.value0 > indent;
                    };
                    if (tok.value instanceof PureScript_CST_Types.TokLayoutSep) {
                        return tok.value.value0 > indent;
                    };
                    return true;
                };
            })(stream);
            var $125 = Data_Array["null"](v1.value0);
            if ($125) {
                return Data_Maybe.Nothing.value;
            };
            return new Data_Maybe.Just(new Data_Tuple.Tuple(mkNode({
                position: v.position,
                error: v.error,
                tokens: v1.value0
            }), v1.value1));
        };
    });
};
var recoverLetBinding = recoverIndent(PureScript_CST_Types.LetBindingError.create);
var recoverDoStatement = recoverIndent(PureScript_CST_Types.DoError.create);
var recoverDecl = recoverIndent(PureScript_CST_Types.DeclError.create);
var parseSmallInt = PureScript_CST_Parser_Monad.take(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokInt && v.value.value1 instanceof PureScript_CST_Types.SmallInt) {
        return new Data_Either.Right(new Data_Tuple.Tuple(v, v.value.value1.value0));
    };
    if (v.value instanceof PureScript_CST_Types.TokInt) {
        return new Data_Either.Left(new PureScript_CST_Errors.LexIntOutOfRange(v.value.value0));
    };
    return new Data_Either.Left(new PureScript_CST_Errors.UnexpectedToken(v.value));
});
var many1 = function (parser) {
    return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Array_NonEmpty["cons'"])(parser))(PureScript_CST_Parser_Monad.many(parser));
};
var expectMap = function (k) {
    return PureScript_CST_Parser_Monad.take(function (tok) {
        var v = k(tok);
        if (v instanceof Data_Maybe.Just) {
            return new Data_Either.Right(v.value0);
        };
        if (v instanceof Data_Maybe.Nothing) {
            return new Data_Either.Left(new PureScript_CST_Errors.UnexpectedToken(tok.value));
        };
        throw new Error("Failed pattern match at PureScript.CST.Parser (line 46, column 3 - line 50, column 39): " + [ v.constructor.name ]);
    });
};
var parseBoolean = expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "true")) {
        return new Data_Maybe.Just(new Data_Tuple.Tuple(v, true));
    };
    if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "false")) {
        return new Data_Maybe.Just(new Data_Tuple.Tuple(v, false));
    };
    return Data_Maybe.Nothing.value;
});
var parseChar = expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokChar) {
        return new Data_Maybe.Just(new Data_Tuple.Tuple(v, v.value.value1));
    };
    return Data_Maybe.Nothing.value;
});
var parseHole = expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokHole) {
        return new Data_Maybe.Just({
            token: v,
            name: v.value.value0
        });
    };
    return Data_Maybe.Nothing.value;
});
var parseIdent = expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && !Data_Set.member(Data_Ord.ordString)(v.value.value1)(reservedKeywords))) {
        return new Data_Maybe.Just({
            token: v,
            name: v.value.value1
        });
    };
    return Data_Maybe.Nothing.value;
});
var $$parseInt = expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokInt) {
        return new Data_Maybe.Just(new Data_Tuple.Tuple(v, v.value.value1));
    };
    return Data_Maybe.Nothing.value;
});
var parseLabel = expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokString) {
        return new Data_Maybe.Just({
            token: v,
            name: v.value.value1
        });
    };
    if (v.value instanceof PureScript_CST_Types.TokLowerName && v.value.value0 instanceof Data_Maybe.Nothing) {
        return new Data_Maybe.Just({
            token: v,
            name: v.value.value1
        });
    };
    return Data_Maybe.Nothing.value;
});
var parseModuleName = expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokUpperName && v.value.value0 instanceof Data_Maybe.Just) {
        return new Data_Maybe.Just({
            token: v,
            name: v.value.value0.value0 + ("." + v.value.value1)
        });
    };
    if (v.value instanceof PureScript_CST_Types.TokUpperName && v.value.value0 instanceof Data_Maybe.Nothing) {
        return new Data_Maybe.Just({
            token: v,
            name: v.value.value1
        });
    };
    return Data_Maybe.Nothing.value;
});
var parseNumber = expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokNumber) {
        return new Data_Maybe.Just(new Data_Tuple.Tuple(v, v.value.value1));
    };
    return Data_Maybe.Nothing.value;
});
var parseOperator = expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokOperator && v.value.value0 instanceof Data_Maybe.Nothing) {
        return new Data_Maybe.Just({
            token: v,
            name: v.value.value1
        });
    };
    return Data_Maybe.Nothing.value;
});
var parseProper = expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokUpperName && v.value.value0 instanceof Data_Maybe.Nothing) {
        return new Data_Maybe.Just({
            token: v,
            name: v.value.value1
        });
    };
    return Data_Maybe.Nothing.value;
});
var parseQualifiedIdent = expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokLowerName && !Data_Set.member(Data_Ord.ordString)(v.value.value1)(reservedKeywords)) {
        return new Data_Maybe.Just({
            token: v,
            module: v.value.value0,
            name: v.value.value1
        });
    };
    return Data_Maybe.Nothing.value;
});
var parseQualifiedIdentOrProper = expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokLowerName) {
        return new Data_Maybe.Just({
            token: v,
            module: v.value.value0,
            name: new Data_Either.Left(v.value.value1)
        });
    };
    if (v.value instanceof PureScript_CST_Types.TokUpperName) {
        return new Data_Maybe.Just({
            token: v,
            module: v.value.value0,
            name: new Data_Either.Right(v.value.value1)
        });
    };
    return Data_Maybe.Nothing.value;
});
var parseQualifiedOperator = expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokOperator) {
        return new Data_Maybe.Just({
            token: v,
            module: v.value.value0,
            name: v.value.value1
        });
    };
    return Data_Maybe.Nothing.value;
});
var parseQualifiedProper = expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokUpperName) {
        return new Data_Maybe.Just({
            token: v,
            module: v.value.value0,
            name: v.value.value1
        });
    };
    return Data_Maybe.Nothing.value;
});
var parseQualifiedSymbol = expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokSymbolName) {
        return new Data_Maybe.Just({
            token: v,
            module: v.value.value0,
            name: v.value.value1
        });
    };
    return Data_Maybe.Nothing.value;
});
var parseString = expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokString) {
        return new Data_Maybe.Just(new Data_Tuple.Tuple(v, v.value.value1));
    };
    if (v.value instanceof PureScript_CST_Types.TokRawString) {
        return new Data_Maybe.Just(new Data_Tuple.Tuple(v, v.value.value0));
    };
    return Data_Maybe.Nothing.value;
});
var parseSymbol = expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokSymbolName && v.value.value0 instanceof Data_Maybe.Nothing) {
        return new Data_Maybe.Just({
            token: v,
            name: v.value.value1
        });
    };
    return Data_Maybe.Nothing.value;
});
var expect = function (pred) {
    return expectMap(function (tok) {
        var $222 = pred(tok.value);
        if ($222) {
            return new Data_Maybe.Just(tok);
        };
        return Data_Maybe.Nothing.value;
    });
};
var tokAt = expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokAt) {
        return true;
    };
    return false;
});
var tokBackslash = expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokBackslash) {
        return true;
    };
    return false;
});
var tokComma = expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokComma) {
        return true;
    };
    return false;
});
var tokDot = expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokDot) {
        return true;
    };
    return false;
});
var parseRecordAccessor = function (expr) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDot)(function (dot) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(separated(tokDot)(parseLabel))(function (path) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprRecordAccessor({
                expr: expr,
                dot: dot,
                path: path
            }));
        });
    });
};
var tokDoubleColon = expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokDoubleColon) {
        return true;
    };
    return false;
});
var parseInstanceName = Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseIdent))(tokDoubleColon);
var tokEquals = expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokEquals) {
        return true;
    };
    return false;
});
var tokForall = expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokForall) {
        return true;
    };
    return false;
});
var tokKeyOperator = function (sym) {
    return expect(function (v) {
        if (v instanceof PureScript_CST_Types.TokOperator && v.value0 instanceof Data_Maybe.Nothing) {
            return sym === v.value1;
        };
        return false;
    });
};
var parseBinderNegative = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyOperator("-"))(function (negative) {
    return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderInt.create(new Data_Maybe.Just(negative))))($$parseInt))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderNumber.create(new Data_Maybe.Just(negative))))(parseNumber));
});
var parseRecordLabeled = function (valueParser) {
    var parseRecordField = Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.RecordField.create))(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseLabel))(tokKeyOperator(":")))))(valueParser);
    return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRecordField)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.RecordPun.create)(parseIdent));
};
var tokKeySymbol = function (sym) {
    return expect(function (v) {
        if (v instanceof PureScript_CST_Types.TokSymbolName && v.value0 instanceof Data_Maybe.Nothing) {
            return sym === v.value1;
        };
        return false;
    });
};
var tokKeyword = function (kw) {
    return expect(function (v) {
        if (v instanceof PureScript_CST_Types.TokLowerName && v.value0 instanceof Data_Maybe.Nothing) {
            return kw === v.value1;
        };
        return false;
    });
};
var parseFixityKeyword = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Infix.value))(tokKeyword("infix")))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Infixl.value))(tokKeyword("infixl")))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Infixr.value))(tokKeyword("infixr"))));
var parseFixityOp = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.FixityType.create)(tokKeyword("type")))(parseQualifiedProper))(tokKeyword("as")))(parseOperator))(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.FixityValue.create)(parseQualifiedIdentOrProper))(tokKeyword("as")))(parseOperator));
var parseDeclFixity = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseFixityKeyword)(function (keyword) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseSmallInt)(function (prec) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseFixityOp)(function (operator) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclFixity({
                keyword: keyword,
                prec: prec,
                operator: operator
            }));
        });
    });
});
var parseForeignKind = PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ForeignKind.create)(tokKeyword("kind")))(parseProper));
var parseRole = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Representational.value))(tokKeyword("representational")))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Nominal.value))(tokKeyword("nominal")))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Phantom.value))(tokKeyword("phantom"))));
var parseDeclRole = function (keyword1) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("role"))(function (keyword2) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function (name) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(many1(parseRole))(function (roles) {
                return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclRole(keyword1, keyword2, name, roles));
            });
        });
    });
};
var tokLayoutEnd = expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokLayoutEnd) {
        return true;
    };
    return false;
});
var tokLayoutSep = expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokLayoutSep) {
        return true;
    };
    return false;
});
var parseInstanceChainSeparator = Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(tokKeyword("else"))(PureScript_CST_Parser_Monad.optional(tokLayoutSep));
var tokLayoutStart = expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokLayoutStart) {
        return true;
    };
    return false;
});
var layout = function (valueParser) {
    var tail = PureScript_CST_Parser_Monad.many(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutSep)(valueParser));
    var go = function (head) {
        return Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Array.cons(head))(tail);
    };
    var values = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Bind.bindFlipped(PureScript_CST_Parser_Monad.bindParser)(go)(valueParser))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)([  ]));
    return Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutStart)(values))(tokLayoutEnd);
};
var layoutNonEmpty = function (valueParser) {
    return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function (v) {
        return function (v1) {
            return Data_Array_NonEmpty["cons'"](v)(v1);
        };
    })(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutStart)(valueParser)))(Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(PureScript_CST_Parser_Monad.many(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutSep)(valueParser)))(tokLayoutEnd));
};
var tokLeftArrow = expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokLeftArrow) {
        return true;
    };
    return false;
});
var tokLeftBrace = expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokLeftBrace) {
        return true;
    };
    return false;
});
var tokLeftFatArrow = expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokOperator && v.value0 instanceof Data_Maybe.Nothing) {
        return v.value1 === "<=" || v.value1 === "\u21d0";
    };
    return false;
});
var tokLeftParen = expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokLeftParen) {
        return true;
    };
    return false;
});
var tokLeftSquare = expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokLeftSquare) {
        return true;
    };
    return false;
});
var tokPipe = expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokPipe) {
        return true;
    };
    return false;
});
var tokQualifiedKeyword = function (kw) {
    return expect(function (v) {
        if (v instanceof PureScript_CST_Types.TokLowerName) {
            return kw === v.value1;
        };
        return false;
    });
};
var tokRightArrow = expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokRightArrow) {
        return true;
    };
    return false;
});
var parseFundep = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.FundepDetermined.create)(tokRightArrow))(many1(parseIdent)))(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.FundepDetermines.create)(many1(parseIdent)))(tokRightArrow))(many1(parseIdent)));
var tokRightBrace = expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokRightBrace) {
        return true;
    };
    return false;
});
var tokRightFatArrow = expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokRightFatArrow) {
        return true;
    };
    return false;
});
var tokRightParen = expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokRightParen) {
        return true;
    };
    return false;
});
var parens = wrapped(tokLeftParen)(tokRightParen);
var parseEmptyRow = function (open) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightParen)(function (close) {
        return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.TypeRow({
            open: open,
            value: {
                labels: Data_Maybe.Nothing.value,
                tail: Data_Maybe.Nothing.value
            },
            close: close
        }));
    });
};
var tokRightSquare = expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokRightSquare) {
        return true;
    };
    return false;
});
var tokSymbolArrow = expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokSymbolArrow) {
        return true;
    };
    return false;
});
var tokTick = expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokTick) {
        return true;
    };
    return false;
});
var tokUnderscore = expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokUnderscore) {
        return true;
    };
    return false;
});
var delimited = function (openTok) {
    return function (closeTok) {
        return function (sepTok) {
            return function (valueParser) {
                var parseNonEmpty = function (open) {
                    return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function (v) {
                        return function (v1) {
                            return {
                                open: open,
                                value: new Data_Maybe.Just(v),
                                close: v1
                            };
                        };
                    })(separated(sepTok)(valueParser)))(closeTok);
                };
                var parseEmpty = function (open) {
                    return Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function (v) {
                        return {
                            open: open,
                            value: Data_Maybe.Nothing.value,
                            close: v
                        };
                    })(closeTok);
                };
                return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(openTok)(function (open) {
                    return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseEmpty(open))(parseNonEmpty(open));
                });
            };
        };
    };
};
var parseDataMembers = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.DataAll.create)(tokKeySymbol("..")))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.DataEnumerated.create)(delimited(tokLeftParen)(tokRightParen)(tokComma)(parseProper)));
var parseExport = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportTypeOp.create)(tokKeyword("type")))(parseSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportClass.create)(tokKeyword("class")))(parseProper))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportModule.create)(tokKeyword("module")))(parseModuleName))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportKind.create)(tokKeyword("kind")))(parseProper)))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportOp.create)(parseSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportValue.create)(parseIdent))(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportType.create)(parseProper))(PureScript_CST_Parser_Monad.optional(parseDataMembers))))))));
var parseImport = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportOp.create)(parseSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportType.create)(parseProper))(PureScript_CST_Parser_Monad.optional(parseDataMembers)))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportTypeOp.create)(tokKeyword("type")))(parseSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportClass.create)(tokKeyword("class")))(parseProper))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportKind.create)(tokKeyword("kind")))(parseProper))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportValue.create)(parseIdent))))));
var parseImportDecl = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("import"))(function (keyword) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseModuleName)(function (module_) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(PureScript_CST_Parser_Monad.optional(tokKeyword("hiding"))))(parens(separated(tokComma)(parseImport)))))(function (names) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokKeyword("as")))(parseModuleName)))(function (qualified) {
                return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                    keyword: keyword,
                    module: module_,
                    names: names,
                    qualified: qualified
                });
            });
        });
    });
});
var parseModuleImportDecls = PureScript_CST_Parser_Monad.many(Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(parseImportDecl)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(tokLayoutSep)(PureScript_CST_Parser_Monad.lookAhead(tokLayoutEnd))));
var parseModuleHeader = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("module"))(function (keyword) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseModuleName)(function (name) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(parens(separated(tokComma)(parseExport))))(function (exports) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("where"))(function (where_) {
                return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutStart)(parseModuleImportDecls))(function (imports) {
                    return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                        keyword: keyword,
                        name: name,
                        exports: exports,
                        where: where_,
                        imports: imports
                    });
                });
            });
        });
    });
});
var braces = wrapped(tokLeftBrace)(tokRightBrace);
var parseTypeVarKinded = Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeVarKinded.create)(parens(Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (label) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                label: label,
                separator: separator,
                value: value
            });
        });
    });
})));
var parseTypeVarBinding = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseTypeVarKinded)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeVarName.create)(parseIdent));
});
var parseTypeParens = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokLeftParen)(function (open) {
    return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRowParen(open))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRowTailParen(open))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseKindedVar(open))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseTypeParen(open))(parseEmptyRow(open)))));
});
var parseTypeParen = function (open) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightParen)(function (close) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.TypeParens({
                open: open,
                value: value,
                close: close
            }));
        });
    });
};
var parseTypeAtom = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeVar.create)(parseIdent))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeConstructor.create)(parseQualifiedProper))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.TypeString.create))(parseString))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseTypeParens)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeRecord.create)(braces(parseRow)))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeOpName.create)(parseQualifiedSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeHole.create)(parseHole))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeWildcard.create)(tokUnderscore))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeArrowName.create)(tokSymbolArrow)))))))));
});
var parseType5 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseTypeAtom)(function (ty) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeAtom))(function (args) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)((function () {
                var v1 = Data_Array_NonEmpty.fromArray(args);
                if (v1 instanceof Data_Maybe.Nothing) {
                    return ty;
                };
                if (v1 instanceof Data_Maybe.Just) {
                    return new PureScript_CST_Types.TypeApp(ty, v1.value0);
                };
                throw new Error("Failed pattern match at PureScript.CST.Parser (line 436, column 8 - line 438, column 29): " + [ v1.constructor.name ]);
            })());
        });
    });
});
var parseType4 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeUnaryRow.create)(tokKeyOperator("#")))(parseType4))(parseType5);
});
var parseType3 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType4)(function (ty) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseQualifiedOperator))(parseType4)))(function (ops) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)((function () {
                var v1 = Data_Array_NonEmpty.fromArray(ops);
                if (v1 instanceof Data_Maybe.Nothing) {
                    return ty;
                };
                if (v1 instanceof Data_Maybe.Just) {
                    return new PureScript_CST_Types.TypeOp(ty, v1.value0);
                };
                throw new Error("Failed pattern match at PureScript.CST.Parser (line 423, column 8 - line 425, column 28): " + [ v1.constructor.name ]);
            })());
        });
    });
});
var parseType2 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType3)(function (ty) {
        return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeArrow.create(ty))(tokRightArrow))(parseType1))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeConstrained.create(ty))(tokRightFatArrow))(parseType1))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(ty)));
    });
});
var parseType1 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseForall)(parseType2);
});
var parseType = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType1)(function (ty) {
        return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeKinded.create(ty))(tokDoubleColon))(parseType))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(ty));
    });
});
var parseRowTailParen = function (open) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokPipe))(parseType))(function (tail) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightParen)(function (close) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.TypeRow({
                open: open,
                value: {
                    labels: Data_Maybe.Nothing.value,
                    tail: new Data_Maybe.Just(tail)
                },
                close: close
            }));
        });
    });
};
var parseRowParen = function (open) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseLabel))(tokDoubleColon)))(function (v) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokComma))(parseRowLabel)))(function (rest) {
                return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokPipe))(parseType)))(function (tail) {
                    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightParen)(function (close) {
                        return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.TypeRow({
                            open: open,
                            value: {
                                labels: new Data_Maybe.Just({
                                    head: {
                                        label: v.value0,
                                        separator: v.value1,
                                        value: value
                                    },
                                    tail: rest
                                }),
                                tail: tail
                            },
                            close: close
                        }));
                    });
                });
            });
        });
    });
};
var parseRowLabel = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseLabel)(function (label) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                label: label,
                separator: separator,
                value: value
            });
        });
    });
});
var parseRow = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(separated(tokComma)(parseRowLabel)))(function (labels) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokPipe))(parseType)))(function (tail) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                labels: labels,
                tail: tail
            });
        });
    });
});
var parseKindedVar = function (open) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parens(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeVar.create)(parseIdent))))(tokDoubleColon)))(function (v) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (kind) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightParen)(function (close) {
                return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.TypeParens({
                    open: open,
                    value: new PureScript_CST_Types.TypeKinded(new PureScript_CST_Types.TypeParens(v.value0), v.value1, kind),
                    close: close
                }));
            });
        });
    });
};
var parseForall = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeForall.create)(tokForall))(many1(parseTypeVarBinding)))(tokDot))(parseType1);
});
var parseDataCtor = Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function (v) {
    return function (v1) {
        return {
            name: v,
            fields: v1
        };
    };
})(parseProper))(PureScript_CST_Parser_Monad.many(parseTypeAtom));
var parseIdentBinder = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (ident) {
    return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderNamed.create(ident))(tokAt))(parseBinderAtom))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.BinderVar(ident)));
});
var parseBinderConstructor = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseQualifiedProper)(function (name) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseBinderAtom))(function (apps) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.BinderConstructor(name, apps));
        });
    });
});
var parseBinderAtom = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseIdentBinder)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(PureScript_CST_Types.BinderConstructor.create)([  ]))(parseQualifiedProper))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderWildcard.create)(tokUnderscore))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderString.create))(parseString))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderChar.create))(parseChar))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderBoolean.create))(parseBoolean))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderInt.create(Data_Maybe.Nothing.value)))($$parseInt))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderNumber.create(Data_Maybe.Nothing.value)))(parseNumber))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderArray.create)(delimited(tokLeftSquare)(tokRightSquare)(tokComma)(parseBinder)))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderRecord.create)(delimited(tokLeftBrace)(tokRightBrace)(tokComma)(parseRecordLabeled(parseBinder))))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderParens.create)(parens(parseBinder))))))))))));
});
var parseBinder2 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseBinderNegative)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseBinderConstructor)(parseBinderAtom));
});
var parseBinder1 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseBinder2)(function (binder) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseQualifiedOperator))(parseBinder2)))(function (ops) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)((function () {
                var v1 = Data_Array_NonEmpty.fromArray(ops);
                if (v1 instanceof Data_Maybe.Nothing) {
                    return binder;
                };
                if (v1 instanceof Data_Maybe.Just) {
                    return new PureScript_CST_Types.BinderOp(binder, v1.value0);
                };
                throw new Error("Failed pattern match at PureScript.CST.Parser (line 811, column 8 - line 813, column 34): " + [ v1.constructor.name ]);
            })());
        });
    });
});
var parseBinder = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseBinder1)(function (binder) {
        return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderTyped.create(binder))(tokDoubleColon))(parseType))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(binder));
    });
});
var parseClassConstraints = function (parseOneConstraint) {
    return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.Many.create)(parens(separated(tokComma)(parseType))))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.One.create)(parseOneConstraint));
};
var parseDeclDerive = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("derive"))(function (derive_) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(tokKeyword("newtype")))(function (newtype_) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("instance"))(function (keyword) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(parseInstanceName))(function (name) {
                return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseClassConstraints(parseType3)))(tokRightFatArrow))))(function (constraints) {
                    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseQualifiedProper)(function (className) {
                        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeAtom))(function (types) {
                            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclDerive(derive_, newtype_, {
                                keyword: keyword,
                                name: name,
                                constraints: constraints,
                                className: className,
                                types: types
                            }));
                        });
                    });
                });
            });
        });
    });
});
var parseClassMember = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (label) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                label: label,
                separator: separator,
                value: value
            });
        });
    });
});
var parseDeclClassSignature = function (keyword) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseProper))(tokDoubleColon)))(function (v) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclKindSignature(keyword, {
                label: v.value0,
                separator: v.value1,
                value: value
            }));
        });
    });
};
var parseDeclKindSignature = function (keyword) {
    return function (label) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
                return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclKindSignature(keyword, {
                    label: label,
                    separator: separator,
                    value: value
                }));
            });
        });
    };
};
var parseDeclSignature = function (label) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclSignature({
                label: label,
                separator: separator,
                value: value
            }));
        });
    });
};
var parseForeignData = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("data"))(function (keyword) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function (label) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
                return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ForeignData(keyword, {
                    label: label,
                    separator: separator,
                    value: value
                }));
            });
        });
    });
});
var parseForeignValue = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (label) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ForeignValue({
                label: label,
                separator: separator,
                value: value
            }));
        });
    });
});
var parseDeclForeign = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("foreign"))(function (keyword1) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("import"))(function (keyword2) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseForeignData)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseForeignKind)(parseForeignValue)))(function (foreign_) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclForeign(keyword1, keyword2, foreign_));
        });
    });
});
var parseInstanceBindingSignature = function (label) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.InstanceBindingSignature({
                label: label,
                separator: separator,
                value: value
            }));
        });
    });
};
var parseLetBindingSignature = function (label) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.LetBindingSignature({
                label: label,
                separator: separator,
                value: value
            }));
        });
    });
};
var parseWhere = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function (expr) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokKeyword("where")))(layoutNonEmpty(recoverLetBinding(parseLetBinding)))))(function (bindings) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                expr: expr,
                bindings: bindings
            });
        });
    });
});
var parseTickExpr1 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr3)(function (expr) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseQualifiedOperator))(parseExpr3)))(function (ops) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)((function () {
                var v1 = Data_Array_NonEmpty.fromArray(ops);
                if (v1 instanceof Data_Maybe.Nothing) {
                    return expr;
                };
                if (v1 instanceof Data_Maybe.Just) {
                    return new PureScript_CST_Types.ExprOp(expr, v1.value0);
                };
                throw new Error("Failed pattern match at PureScript.CST.Parser (line 582, column 8 - line 584, column 30): " + [ v1.constructor.name ]);
            })());
        });
    });
});
var parseTickExpr = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokTick)(function (open) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseTickExpr1)(function (value) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokTick)(function (close) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                open: open,
                value: value,
                close: close
            });
        });
    });
});
var parseRecordUpdates = function (expr) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad["try"](Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(tokLeftBrace)(PureScript_CST_Parser_Monad.lookAhead(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(parseLabel)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(tokEquals)(tokLeftBrace))))))(function (open) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(separated(tokComma)(parseRecordUpdate))(function (value) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightBrace)(function (close) {
                return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprRecordUpdate(expr, {
                    open: open,
                    value: value,
                    close: close
                }));
            });
        });
    });
};
var parseRecordUpdateLeaf = function (label) {
    return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.RecordUpdateLeaf.create(label))(tokEquals))(parseExpr);
};
var parseRecordUpdateBranch = function (label) {
    return Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.RecordUpdateBranch.create(label))(braces(separated(tokComma)(parseRecordUpdate)));
};
var parseRecordUpdate = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseLabel)(function (label) {
    return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRecordUpdateLeaf(label))(parseRecordUpdateBranch(label));
});
var parseLetIn = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("let"))(function (keyword) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(layoutNonEmpty(recoverLetBinding(parseLetBinding)))(function (bindings) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("in"))(function (in_) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function (body) {
                return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprLet({
                    keyword: keyword,
                    bindings: bindings,
                    "in": in_,
                    body: body
                }));
            });
        });
    });
});
var parseLetBindingName = function (name) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseBinderAtom))(function (binders) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseGuarded(tokEquals))(function (guarded) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.LetBindingName({
                name: name,
                binders: binders,
                guarded: guarded
            }));
        });
    });
};
var parseLetBinding = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(PureScript_CST_Parser_Monad["try"](parseIdentBinding))(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.LetBindingPattern.create)(parseBinder1))(tokEquals))(parseWhere));
});
var parseLambda = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokBackslash)(function (symbol) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(many1(parseBinderAtom))(function (binders) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightArrow)(function (arrow) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function (body) {
                return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprLambda({
                    symbol: symbol,
                    binders: binders,
                    arrow: arrow,
                    body: body
                }));
            });
        });
    });
});
var parseIf = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("if"))(function (keyword) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function (cond) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("then"))(function (then_) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function (true_) {
                return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("else"))(function (else_) {
                    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function (false_) {
                        return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprIf({
                            keyword: keyword,
                            cond: cond,
                            then: then_,
                            "true": true_,
                            "else": else_,
                            "false": false_
                        }));
                    });
                });
            });
        });
    });
});
var parseIdentBinding = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (ident) {
    return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseLetBindingSignature(ident))(parseLetBindingName(ident));
});
var parseGuarded = function (sepParser) {
    var parsePatternGuard = Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function (v) {
        return function (v1) {
            return {
                binder: v,
                expr: v1
            };
        };
    })(PureScript_CST_Parser_Monad.optional(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseBinder))(tokLeftArrow)))))(parseExpr);
    var parseGuardedExpr = Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function (v) {
        return function (v1) {
            return function (v2) {
                return function (v3) {
                    return {
                        bar: v,
                        patterns: v1,
                        separator: v2,
                        where: v3
                    };
                };
            };
        };
    })(tokPipe))(separated(tokComma)(parsePatternGuard)))(sepParser))(parseWhere);
    return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.Unconditional.create)(sepParser))(parseWhere))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.Guarded.create)(many1(parseGuardedExpr)));
};
var parseExprAtom = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprIdent.create)(parseQualifiedIdent))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprConstructor.create)(parseQualifiedProper))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprOpName.create)(parseQualifiedSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprSection.create)(tokUnderscore))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprHole.create)(parseHole))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.ExprString.create))(parseString))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.ExprChar.create))(parseChar))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.ExprBoolean.create))(parseBoolean))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.ExprInt.create))($$parseInt))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.ExprNumber.create))(parseNumber))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprArray.create)(delimited(tokLeftSquare)(tokRightSquare)(tokComma)(parseExpr)))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprRecord.create)(delimited(tokLeftBrace)(tokRightBrace)(tokComma)(parseRecordLabeled(parseExpr))))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprParens.create)(parens(parseExpr))))))))))))));
});
var parseExpr7 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExprAtom)(function (expr) {
        return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRecordAccessor(expr))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(expr));
    });
});
var parseExpr6 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr7)(function (expr) {
        return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRecordUpdates(expr))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(expr));
    });
});
var parseExpr5 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseIf)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseLetIn)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseLambda)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseCase)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDo)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseAdo)(parseExpr6))))));
});
var parseExpr4 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr5)(function (expr) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseExpr5))(function (args) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)((function () {
                var v1 = Data_Array_NonEmpty.fromArray(args);
                if (v1 instanceof Data_Maybe.Nothing) {
                    return expr;
                };
                if (v1 instanceof Data_Maybe.Just) {
                    return new PureScript_CST_Types.ExprApp(expr, v1.value0);
                };
                throw new Error("Failed pattern match at PureScript.CST.Parser (line 595, column 8 - line 597, column 31): " + [ v1.constructor.name ]);
            })());
        });
    });
});
var parseExpr3 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprNegate.create)(tokKeyOperator("-")))(parseExpr3))(parseExpr4);
});
var parseExpr2 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr3)(function (expr) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseTickExpr))(parseExpr3)))(function (ops) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)((function () {
                var v1 = Data_Array_NonEmpty.fromArray(ops);
                if (v1 instanceof Data_Maybe.Nothing) {
                    return expr;
                };
                if (v1 instanceof Data_Maybe.Just) {
                    return new PureScript_CST_Types.ExprInfix(expr, v1.value0);
                };
                throw new Error("Failed pattern match at PureScript.CST.Parser (line 567, column 8 - line 569, column 33): " + [ v1.constructor.name ]);
            })());
        });
    });
});
var parseExpr1 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr2)(function (expr) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseQualifiedOperator))(parseExpr2)))(function (ops) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)((function () {
                var v1 = Data_Array_NonEmpty.fromArray(ops);
                if (v1 instanceof Data_Maybe.Nothing) {
                    return expr;
                };
                if (v1 instanceof Data_Maybe.Just) {
                    return new PureScript_CST_Types.ExprOp(expr, v1.value0);
                };
                throw new Error("Failed pattern match at PureScript.CST.Parser (line 559, column 8 - line 561, column 30): " + [ v1.constructor.name ]);
            })());
        });
    });
});
var parseExpr = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr1)(function (expr) {
        return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprTyped.create(expr))(tokDoubleColon))(parseType))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(expr));
    });
});
var parseDoStatement = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.DoLet.create)(tokKeyword("let")))(layoutNonEmpty(recoverLetBinding(parseLetBinding))))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.DoBind.create))(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseBinder))(tokLeftArrow))))(parseExpr))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.DoDiscard.create)(parseExpr)));
});
var parseDo = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokQualifiedKeyword("do"))(function (keyword) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(layoutNonEmpty(recoverDoStatement(parseDoStatement)))(function (statements) {
        return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprDo({
            keyword: keyword,
            statements: statements
        }));
    });
});
var parseCaseBranches = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
    return layoutNonEmpty(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(separated(tokComma)(parseBinder1)))(parseGuarded(tokRightArrow)));
});
var parseCase = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("case"))(function (keyword) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(separated(tokComma)(parseExpr))(function (head) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("of"))(function (of_) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(PureScript_CST_Parser_Monad["try"](parseBadSingleCaseBranch))(parseCaseBranches))(function (branches) {
                return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprCase({
                    keyword: keyword,
                    head: head,
                    of: of_,
                    branches: branches
                }));
            });
        });
    });
});
var parseBadSingleCaseWhere = function (binder) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightArrow)(function (arrow) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutEnd)(parseWhere))(function (body) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(Data_Array_NonEmpty.singleton(new Data_Tuple.Tuple({
                head: binder,
                tail: [  ]
            }, new PureScript_CST_Types.Unconditional(arrow, body))));
        });
    });
};
var parseBadSingleCaseGuarded = function (binder) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutEnd)(parseGuarded(tokRightArrow)))(function (body) {
        return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(Data_Array_NonEmpty.singleton(new Data_Tuple.Tuple({
            head: binder,
            tail: [  ]
        }, body)));
    });
};
var parseBadSingleCaseBranch = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutStart)(parseBinder1))(function (binder) {
    return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseBadSingleCaseWhere(binder))(parseBadSingleCaseGuarded(binder));
});
var parseAdo = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokQualifiedKeyword("ado"))(function (keyword) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(layout(recoverDoStatement(parseDoStatement)))(function (statements) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("in"))(function (in_) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function (result) {
                return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprAdo({
                    keyword: keyword,
                    statements: statements,
                    "in": in_,
                    result: result
                }));
            });
        });
    });
});
var parseDeclValue1 = function (name) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseBinderAtom))(function (binders) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseGuarded(tokEquals))(function (guarded) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclValue({
                name: name,
                binders: binders,
                guarded: guarded
            }));
        });
    });
};
var parseDeclValue = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (ident) {
    return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclSignature(ident))(parseDeclValue1(ident));
});
var parseInstanceBindingName = function (name) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseBinderAtom))(function (binders) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseGuarded(tokEquals))(function (guarded) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.InstanceBindingName({
                name: name,
                binders: binders,
                guarded: guarded
            }));
        });
    });
};
var parseInstanceBinding = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (ident) {
    return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseInstanceBindingSignature(ident))(parseInstanceBindingName(ident));
});
var parseInstance = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("instance"))(function (keyword) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(parseInstanceName))(function (name) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseClassConstraints(parseType3)))(tokRightFatArrow))))(function (constraints) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseQualifiedProper)(function (className) {
                return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeAtom))(function (types) {
                    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokKeyword("where")))(layoutNonEmpty(parseInstanceBinding))))(function (body) {
                        return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                            head: {
                                keyword: keyword,
                                name: name,
                                constraints: constraints,
                                className: className,
                                types: types
                            },
                            body: body
                        });
                    });
                });
            });
        });
    });
});
var parseDeclInstanceChain = Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.DeclInstanceChain.create)(separated(parseInstanceChainSeparator)(parseInstance));
var parseDeclClass1 = function (keyword) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseClassConstraints(parseType5)))(tokLeftFatArrow))))(function ($$super) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function (name) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeVarBinding))(function (vars) {
                return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokPipe))(separated(tokComma)(parseFundep))))(function (fundeps) {
                    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokKeyword("where")))(layoutNonEmpty(parseClassMember))))(function (members) {
                        return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclClass({
                            keyword: keyword,
                            "super": $$super,
                            name: name,
                            vars: vars,
                            fundeps: fundeps
                        }, members));
                    });
                });
            });
        });
    });
};
var parseDeclClass = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("class"))(function (keyword) {
    return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclClassSignature(keyword))(parseDeclClass1(keyword));
});
var parseDeclData1 = function (keyword) {
    return function (name) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeVarBinding))(function (vars) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokEquals))(separated(tokPipe)(parseDataCtor))))(function (ctors) {
                return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclData({
                    keyword: keyword,
                    name: name,
                    vars: vars
                }, ctors));
            });
        });
    };
};
var parseDeclData = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("data"))(function (keyword) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function (name) {
        return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclKindSignature(keyword)(name))(parseDeclData1(keyword)(name));
    });
});
var parseDeclNewtype1 = function (keyword) {
    return function (name) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeVarBinding))(function (vars) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokEquals)(function (tok) {
                return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function (wrapper) {
                    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseTypeAtom)(function (body) {
                        return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclNewtype({
                            keyword: keyword,
                            name: name,
                            vars: vars
                        }, tok, wrapper, body));
                    });
                });
            });
        });
    };
};
var parseDeclNewtype = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("newtype"))(function (keyword) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function (name) {
        return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclKindSignature(keyword)(name))(parseDeclNewtype1(keyword)(name));
    });
});
var parseDeclType2 = function (keyword) {
    return function (name) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeVarBinding))(function (vars) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokEquals)(function (tok) {
                return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (body) {
                    return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclType({
                        keyword: keyword,
                        name: name,
                        vars: vars
                    }, tok, body));
                });
            });
        });
    };
};
var parseDeclType1 = function (keyword) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function (name) {
        return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclKindSignature(keyword)(name))(parseDeclType2(keyword)(name));
    });
};
var parseDeclType = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("type"))(function (keyword) {
    return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclRole(keyword))(parseDeclType1(keyword));
});
var parseDecl = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclData)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclNewtype)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclType)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclClass)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclInstanceChain)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclDerive)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclValue)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclForeign)(parseDeclFixity))))))));
var parseModuleDecls = PureScript_CST_Parser_Monad.many(Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(recoverDecl(parseDecl))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(tokLayoutSep)(PureScript_CST_Parser_Monad.lookAhead(tokLayoutEnd))));
var parseModuleBody = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(parseModuleDecls)(tokLayoutEnd))(function (decls) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.eof)(function (v) {
        return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
            decls: decls,
            trailingComments: v.value1,
            end: v.value0
        });
    });
});
var parseModule = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseModuleHeader)(function (header) {
    return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseModuleBody)(function (body) {
        return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
            header: header,
            body: body
        });
    });
});
module.exports = {
    parseModule: parseModule,
    parseModuleHeader: parseModuleHeader,
    parseModuleBody: parseModuleBody,
    parseImportDecl: parseImportDecl,
    parseDecl: parseDecl,
    parseType: parseType,
    parseExpr: parseExpr,
    parseBinder: parseBinder
};
