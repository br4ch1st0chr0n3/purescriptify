"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Array_NonEmpty = require("../Data.Array.NonEmpty/index.js");
var Data_Array_NonEmpty_Internal = require("../Data.Array.NonEmpty.Internal/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_String_NonEmpty_CodeUnits = require("../Data.String.NonEmpty.CodeUnits/index.js");
var Data_String_NonEmpty_Internal = require("../Data.String.NonEmpty.Internal/index.js");
var Data_These = require("../Data.These/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators/index.js");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String/index.js");
var URI_Common = require("../URI.Common/index.js");
var URI_Host = require("../URI.Host/index.js");
var URI_Host_IPv4Address = require("../URI.Host.IPv4Address/index.js");
var URI_Host_IPv6Address = require("../URI.Host.IPv6Address/index.js");
var URI_Host_RegName = require("../URI.Host.RegName/index.js");
var URI_HostPortPair = require("../URI.HostPortPair/index.js");
var URI_Port = require("../URI.Port/index.js");

// | A printer for multiple host/port pairs embedded in a URI.
// |
// | As a counterpart to the `parser` this function also requires the `Host`
// | and `Port` components to be printed back from their custom representations.
// | If no custom types are being used, pass `identity` for both of these arguments.
var print = function (printHost) {
    return function (printPort) {
        var $6 = Data_String_Common.joinWith(",");
        var $7 = Data_Functor.map(Data_Functor.functorArray)((function () {
            var $9 = URI_HostPortPair.print(printHost)(printPort);
            return function ($10) {
                return $9(Data_Maybe.Just.create($10));
            };
        })());
        return function ($8) {
            return $6($7($8));
        };
    };
};
var parseRegName$prime = (function () {
    var c = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(URI_Common.unreserved)(Text_Parsing_Parser_String.oneOf(Data_Identity.monadIdentity)([ "!", "$", "&", "'", "(", ")", "*", "+", ";", "=" ]));
    var p = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(URI_Common.pctEncoded)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_NonEmpty_CodeUnits.singleton)(c));
    return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))((function () {
        var $11 = Data_String_NonEmpty_Internal.join1With(Data_Array_NonEmpty_Internal.foldable1NonEmptyArray)("");
        return function ($12) {
            return URI_Host_RegName.unsafeFromString($11($12));
        };
    })())(Data_Array_NonEmpty.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(p));
})();
var parseHost$prime = function (p) {
    return URI_Common.wrapParser(Data_Identity.monadIdentity)(p)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(URI_Host.IPv6Address.create)(URI_Host_IPv6Address.parser))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(URI_Host.IPv4Address.create)(URI_Host_IPv4Address.parser))))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(URI_Host.NameAddress.create)(parseRegName$prime)));
};
var parsePair = function (parseHost) {
    return function (parsePort) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(parseHost$prime(parseHost)))(function (mh) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(URI_Common.wrapParser(Data_Identity.monadIdentity)(parsePort)(URI_Port.parser)))(function (mp) {
                if (mh instanceof Data_Maybe.Just && mp instanceof Data_Maybe.Nothing) {
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_These.This(mh.value0));
                };
                if (mh instanceof Data_Maybe.Nothing && mp instanceof Data_Maybe.Just) {
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_These.That(mp.value0));
                };
                if (mh instanceof Data_Maybe.Just && mp instanceof Data_Maybe.Just) {
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_These.Both(mh.value0, mp.value0));
                };
                if (mh instanceof Data_Maybe.Nothing && mp instanceof Data_Maybe.Nothing) {
                    return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Neither host nor port present");
                };
                throw new Error("Failed pattern match at URI.Extra.MultiHostPortPair (line 60, column 3 - line 64, column 60): " + [ mh.constructor.name, mp.constructor.name ]);
            });
        });
    };
};

// | A parser for multiple host/port pairs embedded in a URI.
// |
// | This function allows for the `Host` and `Port` components to be parsed into
// | custom representations. If this is not necessary, use `pure` for both of
// | these arguments.
var parser = function (parseHost) {
    return function (parsePort) {
        return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Array.fromFoldable(Data_List_Types.foldableList))(Text_Parsing_Parser_Combinators.sepBy(Data_Identity.monadIdentity)(parsePair(parseHost)(parsePort))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)(",")));
    };
};
module.exports = {
    parser: parser,
    print: print
};
