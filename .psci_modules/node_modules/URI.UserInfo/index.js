"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Data_Array_NonEmpty = require("../Data.Array.NonEmpty/index.js");
var Data_Array_NonEmpty_Internal = require("../Data.Array.NonEmpty.Internal/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_NonEmpty_CodeUnits = require("../Data.String.NonEmpty.CodeUnits/index.js");
var Data_String_NonEmpty_Internal = require("../Data.String.NonEmpty.Internal/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String/index.js");
var URI_Common = require("../URI.Common/index.js");

// | The user info part of an `Authority`. For example: `user`, `foo:bar`.
// |
// | This type treats the entire string as an undifferentiated blob, if you
// | would like to specifically deal with the `user:password` format, take a
// | look at `URI.Extra.UserPassInfo`.
var UserInfo = function (x) {
    return x;
};

// | The supported user info characters, excluding percent-encodings.
var userInfoChar = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(URI_Common.unreserved)(URI_Common.subDelims))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)(":"));

// | Returns the string value for user-info without percent-decoding. Only
// | "unsafe" in the sense that values this produces may need further decoding,
// | the name is more for symmetry with the `fromString`/`unsafeFromString`
// | pairing.
var unsafeToString = function (v) {
    return v;
};

// | Constructs a user-info value from a string directly - no percent-encoding
// | will be applied. This is useful when using a custom encoding scheme for
// | the query, to prevent double-encoding.
var unsafeFromString = UserInfo;

// | Returns the string value for user-info, percent-decoding any characters
// | that require it.
// |
// | ``` purescript
// | toString (unsafeFromString "foo") = "foo"
// | toString (unsafeFromString "foo%40bar") = "foo@bar"
// | ```
var toString = function (v) {
    return URI_Common["decodeURIComponent'"](v);
};
var showUserInfo = {
    show: function (v) {
        return "(UserInfo.unsafeFromString " + (Data_Show.show(Data_String_NonEmpty_Internal.showNonEmptyString)(v) + ")");
    }
};
var semigroupUserInfo = Data_String_NonEmpty_Internal.semigroupNonEmptyString;

// | A printer for the user-info component of a URI.
var print = function ($6) {
    return Data_String_NonEmpty_Internal.toString(unsafeToString($6));
};

// | A parser for the user-info component of a URI.
var parser = (function () {
    var parse = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_NonEmpty_CodeUnits.singleton)(userInfoChar))(URI_Common.pctEncoded);
    return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))((function () {
        var $7 = Data_String_NonEmpty_Internal.join1With(Data_Array_NonEmpty_Internal.foldable1NonEmptyArray)("");
        return function ($8) {
            return UserInfo($7($8));
        };
    })())(Data_Array_NonEmpty.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(parse));
})();
var ordUserInfo = Data_String_NonEmpty_Internal.ordNonEmptyString;

// | Constructs a user-info value from a string, percent-encoding any characters
// | that require it. Note that running this on a string that has already had
// | percent-encoding applied will double-encode it, for those situations use
// | `unsafeFromString` instead.
// |
// | ``` purescript
// | fromString "foo" = unsafeFromString "foo"
// | fromString "foo@bar" = unsafeFromString "foo%40bar"
// | fromString "foo%40bar" = unsafeFromString "foo%2540bar"
// | ```
var fromString = (function () {
    var $9 = URI_Common["printEncoded'"](userInfoChar);
    return function ($10) {
        return UserInfo($9($10));
    };
})();
var eqUserInfo = Data_String_NonEmpty_Internal.eqNonEmptyString;
module.exports = {
    fromString: fromString,
    toString: toString,
    unsafeFromString: unsafeFromString,
    unsafeToString: unsafeToString,
    parser: parser,
    print: print,
    userInfoChar: userInfoChar,
    eqUserInfo: eqUserInfo,
    ordUserInfo: ordUserInfo,
    semigroupUserInfo: semigroupUserInfo,
    showUserInfo: showUserInfo
};
