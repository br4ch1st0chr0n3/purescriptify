"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Lens_Lens = require("../Data.Lens.Lens/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show_Generic = require("../Data.Show.Generic/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators/index.js");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String/index.js");
var URI_Common = require("../URI.Common/index.js");
var URI_Host = require("../URI.Host/index.js");
var URI_Port = require("../URI.Port/index.js");
var URI_UserInfo = require("../URI.UserInfo/index.js");

// | The authority part of a URI. For example: `purescript.org`,
// | `localhost:3000`, `user@example.net`.
var Authority = (function () {
    function Authority(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Authority.create = function (value0) {
        return function (value1) {
            return new Authority(value0, value1);
        };
    };
    return Authority;
})();

// | A printer for the authority part of a URI. Will print the value with a
// | `"//"` prefix.
var print = function (opts) {
    return function (v) {
        if (v.value0 instanceof Data_Maybe.Just) {
            return "//" + (URI_UserInfo.print(opts.printUserInfo(v.value0.value0)) + ("@" + opts.printHosts(v.value1)));
        };
        if (v.value0 instanceof Data_Maybe.Nothing) {
            return "//" + opts.printHosts(v.value1);
        };
        throw new Error("Failed pattern match at URI.Authority (line 88, column 33 - line 90, column 39): " + [ v.value0.constructor.name ]);
    };
};

// | A parser for the authority part of a URI. Expects values with a `"//"`
// | prefix.
var parser = function (opts) {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("//"))(function () {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(URI_Common.wrapParser(Data_Identity.monadIdentity)(opts.parseUserInfo)(URI_UserInfo.parser))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("@")))))(function (ui) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(opts.parseHosts)(function (hosts) {
                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Authority(ui, hosts));
            });
        });
    });
};
var genericAuthority = {
    to: function (x) {
        return new Authority(x.value0, x.value1);
    },
    from: function (x) {
        return new Data_Generic_Rep.Product(x.value0, x.value1);
    }
};
var showAuthority = function (dictShow) {
    return function (dictShow1) {
        return {
            show: Data_Show_Generic.genericShow(genericAuthority)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Data_Maybe.showMaybe(dictShow)))(Data_Show_Generic.genericShowArgsArgument(dictShow1)))({
                reflectSymbol: function () {
                    return "Authority";
                }
            }))
        };
    };
};
var eqAuthority = function (dictEq) {
    return function (dictEq1) {
        return {
            eq: function (x) {
                return function (y) {
                    return Data_Eq.eq(Data_Maybe.eqMaybe(dictEq))(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
                };
            }
        };
    };
};
var ordAuthority = function (dictOrd) {
    return function (dictOrd1) {
        return {
            compare: function (x) {
                return function (y) {
                    var v = Data_Ord.compare(Data_Maybe.ordMaybe(dictOrd))(x.value0)(y.value0);
                    if (v instanceof Data_Ordering.LT) {
                        return Data_Ordering.LT.value;
                    };
                    if (v instanceof Data_Ordering.GT) {
                        return Data_Ordering.GT.value;
                    };
                    return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
                };
            },
            Eq0: function () {
                return eqAuthority(dictOrd.Eq0())(dictOrd1.Eq0());
            }
        };
    };
};

// | A lens for the user-info component of the authority.
var _userInfo = function (dictStrong) {
    return Data_Lens_Lens.lens(function (v) {
        return v.value0;
    })(function (v) {
        return function (ui) {
            return new Authority(ui, v.value1);
        };
    })(dictStrong);
};

// | A lens for the host(s) component of the authority.
var _hosts = function (dictStrong) {
    return Data_Lens_Lens.lens(function (v) {
        return v.value1;
    })(function (v) {
        return function (hs) {
            return new Authority(v.value0, hs);
        };
    })(dictStrong);
};
module.exports = {
    Authority: Authority,
    parser: parser,
    print: print,
    "_userInfo": _userInfo,
    "_hosts": _hosts,
    eqAuthority: eqAuthority,
    ordAuthority: ordAuthority,
    genericAuthority: genericAuthority,
    showAuthority: showAuthority,
    IPv4Address: URI_Host.IPv4Address,
    IPv6Address: URI_Host.IPv6Address,
    NameAddress: URI_Host.NameAddress,
    "_IPv4Address": URI_Host["_IPv4Address"],
    "_IPv6Address": URI_Host["_IPv6Address"],
    "_NameAddress": URI_Host["_NameAddress"]
};
