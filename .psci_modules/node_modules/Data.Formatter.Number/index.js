
// | This module has no support of percents and currencies.
// | Please, note that using simple formatter that tabulates number with
// | zeros and put commas between thousands should be enough for everything
// | because one could just compose it with `flip append "%"` or whatever
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Formatter_Internal = require("../Data.Formatter.Internal/index.js");
var Data_Formatter_Parser_Number = require("../Data.Formatter.Parser.Number/index.js");
var Data_Formatter_Parser_Utils = require("../Data.Formatter.Parser.Utils/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Show_Generic = require("../Data.Show.Generic/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var $$Math = require("../Math/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators/index.js");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String/index.js");
var Formatter = function (x) {
    return x;
};
var unformatParser = function (v) {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("-"))))(function (minus) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))((function () {
            if (minus instanceof Data_Maybe.Nothing && v.sign) {
                return Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("+"))(1.0);
            };
            if (minus instanceof Data_Maybe.Nothing && Data_Boolean.otherwise) {
                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(1.0);
            };
            if (minus instanceof Data_Maybe.Just) {
                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(-1.0);
            };
            throw new Error("Failed pattern match at Data.Formatter.Number (line 164, column 10 - line 170, column 18): " + [ minus.constructor.name ]);
        })())(function (sign) {
            var digitsWithCommas$prime = function (accum) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Data_Formatter_Parser_Number.parseDigit(Data_Identity.monadIdentity)))(function (ds) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Applicative.when(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Array["null"](accum) && Data_Array.length(ds) > 3)(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Wrong number of digits between thousand separators")))(function () {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Applicative.when(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Array.length(ds) !== 3)(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Wrong number of digits between thousand separators")))(function () {
                            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.oneOf(Data_Identity.monadIdentity)([ ",", "." ]))(function (sep) {
                                if (sep === ".") {
                                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(accum)(ds));
                                };
                                if (sep === ",") {
                                    return digitsWithCommas$prime(Data_Semigroup.append(Data_Semigroup.semigroupArray)(accum)(ds));
                                };
                                return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Incorrect symbol, expected ',' or '.'");
                            });
                        });
                    });
                });
            };
            var digitsWithCommas = (function () {
                var $16 = !v.comma;
                if ($16) {
                    return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Data_Formatter_Parser_Number.parseDigit(Data_Identity.monadIdentity)))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("."));
                };
                return digitsWithCommas$prime([  ]);
            })();
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(digitsWithCommas)(function (beforeDigits) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))((function () {
                    var $17 = Data_Array.length(beforeDigits) < v.before;
                    if ($17) {
                        return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Error: too few digits before dot");
                    };
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Int.toNumber(Data_Formatter_Internal.foldDigits(Data_Foldable.foldableArray)(beforeDigits)));
                })())(function (before) {
                    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Data_Formatter_Parser_Number.parseDigit(Data_Identity.monadIdentity)))(function (afterDigits) {
                        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))((function () {
                            var $18 = Data_Array.length(afterDigits) < v.after;
                            if ($18) {
                                return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Error: too few digits after dot");
                            };
                            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Int.toNumber(Data_Formatter_Internal.foldDigits(Data_Foldable.foldableArray)(afterDigits)));
                        })())(function (after) {
                            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))((function () {
                                if (v.abbreviations) {
                                    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.oneOf(Data_Identity.monadIdentity)([ "K", "M", "G", "T", "P", "E", "Z", "Y" ]))))(function (letter) {
                                        if (letter instanceof Data_Maybe.Nothing) {
                                            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("10e+")))(function (e) {
                                                if (e instanceof Data_Maybe.Nothing) {
                                                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(0);
                                                };
                                                if (e instanceof Data_Maybe.Just) {
                                                    return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Formatter_Internal.foldDigits(Data_Foldable.foldableArray))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Data_Formatter_Parser_Number.parseDigit(Data_Identity.monadIdentity)));
                                                };
                                                throw new Error("Failed pattern match at Data.Formatter.Number (line 215, column 11 - line 219, column 47): " + [ e.constructor.name ]);
                                            });
                                        };
                                        if (letter instanceof Data_Maybe.Just && letter.value0 === "K") {
                                            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(3);
                                        };
                                        if (letter instanceof Data_Maybe.Just && letter.value0 === "M") {
                                            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(6);
                                        };
                                        if (letter instanceof Data_Maybe.Just && letter.value0 === "G") {
                                            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(9);
                                        };
                                        if (letter instanceof Data_Maybe.Just && letter.value0 === "T") {
                                            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(12);
                                        };
                                        if (letter instanceof Data_Maybe.Just && letter.value0 === "P") {
                                            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(15);
                                        };
                                        if (letter instanceof Data_Maybe.Just && letter.value0 === "E") {
                                            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(18);
                                        };
                                        if (letter instanceof Data_Maybe.Just && letter.value0 === "Z") {
                                            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(21);
                                        };
                                        if (letter instanceof Data_Maybe.Just && letter.value0 === "Y") {
                                            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(24);
                                        };
                                        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(0);
                                    });
                                };
                                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(0);
                            })())(function (abbr) {
                                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))($$Math.pow(10.0)(Data_Int.toNumber(abbr)) * sign * (before + after / $$Math.pow(10.0)(Data_Int.toNumber(v.after))));
                            });
                        });
                    });
                });
            });
        });
    });
};
var unformat = function ($55) {
    return Data_Formatter_Parser_Utils.runP(unformatParser($55));
};
var printFormatter = function (v) {
    return (function () {
        if (v.sign) {
            return "+";
        };
        return "";
    })() + (Data_Formatter_Internal.repeat(Data_Monoid.monoidString)("0")(v.before - 1 | 0) + ((function () {
        if (v.comma) {
            return "0,0";
        };
        return "0";
    })() + ((function () {
        var $34 = v.after > 0;
        if ($34) {
            return ".";
        };
        return "";
    })() + (Data_Formatter_Internal.repeat(Data_Monoid.monoidString)("0")(v.after) + (function () {
        if (v.abbreviations) {
            return "a";
        };
        return "";
    })()))));
};
var newtypeFormatter = {
    Coercible0: function () {
        return undefined;
    }
};
var genericFormatter = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showFormatter = {
    show: Data_Show_Generic.genericShow(genericFormatter)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "abbreviations";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "after";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "before";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "comma";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "sign";
        }
    })(Data_Show.showRecordFieldsNil)(Data_Show.showBoolean))(Data_Show.showBoolean))(Data_Show.showInt))(Data_Show.showInt))(Data_Show.showBoolean))))({
        reflectSymbol: function () {
            return "Formatter";
        }
    }))
};
var formatParser = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("+"))))(function (sign) {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("0")))(function (before) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(",0"))))(function (comma) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("."))))(function (dot) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Traversable["for"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Traversable.traversableMaybe)(dot)(function (v) {
                    return Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("0")));
                }))(function (after) {
                    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("a"))))(function (abbreviations) {
                        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))({
                            sign: Data_Maybe.isJust(sign),
                            before: Data_Array.length(before),
                            comma: Data_Maybe.isJust(comma),
                            after: Data_Maybe.fromMaybe(0)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Array.length)(after)),
                            abbreviations: Data_Maybe.isJust(abbreviations)
                        });
                    });
                });
            });
        });
    });
});
var parseFormatString = Data_Formatter_Parser_Utils.runP(formatParser);
var unformatNumber = function (pattern) {
    return function (str) {
        return Control_Bind.bind(Data_Either.bindEither)(parseFormatString(pattern))(Data_Function.flip(unformat)(str));
    };
};

// | Formats a number according to the format object provided.
// | Due to the nature of floating point numbers, may yield unpredictable results for extremely
// | large or extremely small numbers, such as numbers whose absolute values are ≥ 1e21 or ≤ 1e-21,
// | or when formatting with > 20 digits after the decimal place.
// | See [purescript-decimals](https://pursuit.purescript.org/packages/purescript-decimals/4.0.0)
// | for working with arbitrary precision decimals, which supports simple number
// | formatting for numbers that go beyond the precision available with `Number`.
var format = function (v) {
    return function (num) {
        var absed = $$Math.abs(num);
        var tens = (function () {
            var $40 = absed > 0.0;
            if ($40) {
                return Data_Ord.max(Data_Ord.ordInt)(Data_Int.floor($$Math.log(absed) / $$Math.ln10))(0);
            };
            return 0;
        })();
        if (v.abbreviations) {
            var thousands = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(tens)(3);
            var newNum = (function () {
                var $42 = thousands < 1;
                if ($42) {
                    return num;
                };
                return num / $$Math.pow(1000.0)(Data_Int.toNumber(thousands));
            })();
            var abbr = (function () {
                if (thousands === 0) {
                    return "";
                };
                if (thousands === 1) {
                    return "K";
                };
                if (thousands === 2) {
                    return "M";
                };
                if (thousands === 3) {
                    return "G";
                };
                if (thousands === 4) {
                    return "T";
                };
                if (thousands === 5) {
                    return "P";
                };
                if (thousands === 6) {
                    return "E";
                };
                if (thousands === 7) {
                    return "Z";
                };
                if (thousands === 8) {
                    return "Y";
                };
                if (Data_Boolean.otherwise) {
                    return "10e+" + Data_Show.show(Data_Show.showInt)(thousands * 3 | 0);
                };
                throw new Error("Failed pattern match at Data.Formatter.Number (line 109, column 10 - line 118, column 59): " + [  ]);
            })();
            return format({
                comma: v.comma,
                before: v.before,
                after: v.after,
                abbreviations: false,
                sign: v.sign
            })(newNum) + abbr;
        };
        var zeros = (v.before - tens | 0) - 1 | 0;
        var factor = $$Math.pow(10.0)(Data_Int.toNumber(Data_Ord.max(Data_Ord.ordInt)(0)(v.after)));
        var rounded = $$Math.round(absed * factor) / factor;
        var integer = $$Math.floor(rounded);
        var leftoverDecimal = rounded - integer;
        var leftover = $$Math.round(leftoverDecimal * factor);
        var leftoverWithZeros = (function () {
            var leftoverString = $foreign.showNumberAsInt(leftover);
            var leftoverLength = Data_String_CodePoints.length(leftoverString);
            var zeros$prime = Data_Formatter_Internal.repeat(Data_Monoid.monoidString)("0")(v.after - leftoverLength | 0);
            return zeros$prime + leftoverString;
        })();
        var addCommas = function ($copy_acc) {
            return function ($copy_counter) {
                return function ($copy_input) {
                    var $tco_var_acc = $copy_acc;
                    var $tco_var_counter = $copy_counter;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(acc, counter, input) {
                        var v1 = Data_Array.uncons(input);
                        if (v1 instanceof Data_Maybe.Nothing) {
                            $tco_done = true;
                            return Data_String_CodeUnits.fromCharArray(acc);
                        };
                        if (v1 instanceof Data_Maybe.Just && counter < 3) {
                            $tco_var_acc = Data_Array.cons(v1.value0.head)(acc);
                            $tco_var_counter = counter + 1 | 0;
                            $copy_input = v1.value0.tail;
                            return;
                        };
                        $tco_var_acc = Data_Array.cons(",")(acc);
                        $tco_var_counter = 0;
                        $copy_input = input;
                        return;
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_acc, $tco_var_counter, $copy_input);
                    };
                    return $tco_result;
                };
            };
        };
        var shownInt = (function () {
            if (v.comma) {
                return addCommas([  ])(0)(Data_Array.reverse(Data_String_CodeUnits.toCharArray(Data_Formatter_Internal.repeat(Data_Monoid.monoidString)("0")(zeros) + $foreign.showNumberAsInt(integer))));
            };
            return Data_Formatter_Internal.repeat(Data_Monoid.monoidString)("0")(zeros) + $foreign.showNumberAsInt(integer);
        })();
        return (function () {
            var $48 = num < 0;
            if ($48) {
                return "-";
            };
            var $49 = num > 0 && v.sign;
            if ($49) {
                return "+";
            };
            return "";
        })() + (shownInt + (function () {
            var $50 = v.after < 1;
            if ($50) {
                return "";
            };
            return "." + ((function () {
                var $51 = leftover === 0.0;
                if ($51) {
                    return Data_Formatter_Internal.repeat(Data_Monoid.monoidString)("0")(v.after);
                };
                return "";
            })() + (function () {
                var $52 = leftover > 0.0;
                if ($52) {
                    return leftoverWithZeros;
                };
                return "";
            })());
        })());
    };
};
var formatNumber = function (pattern) {
    return function (number) {
        return Data_Functor.mapFlipped(Data_Either.functorEither)(parseFormatString(pattern))(Data_Function.flip(format)(number));
    };
};

// Supposed to be used in chaining, because after calling format number there is no
// good way to extract number back to show.
var formatOrShowNumber = function (patter) {
    return function (number) {
        return Data_Either.either(Data_Function["const"](Data_Show.show(Data_Show.showNumber)(number)))(Control_Category.identity(Control_Category.categoryFn))(formatNumber(patter)(number));
    };
};
var eqFormatter = {
    eq: function (x) {
        return function (y) {
            return x.abbreviations === y.abbreviations && x.after === y.after && x.before === y.before && x.comma === y.comma && x.sign === y.sign;
        };
    }
};
module.exports = {
    Formatter: Formatter,
    printFormatter: printFormatter,
    parseFormatString: parseFormatString,
    format: format,
    unformat: unformat,
    formatNumber: formatNumber,
    formatOrShowNumber: formatOrShowNumber,
    unformatNumber: unformatNumber,
    genericFormatter: genericFormatter,
    newtypeFormatter: newtypeFormatter,
    showFormatter: showFormatter,
    eqFormatter: eqFormatter
};
