"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Show = require("../Data.Show/index.js");
var Indexed = function (x) {
    return x;
};
var showIndexed = function (dictShow) {
    return {
        show: function (v) {
            return "(Indexed " + (Data_Show.show(dictShow)(v) + ")");
        }
    };
};
var ordIndexed = function (dictOrd) {
    return dictOrd;
};
var ord1Indexed = function (dictOrd1) {
    return dictOrd1;
};
var newtypeIndexed = {
    Coercible0: function () {
        return undefined;
    }
};
var monadIndexed = function (dictMonad) {
    return dictMonad;
};
var ixFunctorIndexed = function (dictFunctor) {
    return {
        imap: function (f) {
            return function (v) {
                return Data_Functor.map(dictFunctor)(f)(v);
            };
        }
    };
};
var ixApplyIndexed = function (dictApply) {
    return {
        iapply: function (v) {
            return function (v1) {
                return Control_Apply.apply(dictApply)(v)(v1);
            };
        },
        IxFunctor0: function () {
            return ixFunctorIndexed(dictApply.Functor0());
        }
    };
};
var ixBindIndexed = function (dictBind) {
    return {
        ibind: function (v) {
            return function (f) {
                return Control_Bind.bind(dictBind)(v)(function (a) {
                    var v1 = f(a);
                    return v1;
                });
            };
        },
        IxApply0: function () {
            return ixApplyIndexed(dictBind.Apply0());
        }
    };
};
var ixApplicativeIndexed = function (dictApplicative) {
    return {
        ipure: (function () {
            var $30 = Control_Applicative.pure(dictApplicative);
            return function ($31) {
                return Indexed($30($31));
            };
        })(),
        IxApply0: function () {
            return ixApplyIndexed(dictApplicative.Apply0());
        }
    };
};
var ixMonadIndexed = function (dictMonad) {
    return {
        IxApplicative0: function () {
            return ixApplicativeIndexed(dictMonad.Applicative0());
        },
        IxBind1: function () {
            return ixBindIndexed(dictMonad.Bind1());
        }
    };
};
var functorIndexed = function (dictFunctor) {
    return dictFunctor;
};
var eqIndexed = function (dictEq) {
    return dictEq;
};
var eq1Indexed = function (dictEq1) {
    return dictEq1;
};
var bindIndexed = function (dictBind) {
    return dictBind;
};
var applyIndexed = function (dictApply) {
    return dictApply;
};
var applicativeIndexed = function (dictApplicative) {
    return dictApplicative;
};
module.exports = {
    Indexed: Indexed,
    newtypeIndexed: newtypeIndexed,
    eqIndexed: eqIndexed,
    eq1Indexed: eq1Indexed,
    ordIndexed: ordIndexed,
    ord1Indexed: ord1Indexed,
    showIndexed: showIndexed,
    functorIndexed: functorIndexed,
    applyIndexed: applyIndexed,
    applicativeIndexed: applicativeIndexed,
    bindIndexed: bindIndexed,
    monadIndexed: monadIndexed,
    ixFunctorIndexed: ixFunctorIndexed,
    ixApplyIndexed: ixApplyIndexed,
    ixApplicativeIndexed: ixApplicativeIndexed,
    ixBindIndexed: ixBindIndexed,
    ixMonadIndexed: ixMonadIndexed
};
