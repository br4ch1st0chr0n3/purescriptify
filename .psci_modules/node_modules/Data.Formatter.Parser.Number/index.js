"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Formatter_Internal = require("../Data.Formatter.Internal/index.js");
var Data_Formatter_Parser_Utils = require("../Data.Formatter.Parser.Utils/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Number = require("../Data.Number/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators/index.js");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String/index.js");
var parseDigit = function (dictMonad) {
    return Text_Parsing_Parser_Combinators["try"](dictMonad)(Data_Formatter_Parser_Utils.oneOfAs(Data_Functor.functorArray)(Data_Foldable.foldableArray)(dictMonad)(Text_Parsing_Parser_String["char"](dictMonad))([ new Data_Tuple.Tuple("0", 0), new Data_Tuple.Tuple("1", 1), new Data_Tuple.Tuple("2", 2), new Data_Tuple.Tuple("3", 3), new Data_Tuple.Tuple("4", 4), new Data_Tuple.Tuple("5", 5), new Data_Tuple.Tuple("6", 6), new Data_Tuple.Tuple("7", 7), new Data_Tuple.Tuple("8", 8), new Data_Tuple.Tuple("9", 9) ]));
};
var parseFractional = function (dictMonad) {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Functor.mapFlipped(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(parseDigit(dictMonad)))((function () {
        var $9 = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(Data_Show.show(Data_Show.showInt));
        return function ($10) {
            return (function (v) {
                return "0." + v;
            })($9($10));
        };
    })()))(function (digitStr) {
        var v = Data_Number.fromString(digitStr);
        if (v instanceof Data_Maybe.Just) {
            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v.value0);
        };
        if (v instanceof Data_Maybe.Nothing) {
            return Text_Parsing_Parser.fail(dictMonad)("Not a number: " + digitStr);
        };
        throw new Error("Failed pattern match at Data.Formatter.Parser.Number (line 31, column 3 - line 33, column 55): " + [ v.constructor.name ]);
    });
};
var parseInteger = function (dictMonad) {
    return Data_Functor.mapFlipped(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(parseDigit(dictMonad)))(Data_Formatter_Internal.foldDigits(Data_Foldable.foldableArray));
};
var parseMaybeInteger = function (dictMonad) {
    return Text_Parsing_Parser_Combinators.optionMaybe(dictMonad)(parseInteger(dictMonad));
};
var parseNumber = function (dictMonad) {
    return Control_Apply.apply(Text_Parsing_Parser.applyParserT(dictMonad))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Semiring.add(Data_Semiring.semiringNumber))(Data_Functor.mapFlipped(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(parseInteger(dictMonad))(Data_Int.toNumber)))(Text_Parsing_Parser_Combinators.option(dictMonad)(0.0)(Text_Parsing_Parser_Combinators["try"](dictMonad)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(dictMonad)([ ".", "," ]))(parseFractional(dictMonad)))));
};
module.exports = {
    parseInteger: parseInteger,
    parseMaybeInteger: parseMaybeInteger,
    parseNumber: parseNumber,
    parseDigit: parseDigit
};
