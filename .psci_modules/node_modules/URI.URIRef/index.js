"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators/index.js");
var URI_Authority = require("../URI.Authority/index.js");
var URI_Fragment = require("../URI.Fragment/index.js");
var URI_Host = require("../URI.Host/index.js");
var URI_Path = require("../URI.Path/index.js");
var URI_Path_Absolute = require("../URI.Path.Absolute/index.js");
var URI_Path_NoScheme = require("../URI.Path.NoScheme/index.js");
var URI_Path_Rootless = require("../URI.Path.Rootless/index.js");
var URI_Port = require("../URI.Port/index.js");
var URI_Query = require("../URI.Query/index.js");
var URI_RelativeRef = require("../URI.RelativeRef/index.js");
var URI_Scheme = require("../URI.Scheme/index.js");
var URI_URI = require("../URI.URI/index.js");
var URI_UserInfo = require("../URI.UserInfo/index.js");

// | A printer for a general URI.
var print = function (opts) {
    return Data_Either.either(URI_URI.print(opts))(URI_RelativeRef.print(opts));
};

// | A parser for a general URI.
var parser = function (opts) {
    return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Either.Left.create)(URI_URI.parser(opts))))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Either.Right.create)(URI_RelativeRef.parser(opts)));
};
module.exports = {
    parser: parser,
    print: print,
    Authority: URI_Authority.Authority,
    IPv4Address: URI_Host.IPv4Address,
    IPv6Address: URI_Host.IPv6Address,
    NameAddress: URI_Host.NameAddress,
    "_IPv4Address": URI_Host["_IPv4Address"],
    "_IPv6Address": URI_Host["_IPv6Address"],
    "_NameAddress": URI_Host["_NameAddress"],
    Path: URI_Path.Path,
    PathAbsolute: URI_Path_Absolute.PathAbsolute,
    PathNoScheme: URI_Path_NoScheme.PathNoScheme,
    PathRootless: URI_Path_Rootless.PathRootless,
    RelativePartAuth: URI_RelativeRef.RelativePartAuth,
    RelativePartNoAuth: URI_RelativeRef.RelativePartNoAuth,
    RelativeRef: URI_RelativeRef.RelativeRef,
    HierarchicalPartAuth: URI_URI.HierarchicalPartAuth,
    HierarchicalPartNoAuth: URI_URI.HierarchicalPartNoAuth,
    URI: URI_URI.URI
};
