
// | This module defines the random generator monad used by the `Test.QuickCheck`
// | module, as well as helper functions for constructing random generators.
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State = require("../Control.Monad.State/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Array_NonEmpty = require("../Data.Array.NonEmpty/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_NonEmpty = require("../Data.List.NonEmpty/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid_Additive = require("../Data.Monoid.Additive/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var $$Math = require("../Math/index.js");
var Random_LCG = require("../Random.LCG/index.js");

// | The random generator monad
// |
// | `Gen` is a state monad which encodes a linear congruential generator.
var Gen = function (x) {
    return x;
};

// | Exposes the underlying State implementation.
var unGen = function (v) {
    return v;
};

// | Run a random generator
var runGen = function ($48) {
    return Control_Monad_State.runState(unGen($48));
};

// | Create a random generator which uses the generator state explicitly.
var stateful = function (f) {
    return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (s) {
        return runGen(f(s))(s);
    });
};

// | Create a random generator which depends on the size parameter.
var sized = function (f) {
    return stateful(function (s) {
        return f(s.size);
    });
};

// | Modify a random generator by setting a new random seed.
var variant = function (n) {
    return function (g) {
        return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (s) {
            return runGen(g)({
                newSeed: n,
                size: s.size
            });
        });
    };
};

// | Modify a random generator by setting a new size parameter.
var resize = function (sz) {
    return function (g) {
        return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (v) {
            return Data_Functor.map(Data_Tuple.functorTuple)(function (v1) {
                return {
                    size: v.size,
                    newSeed: v1.newSeed
                };
            })(runGen(g)({
                newSeed: v.newSeed,
                size: sz
            }));
        });
    };
};
var replicateMRec = function (dictMonadRec) {
    return function (k) {
        return function (v) {
            if (k <= 0) {
                return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(Data_List_Types.Nil.value);
            };
            var go = function (v1) {
                if (v1.value1 === 0) {
                    return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(v1.value0));
                };
                return Data_Functor.mapFlipped((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(v)(function (x) {
                    return new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(new Data_List_Types.Cons(x, v1.value0), v1.value1 - 1 | 0));
                });
            };
            return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(new Data_Tuple.Tuple(Data_List_Types.Nil.value, k));
        };
    };
};

// | Create a random generator for a function type.
var repeatable = function (f) {
    return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (s) {
        return new Data_Tuple.Tuple(function (a) {
            return Data_Tuple.fst(runGen(f(a))(s));
        }, {
            newSeed: Random_LCG.lcgNext(s.newSeed),
            size: s.size
        });
    });
};

// | Perturb a random generator by modifying the current seed
var perturbGen = function (n) {
    return function (gen) {
        return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Data_Functor["void"](Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(Control_Monad_State_Class.modify(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (s) {
            var $29 = {};
            for (var $30 in s) {
                if ({}.hasOwnProperty.call(s, $30)) {
                    $29[$30] = s[$30];
                };
            };
            $29.newSeed = Random_LCG.lcgPerturb($foreign.float32ToInt32(n))(s.newSeed);
            return $29;
        })))(function () {
            return unGen(gen);
        });
    };
};
var monadRecGen = Control_Monad_State_Trans.monadRecStateT(Control_Monad_Rec_Class.monadRecIdentity);
var monadGen = Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity);

// | Create a random generator which generates a list of random values of the specified size.
var listOf = replicateMRec(monadRecGen);

// | A random generator which simply outputs the current seed
var lcgStep = (function () {
    var f = function (s) {
        return new Data_Tuple.Tuple(Random_LCG.unSeed(s.newSeed), (function () {
            var $32 = {};
            for (var $33 in s) {
                if ({}.hasOwnProperty.call(s, $33)) {
                    $32[$33] = s[$33];
                };
            };
            $32.newSeed = Random_LCG.lcgNext(s.newSeed);
            return $32;
        })());
    };
    return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(f);
})();
var lazyGen = Control_Monad_State_Trans.lazyStateT;
var functorGen = Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity);

// | A random generator which approximates a uniform random variable on `[0, 1]`
var uniform = Data_Functor.map(functorGen)(function (n) {
    return Data_Int.toNumber(n) / Data_Int.toNumber(Random_LCG.lcgM);
})(lcgStep);

// | Create a random generator which generates a vector of random values of a specified size.
var vectorOf = function (k) {
    return function (g) {
        return Data_Functor.map(functorGen)(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray))(listOf(k)(g));
    };
};

// | Run a random generator, keeping only the randomly-generated result
var evalGen = function ($49) {
    return Control_Monad_State.evalState(unGen($49));
};

// | Generate a single value using a randomly generated seed.
var randomSampleOne = function (gen) {
    return function __do() {
        var seed = Random_LCG.randomSeed();
        return evalGen(gen)({
            newSeed: seed,
            size: 10
        });
    };
};

// | Sample a random generator
var sample = function (seed) {
    return function (sz) {
        return function (g) {
            return evalGen(vectorOf(sz)(g))({
                newSeed: seed,
                size: sz
            });
        };
    };
};

// | Sample a random generator, using a randomly generated seed
var randomSample$prime = function (n) {
    return function (g) {
        return function __do() {
            var seed = Random_LCG.randomSeed();
            return sample(seed)(n)(g);
        };
    };
};

// | Get a random sample of 10 values. For a single value, use `randomSampleOne`.
var randomSample = randomSample$prime(10);

// | Create a random generator which samples a range of `Number`s i
// | with uniform probability.
var choose = function (a) {
    return function (b) {
        var unscale = function (v) {
            return v * 2.0;
        };
        var scale = function (v) {
            return v * 0.5;
        };
        var min$prime = scale(Data_Ord.min(Data_Ord.ordNumber)(a)(b));
        var max$prime = scale(Data_Ord.max(Data_Ord.ordNumber)(a)(b));
        return Data_Functor.map(functorGen)((function () {
            var $50 = Data_Semiring.add(Data_Semiring.semiringNumber)(min$prime);
            var $51 = Data_Semiring.mul(Data_Semiring.semiringNumber)(max$prime - min$prime);
            return function ($52) {
                return unscale($50($51($52)));
            };
        })())(uniform);
    };
};
var bindGen = Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity);

// | Create a random generator which selects and executes a random generator from
// | a non-empty, weighted list of random generators.
var frequency = function ($53) {
    return (function (v) {
        var xxs = new Data_List_Types.Cons(v.head, v.tail);
        var total = Data_Newtype.unwrap()(Data_Foldable.fold(Data_List_Types.foldableList)(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringNumber))(Data_Functor.map(Data_List_Types.functorList)(function ($54) {
            return Data_Monoid_Additive.Additive(Data_Tuple.fst($54));
        })(xxs)));
        var pick = function ($copy_v1) {
            return function ($copy_d) {
                return function ($copy_v2) {
                    var $tco_var_v1 = $copy_v1;
                    var $tco_var_d = $copy_d;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(v1, d, v2) {
                        if (v2 instanceof Data_List_Types.Nil) {
                            $tco_done = true;
                            return d;
                        };
                        if (v2 instanceof Data_List_Types.Cons) {
                            var $39 = v1 <= v2.value0.value0;
                            if ($39) {
                                $tco_done = true;
                                return v2.value0.value1;
                            };
                            $tco_var_v1 = v1 - v2.value0.value0;
                            $tco_var_d = d;
                            $copy_v2 = v2.value1;
                            return;
                        };
                        throw new Error("Failed pattern match at Test.QuickCheck.Gen (line 169, column 5 - line 169, column 21): " + [ v1.constructor.name, d.constructor.name, v2.constructor.name ]);
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_v1, $tco_var_d, $copy_v2);
                    };
                    return $tco_result;
                };
            };
        };
        return Control_Bind.bind(bindGen)(choose(0)(total))(function (n) {
            return pick(n)(Data_Tuple.snd(v.head))(xxs);
        });
    })(Data_List_NonEmpty.uncons($53));
};
var applyGen = Control_Monad_State_Trans.applyStateT(Data_Identity.monadIdentity);

// guaranteed a <= b
var chooseInt$prime = function (a) {
    return function (b) {
        var numB = Data_Int.toNumber(b);
        var numA = Data_Int.toNumber(a);
        var clamp = function (x) {
            return numA + $$Math.remainder(x)((numB - numA) + 1);
        };
        var choose31BitPosNumber = Data_Functor.map(functorGen)(Data_Int.toNumber)(lcgStep);
        var choose32BitPosNumber = Control_Apply.apply(applyGen)(Data_Functor.map(functorGen)(Data_Semiring.add(Data_Semiring.semiringNumber))(choose31BitPosNumber))(Data_Functor.map(functorGen)(Data_Semiring.mul(Data_Semiring.semiringNumber)(2.0))(choose31BitPosNumber));
        return Data_Functor.map(functorGen)(function ($55) {
            return Data_Int.floor(clamp($55));
        })(choose32BitPosNumber);
    };
};

// | Create a random generator which chooses uniformly distributed
// | integers from the closed interval `[a, b]`.
// | Note that very large intervals will cause a loss of uniformity.
var chooseInt = function (a) {
    return function (b) {
        var $46 = a <= b;
        if ($46) {
            return chooseInt$prime(a)(b);
        };
        return chooseInt$prime(b)(a);
    };
};

// | Create a random generator which generates an array of random values.
var arrayOf = function (g) {
    return sized(function (n) {
        return Control_Bind.bind(bindGen)(chooseInt(0)(n))(function (k) {
            return vectorOf(k)(g);
        });
    });
};
var monadGenGen = {
    chooseInt: chooseInt,
    chooseFloat: choose,
    chooseBool: Data_Functor.map(functorGen)(function (v) {
        return v < 0.5;
    })(uniform),
    resize: function (f) {
        return function (g) {
            return sized(function (s) {
                return resize(f(s))(g);
            });
        };
    },
    sized: sized,
    Monad0: function () {
        return monadGen;
    }
};

// | Create a random generator which selects and executes a random generator from
// | a non-empty array of random generators with uniform probability.
var oneOf = function (xs) {
    return Control_Bind.bind(bindGen)(chooseInt(0)(Data_Array_NonEmpty.length(xs) - 1 | 0))(function (n) {
        return Data_Array_NonEmpty.unsafeIndex()(xs)(n);
    });
};
var applicativeGen = Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity);

// | Create a random generator which generates a non-empty array of random values.
var arrayOf1 = function (g) {
    return sized(function (n) {
        return Control_Bind.bind(bindGen)(chooseInt(0)(n))(function (k) {
            return Control_Bind.bind(bindGen)(g)(function (x) {
                return Control_Bind.bind(bindGen)(vectorOf(k - 1 | 0)(g))(function (xs) {
                    return Control_Applicative.pure(applicativeGen)(Data_Maybe.fromJust()(Data_Array_NonEmpty.fromArray(Data_Array.cons(x)(xs))));
                });
            });
        });
    });
};

// | Create a random generator which selects a value from a non-empty array with
// | uniform probability.
var elements = function (xs) {
    return Control_Bind.bind(bindGen)(chooseInt(0)(Data_Array_NonEmpty.length(xs) - 1 | 0))(function (n) {
        return Control_Applicative.pure(applicativeGen)(Data_Array_NonEmpty.unsafeIndex()(xs)(n));
    });
};

// | Create a random generator for a finite enumeration.
// | `toEnum i` must be well-behaved:
// | It must return a value wrapped in Just for all Ints between
// | `fromEnum bottom` and `fromEnum top`.
var $$enum = function (dictBoundedEnum) {
    return Control_Bind.bind(bindGen)(chooseInt(Data_Enum.fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0())))(Data_Enum.fromEnum(dictBoundedEnum)(Data_Bounded.top(dictBoundedEnum.Bounded0()))))(function (i) {
        return Control_Applicative.pure(applicativeGen)(Data_Maybe.fromJust()(Data_Enum.toEnum(dictBoundedEnum)(i)));
    });
};

// | Generate a random permutation of the given array
var shuffle = function (xs) {
    return Control_Bind.bind(bindGen)(vectorOf(Data_Array.length(xs))(chooseInt(0)(Data_Bounded.top(Data_Bounded.boundedInt))))(function (ns) {
        return Control_Applicative.pure(applicativeGen)(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(Data_Array.sortBy(Data_Ord.comparing(Data_Ord.ordInt)(Data_Tuple.fst))(Data_Array.zip(ns)(xs))));
    });
};

// | Ensure that a generator only produces values that match a predicate. If
// | the predicate always returns false the generator will loop forever.
var suchThat = function (gen) {
    return function (pred) {
        var go = function (v) {
            return Control_Bind.bind(bindGen)(gen)(function (a) {
                return Control_Applicative.pure(applicativeGen)((function () {
                    var $47 = pred(a);
                    if ($47) {
                        return new Control_Monad_Rec_Class.Done(a);
                    };
                    return new Control_Monad_Rec_Class.Loop(Data_Unit.unit);
                })());
            });
        };
        return Control_Monad_Rec_Class.tailRecM(monadRecGen)(go)(Data_Unit.unit);
    };
};
var altGen = Control_Monad_State_Trans.altStateT(Data_Identity.monadIdentity)(Data_Identity.altIdentity);
module.exports = {
    unGen: unGen,
    repeatable: repeatable,
    stateful: stateful,
    variant: variant,
    suchThat: suchThat,
    sized: sized,
    resize: resize,
    choose: choose,
    chooseInt: chooseInt,
    oneOf: oneOf,
    frequency: frequency,
    arrayOf: arrayOf,
    arrayOf1: arrayOf1,
    "enum": $$enum,
    listOf: listOf,
    vectorOf: vectorOf,
    elements: elements,
    shuffle: shuffle,
    runGen: runGen,
    evalGen: evalGen,
    perturbGen: perturbGen,
    uniform: uniform,
    sample: sample,
    randomSample: randomSample,
    "randomSample'": randomSample$prime,
    randomSampleOne: randomSampleOne,
    functorGen: functorGen,
    applyGen: applyGen,
    applicativeGen: applicativeGen,
    bindGen: bindGen,
    monadGen: monadGen,
    altGen: altGen,
    monadRecGen: monadRecGen,
    lazyGen: lazyGen,
    monadGenGen: monadGenGen
};
