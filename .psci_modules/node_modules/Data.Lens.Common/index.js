
// | This module defines common lenses and prisms.
"use strict";
var Data_Lens_Lens_Tuple = require("../Data.Lens.Lens.Tuple/index.js");
var Data_Lens_Lens_Unit = require("../Data.Lens.Lens.Unit/index.js");
var Data_Lens_Prism_Either = require("../Data.Lens.Prism.Either/index.js");
var Data_Lens_Prism_Maybe = require("../Data.Lens.Prism.Maybe/index.js");

// | This is useful for when you want to restrict the type of another optic.
// | For example, suppose you have the following declarations:
// | ```purescript
// | newtype X = X Int
// | derive instance newtypeX :: Newtype X _
// | ```
// |
// | Attempting to view with the `_Newtype` optic:
// | ```purescript
// | X 42 ^. _Newtype
// | ```
// | Will result in a type error:
// | ```
// |  The inferred type
// |    forall t3 t5. Newtype t3 t5 => Int
// |  has type variables which are not mentioned in the body of the type.
// |  Consider adding a type annotation.
// | ```
// |
// | However, if we apply the `simple` function:
// | ```purescript
// |  X 42 ^. simple _Newtype
// | ```
// | We get the expected result `42`.
var simple = function (x) {
    return x;
};
module.exports = {
    simple: simple,
    "_1": Data_Lens_Lens_Tuple["_1"],
    "_2": Data_Lens_Lens_Tuple["_2"],
    first: Data_Lens_Lens_Tuple.first,
    second: Data_Lens_Lens_Tuple.second,
    united: Data_Lens_Lens_Unit.united,
    "_Left": Data_Lens_Prism_Either["_Left"],
    "_Right": Data_Lens_Prism_Either["_Right"],
    left: Data_Lens_Prism_Either.left,
    right: Data_Lens_Prism_Either.right,
    "_Just": Data_Lens_Prism_Maybe["_Just"],
    "_Nothing": Data_Lens_Prism_Maybe["_Nothing"]
};
