"use strict";
var Data_Lens_Iso = require("../Data.Lens.Iso/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");

// | An Iso between a newtype and its inner type.
// | Supports switching between different types that have instances of the
// | Newtype type class.
// | If you don't need to change types, you may have a better experience with
// | type inference if you use `simple _Newtype`.
var _Newtype = function () {
    return function () {
        return function (dictProfunctor) {
            return Data_Lens_Iso.iso(Data_Newtype.unwrap())(Data_Newtype.wrap())(dictProfunctor);
        };
    };
};

// | A variant of `_Newtype` which takes the constructor as an argument
// | and infers its inverse.
// |
// | This is useful as an aid to type inference in certain situations.
var unto = function () {
    return function (v) {
        return function (dictProfunctor) {
            return _Newtype()()(dictProfunctor);
        };
    };
};
module.exports = {
    "_Newtype": _Newtype,
    unto: unto
};
