"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Array_NonEmpty = require("../Data.Array.NonEmpty/index.js");
var Data_Array_NonEmpty_Internal = require("../Data.Array.NonEmpty.Internal/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_NonEmpty_CodeUnits = require("../Data.String.NonEmpty.CodeUnits/index.js");
var Data_String_NonEmpty_Internal = require("../Data.String.NonEmpty.Internal/index.js");
var JSURI = require("../JSURI/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String/index.js");
var URI_Common = require("../URI.Common/index.js");

// | A path segment that cannot be empty or contain the `:` character.
// | Corresponds to _segment-nz-nc_ in the spec.
var PathSegmentNZNC = function (x) {
    return x;
};

// | A path segment that cannot be empty. Corresponds to _segment-nz_ in the
// | spec.
var PathSegmentNZ = function (x) {
    return x;
};

// | A path segment. Can be empty, as this is required to represent some paths -
// | segments are joined together with slashes, so in cases where a path
// | contains multiple contiguous slashes this is represented by a group of
// | empty path segments. Corresponds to _segment_ in the spec.
var PathSegment = function (x) {
    return x;
};

// | Returns the string value for the segment without percent-decoding. Only
// | "unsafe" in the sense that values this produces may need further decoding,
// | the name is more for symmetry with the `segmentFromString`/
// | `unsafeSegmentFromString` pairing.
var unsafeSegmentToString = function (v) {
    return v;
};

// | Returns the string value for a non-empty segment without percent-decoding.
// | Only "unsafe" in the sense that values this produces may need further
// | decoding, the name is more for symmetry with the `segmentNZFromString`/
// | `unsafeSegmentNZFromString` pairing.
var unsafeSegmentNZToString = function (v) {
    return v;
};

// | Returns the string value for the non-empty-no-colon segment without
// | percent-decoding. Only "unsafe" in the sense that values this produces may
// | need further decoding, the name is more for symmetry with the
// | `segmentNZNCFromString`/`unsafeSegmentNZNCFromString` pairing.
var unsafeSegmentNZNCToString = function (v) {
    return v;
};

// | Returns the string value for a non-empty-no-colon segment, percent-decoding
// | any characters that require it.
var unsafeSegmentNZNCFromString = PathSegmentNZNC;

// | Constructs a non-empty segment value from a string directly - no
// | percent-encoding will be applied. This is useful when using a custom
// | encoding scheme for the segment, to prevent double-encoding.
var unsafeSegmentNZFromString = PathSegmentNZ;

// | Constructs a segment value from a string directly - no percent-encoding
// | will be applied. This is useful when using a custom encoding scheme for
// | the segment, to prevent double-encoding.
var unsafeSegmentFromString = PathSegment;
var showPathSegmentNZNC = {
    show: function (v) {
        return "(Segment.unsafeSegmentNZNCToString " + (Data_Show.show(Data_String_NonEmpty_Internal.showNonEmptyString)(v) + ")");
    }
};
var showPathSegmentNZ = {
    show: function (v) {
        return "(Segment.unsafeSegmentNZFromString " + (Data_Show.show(Data_String_NonEmpty_Internal.showNonEmptyString)(v) + ")");
    }
};
var showPathSegment = {
    show: function (v) {
        return "(Segment.unsafeSegmentToString " + (Data_Show.show(Data_Show.showString)(v) + ")");
    }
};

// | Returns the string value for a segment, percent-decoding any characters
// | that require it.
var segmentToString = function (v) {
    return Data_Maybe.fromJust()(JSURI["decodeURIComponent"](v));
};

// | Returns the string value for a non-empty segment, percent-decoding any
// | characters that require it.
var segmentNZToString = function (v) {
    return URI_Common["decodeURIComponent'"](v);
};

// | Constructs a non-empty-no-colon segment value from a string directly - no
// | percent-encoding will be applied. This is useful when using a custom
// | encoding scheme for the segment, to prevent double-encoding.
var segmentNZNCToString = function (v) {
    return URI_Common["decodeURIComponent'"](v);
};

// | The supported no-colon path segment characters, excluding
// | percent-encodings.
var segmentNCChar = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(URI_Common.unreserved)(URI_Common.subDelims))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("@"));

// | Constructs a non-empty-no-colon segment value from a string,
// | percent-encoding any characters that require it. Note that running this on
// | a string that has already had percent-encoding applied will double-encode
// | it, for those situations use `unsafeSegmentNZNCFromString` instead.
var segmentNZNCFromString = (function () {
    var $18 = URI_Common["printEncoded'"](segmentNCChar);
    return function ($19) {
        return PathSegmentNZNC($18($19));
    };
})();

// | The supported path segment characters, excluding percent-encodings.
var segmentChar = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(segmentNCChar)(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)(":"));

// | Constructs a segment value from a string, percent-encoding any characters
// | that require it. Note that running this on a string that has already had
// | percent-encoding applied will double-encode it, for those situations use
// | `unsafeSegmentFromString` instead.
var segmentFromString = (function () {
    var $20 = URI_Common.printEncoded(segmentChar);
    return function ($21) {
        return PathSegment($20($21));
    };
})();

// | Constructs a non-empty segment value from a string, percent-encoding any
// | characters that require it. Note that running this on a string that has
// | already had percent-encoding applied will double-encode it, for those
// | situations use `unsafeSegmentNZFromString` instead.
var segmentNZFromString = (function () {
    var $22 = URI_Common["printEncoded'"](segmentChar);
    return function ($23) {
        return PathSegmentNZ($22($23));
    };
})();

// | A printer for a _segment-nz-nc_ component of a URI.
var printSegmentNZNC = function ($24) {
    return Data_String_NonEmpty_Internal.toString(unsafeSegmentNZNCToString($24));
};

// | A printer for a _segment-nz_ component of a URI.
var printSegmentNZ = function ($25) {
    return Data_String_NonEmpty_Internal.toString(unsafeSegmentNZToString($25));
};

// | A printer for a _segment_ component of a URI.
var printSegment = unsafeSegmentToString;

// | A parser for a _segment-nz-nc_ component of a URI.
var parseSegmentNZNC = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))((function () {
    var $26 = Data_String_NonEmpty_Internal.join1With(Data_Array_NonEmpty_Internal.foldable1NonEmptyArray)("");
    return function ($27) {
        return PathSegmentNZNC($26($27));
    };
})())(Data_Array_NonEmpty.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(URI_Common.pctEncoded)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_NonEmpty_CodeUnits.singleton)(segmentNCChar))));

// | A parser for a _segment-nz_ component of a URI.
var parseSegmentNZ = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))((function () {
    var $28 = Data_String_NonEmpty_Internal.join1With(Data_Array_NonEmpty_Internal.foldable1NonEmptyArray)("");
    return function ($29) {
        return PathSegmentNZ($28($29));
    };
})())(Data_Array_NonEmpty.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(URI_Common.pctEncoded)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_NonEmpty_CodeUnits.singleton)(segmentChar))));

// | A parser for a _segment_ component of a URI.
var parseSegment = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))((function () {
    var $30 = Data_String_NonEmpty_Internal.joinWith(Data_Foldable.foldableArray)("");
    return function ($31) {
        return PathSegment($30($31));
    };
})())(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(URI_Common.pctEncoded)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_NonEmpty_CodeUnits.singleton)(segmentChar))));
var ordPathSegmentNZNC = Data_String_NonEmpty_Internal.ordNonEmptyString;
var ordPathSegmentNZ = Data_String_NonEmpty_Internal.ordNonEmptyString;
var ordPathSegment = Data_Ord.ordString;
var eqPathSegmentNZNC = Data_String_NonEmpty_Internal.eqNonEmptyString;
var eqPathSegmentNZ = Data_String_NonEmpty_Internal.eqNonEmptyString;
var eqPathSegment = Data_Eq.eqString;
module.exports = {
    segmentFromString: segmentFromString,
    segmentToString: segmentToString,
    unsafeSegmentFromString: unsafeSegmentFromString,
    unsafeSegmentToString: unsafeSegmentToString,
    parseSegment: parseSegment,
    printSegment: printSegment,
    segmentNZFromString: segmentNZFromString,
    segmentNZToString: segmentNZToString,
    unsafeSegmentNZFromString: unsafeSegmentNZFromString,
    unsafeSegmentNZToString: unsafeSegmentNZToString,
    parseSegmentNZ: parseSegmentNZ,
    printSegmentNZ: printSegmentNZ,
    segmentNZNCFromString: segmentNZNCFromString,
    segmentNZNCToString: segmentNZNCToString,
    unsafeSegmentNZNCFromString: unsafeSegmentNZNCFromString,
    unsafeSegmentNZNCToString: unsafeSegmentNZNCToString,
    parseSegmentNZNC: parseSegmentNZNC,
    printSegmentNZNC: printSegmentNZNC,
    segmentChar: segmentChar,
    segmentNCChar: segmentNCChar,
    eqPathSegment: eqPathSegment,
    ordPathSegment: ordPathSegment,
    showPathSegment: showPathSegment,
    eqPathSegmentNZ: eqPathSegmentNZ,
    ordPathSegmentNZ: ordPathSegmentNZ,
    showPathSegmentNZ: showPathSegmentNZ,
    eqPathSegmentNZNC: eqPathSegmentNZNC,
    ordPathSegmentNZNC: ordPathSegmentNZNC,
    showPathSegmentNZNC: showPathSegmentNZNC
};
