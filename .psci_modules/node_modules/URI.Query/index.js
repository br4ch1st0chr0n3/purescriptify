"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_NonEmpty_CodeUnits = require("../Data.String.NonEmpty.CodeUnits/index.js");
var Data_String_NonEmpty_Internal = require("../Data.String.NonEmpty.Internal/index.js");
var JSURI = require("../JSURI/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String/index.js");
var URI_Common = require("../URI.Common/index.js");

// | The query component of a URI.
// |
// | This type treats the entire string as an undifferentiated blob, if you
// | would like to deal with the common `?key1=value1&key2=value2` format, take
// | a look at `URI.Extra.QueryPairs`.
var Query = function (x) {
    return x;
};

// | Returns the string value for a query without percent-decoding. Only
// | "unsafe" in the sense that values this produces may need further decoding,
// | the name is more for symmetry with the `fromString`/`unsafeFromString`
// | pairing.
var unsafeToString = function (v) {
    return v;
};

// | Constructs a query value from a string directly - no percent-encoding
// | will be applied. This is useful when using a custom encoding scheme for
// | the query, to prevent double-encoding.
var unsafeFromString = Query;

// | Returns the string value for a query, percent-decoding any characters
// | that require it.
// |
// | ``` purescript
// | toString (unsafeFromString "foo") = "foo"
// | toString (unsafeFromString "foo%23bar") = "foo#bar"
// | ```
var toString = function (v) {
    return Data_Maybe.fromJust()(JSURI["decodeURIComponent"](v));
};
var showQuery = {
    show: function (v) {
        return "(Query.unsafeFromString " + (Data_Show.show(Data_Show.showString)(v) + ")");
    }
};
var semigroupQuery = Data_Semigroup.semigroupString;

// | The supported query characters, excluding percent-encodings.
var queryChar = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(URI_Common.unreserved)(URI_Common.subDelims))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)(":")))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("@")))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("/")))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("?"));

// | A printer for the query component of a URI. Will print the value with
// | a `'?'` prefix.
var print = function (v) {
    return "?" + v;
};

// | A parser for the query component of a URI. Expects values with a `'?'`
// | prefix.
var parser = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Data_Identity.monadIdentity)("?"))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))((function () {
    var $8 = Data_String_NonEmpty_Internal.joinWith(Data_Foldable.foldableArray)("");
    return function ($9) {
        return Query($8($9));
    };
})())(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_NonEmpty_CodeUnits.singleton)(queryChar))(URI_Common.pctEncoded))));
var ordQuery = Data_Ord.ordString;
var monoidQuery = Data_Monoid.monoidString;

// | Constructs a query value from a string, percent-encoding any characters
// | that require it. Note that running this on a string that has already had
// | percent-encoding applied will double-encode it, for those situations use
// | `unsafeFromString` instead.
// |
// | ``` purescript
// | fromString "foo" = unsafeFromString "foo"
// | fromString "foo#bar" = unsafeFromString "foo%23bar"
// | fromString "foo%23bar" = unsafeFromString "foo%2523bar"
// | ```
var fromString = (function () {
    var $10 = URI_Common.printEncoded(queryChar);
    return function ($11) {
        return Query($10($11));
    };
})();
var eqQuery = Data_Eq.eqString;
module.exports = {
    fromString: fromString,
    toString: toString,
    unsafeFromString: unsafeFromString,
    unsafeToString: unsafeToString,
    parser: parser,
    print: print,
    queryChar: queryChar,
    eqQuery: eqQuery,
    ordQuery: ordQuery,
    semigroupQuery: semigroupQuery,
    monoidQuery: monoidQuery,
    showQuery: showQuery
};
