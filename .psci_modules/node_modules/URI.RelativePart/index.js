"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Lens_Internal_Wander = require("../Data.Lens.Internal.Wander/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show_Generic = require("../Data.Show.Generic/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var URI_Authority = require("../URI.Authority/index.js");
var URI_Common = require("../URI.Common/index.js");
var URI_Path = require("../URI.Path/index.js");
var URI_Path_Absolute = require("../URI.Path.Absolute/index.js");
var URI_Path_NoScheme = require("../URI.Path.NoScheme/index.js");

// | The "relative part" of a relative reference.  This combines an authority
// | (optional) with a path value.
// |
// | When the authority is present a generic path representation can be used,
// | otherwise there are some restrictions on the path construction to ensure
// | no ambiguity in parsing (this is per the spec, not a restriction of the
// | library).
var RelativePartAuth = (function () {
    function RelativePartAuth(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    RelativePartAuth.create = function (value0) {
        return function (value1) {
            return new RelativePartAuth(value0, value1);
        };
    };
    return RelativePartAuth;
})();

// | The "relative part" of a relative reference.  This combines an authority
// | (optional) with a path value.
// |
// | When the authority is present a generic path representation can be used,
// | otherwise there are some restrictions on the path construction to ensure
// | no ambiguity in parsing (this is per the spec, not a restriction of the
// | library).
var RelativePartNoAuth = (function () {
    function RelativePartNoAuth(value0) {
        this.value0 = value0;
    };
    RelativePartNoAuth.create = function (value0) {
        return new RelativePartNoAuth(value0);
    };
    return RelativePartNoAuth;
})();

// | A printer for the relative-part of a URI.
var print = function (opts) {
    return function (v) {
        if (v instanceof RelativePartAuth) {
            return URI_Authority.print(opts)(v.value0) + URI_Path.print(opts.printPath(v.value1));
        };
        if (v instanceof RelativePartNoAuth) {
            return Data_Maybe.maybe("")((function () {
                var $85 = Data_Either.either(URI_Path_Absolute.print)(URI_Path_NoScheme.print);
                return function ($86) {
                    return $85(opts.printRelPath($86));
                };
            })())(v.value0);
        };
        throw new Error("Failed pattern match at URI.RelativePart (line 117, column 14 - line 121, column 79): " + [ v.constructor.name ]);
    };
};

// | A parser for the relative-part of a URI.
var parser = function (opts) {
    var withAuth = Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(RelativePartAuth.create)(URI_Authority.parser(opts)))(URI_Common.wrapParser(Data_Identity.monadIdentity)(opts.parsePath)(URI_Path.parser));
    var noAuthPath = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Maybe.Just.create)(URI_Common.wrapParser(Data_Identity.monadIdentity)(function ($87) {
        return opts.parseRelPath(Data_Either.Left.create($87));
    })(URI_Path_Absolute.parse)))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Maybe.Just.create)(URI_Common.wrapParser(Data_Identity.monadIdentity)(function ($88) {
        return opts.parseRelPath(Data_Either.Right.create($88));
    })(URI_Path_NoScheme.parse))))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value));
    var withoutAuth = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(RelativePartNoAuth.create)(noAuthPath);
    return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(withAuth)(withoutAuth);
};
var genericRelativePart = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return new RelativePartAuth(x.value0.value0, x.value0.value1);
        };
        if (x instanceof Data_Generic_Rep.Inr) {
            return new RelativePartNoAuth(x.value0);
        };
        throw new Error("Failed pattern match at URI.RelativePart (line 50, column 1 - line 50, column 91): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof RelativePartAuth) {
            return new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1));
        };
        if (x instanceof RelativePartNoAuth) {
            return new Data_Generic_Rep.Inr(x.value0);
        };
        throw new Error("Failed pattern match at URI.RelativePart (line 50, column 1 - line 50, column 91): " + [ x.constructor.name ]);
    }
};
var showRelativePart = function (dictShow) {
    return function (dictShow1) {
        return function (dictShow2) {
            return function (dictShow3) {
                return {
                    show: Data_Show_Generic.genericShow(genericRelativePart)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(URI_Authority.showAuthority(dictShow)(dictShow1)))(Data_Show_Generic.genericShowArgsArgument(dictShow2)))({
                        reflectSymbol: function () {
                            return "RelativePartAuth";
                        }
                    }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Maybe.showMaybe(dictShow3)))({
                        reflectSymbol: function () {
                            return "RelativePartNoAuth";
                        }
                    })))
                };
            };
        };
    };
};
var eqRelativePart = function (dictEq) {
    return function (dictEq1) {
        return function (dictEq2) {
            return function (dictEq3) {
                return {
                    eq: function (x) {
                        return function (y) {
                            if (x instanceof RelativePartAuth && y instanceof RelativePartAuth) {
                                return Data_Eq.eq(URI_Authority.eqAuthority(dictEq)(dictEq1))(x.value0)(y.value0) && Data_Eq.eq(dictEq2)(x.value1)(y.value1);
                            };
                            if (x instanceof RelativePartNoAuth && y instanceof RelativePartNoAuth) {
                                return Data_Eq.eq(Data_Maybe.eqMaybe(dictEq3))(x.value0)(y.value0);
                            };
                            return false;
                        };
                    }
                };
            };
        };
    };
};
var ordRelativePart = function (dictOrd) {
    return function (dictOrd1) {
        return function (dictOrd2) {
            return function (dictOrd3) {
                return {
                    compare: function (x) {
                        return function (y) {
                            if (x instanceof RelativePartAuth && y instanceof RelativePartAuth) {
                                var v = Data_Ord.compare(URI_Authority.ordAuthority(dictOrd)(dictOrd1))(x.value0)(y.value0);
                                if (v instanceof Data_Ordering.LT) {
                                    return Data_Ordering.LT.value;
                                };
                                if (v instanceof Data_Ordering.GT) {
                                    return Data_Ordering.GT.value;
                                };
                                return Data_Ord.compare(dictOrd2)(x.value1)(y.value1);
                            };
                            if (x instanceof RelativePartAuth) {
                                return Data_Ordering.LT.value;
                            };
                            if (y instanceof RelativePartAuth) {
                                return Data_Ordering.GT.value;
                            };
                            if (x instanceof RelativePartNoAuth && y instanceof RelativePartNoAuth) {
                                return Data_Ord.compare(Data_Maybe.ordMaybe(dictOrd3))(x.value0)(y.value0);
                            };
                            throw new Error("Failed pattern match at URI.RelativePart (line 49, column 1 - line 49, column 132): " + [ x.constructor.name, y.constructor.name ]);
                        };
                    },
                    Eq0: function () {
                        return eqRelativePart(dictOrd.Eq0())(dictOrd1.Eq0())(dictOrd2.Eq0())(dictOrd3.Eq0());
                    }
                };
            };
        };
    };
};

// | An affine traversal for the path component of a relative-part, this
// | succeeds when the authority is not present.
var _relPath = function (dictWander) {
    return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
        return function (f) {
            return function (a) {
                if (a instanceof RelativePartNoAuth) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(RelativePartNoAuth.create)(f(a.value0));
                };
                return Control_Applicative.pure(dictApplicative)(a);
            };
        };
    });
};

// | An affine traversal for the path component of a relative-part, this
// | succeeds when the authority is present also.
var _path = function (dictWander) {
    return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
        return function (f) {
            return function (v) {
                if (v instanceof RelativePartAuth) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(RelativePartAuth.create(v.value0))(f(v.value1));
                };
                return Control_Applicative.pure(dictApplicative)(v);
            };
        };
    });
};

// | An affine traversal for the authority component of a relative-part.
var _authority = function (dictWander) {
    return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
        return function (f) {
            return function (v) {
                if (v instanceof RelativePartAuth) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function.flip(RelativePartAuth.create)(v.value1))(f(v.value0));
                };
                return Control_Applicative.pure(dictApplicative)(v);
            };
        };
    });
};
module.exports = {
    RelativePartAuth: RelativePartAuth,
    RelativePartNoAuth: RelativePartNoAuth,
    parser: parser,
    print: print,
    "_authority": _authority,
    "_path": _path,
    "_relPath": _relPath,
    eqRelativePart: eqRelativePart,
    ordRelativePart: ordRelativePart,
    genericRelativePart: genericRelativePart,
    showRelativePart: showRelativePart,
    Authority: URI_Authority.Authority,
    IPv4Address: URI_Authority.IPv4Address,
    IPv6Address: URI_Authority.IPv6Address,
    NameAddress: URI_Authority.NameAddress,
    "_IPv4Address": URI_Authority["_IPv4Address"],
    "_IPv6Address": URI_Authority["_IPv6Address"],
    "_NameAddress": URI_Authority["_NameAddress"],
    "_hosts": URI_Authority["_hosts"],
    "_userInfo": URI_Authority["_userInfo"]
};
