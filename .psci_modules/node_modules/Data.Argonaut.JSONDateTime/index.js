"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Argonaut_Decode_Class = require("../Data.Argonaut.Decode.Class/index.js");
var Data_Argonaut_Decode_Error = require("../Data.Argonaut.Decode.Error/index.js");
var Data_Argonaut_Encode_Class = require("../Data.Argonaut.Encode.Class/index.js");
var Data_Date = require("../Data.Date/index.js");
var Data_Date_Component = require("../Data.Date.Component/index.js");
var Data_DateTime = require("../Data.DateTime/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_JSDate = require("../Data.JSDate/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_Time = require("../Data.Time/index.js");
var Data_Time_Component = require("../Data.Time.Component/index.js");
var Effect = require("../Effect/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Effect_Now = require("../Effect.Now/index.js");
var Effect_Unsafe = require("../Effect.Unsafe/index.js");
var Text_Parsing_StringParser = require("../Text.Parsing.StringParser/index.js");
var Text_Parsing_StringParser_CodePoints = require("../Text.Parsing.StringParser.CodePoints/index.js");
var JSONDateTime = function (x) {
    return x;
};
var showJSONDateTime = {
    show: function (v) {
        var time$prime$prime = Data_DateTime.time(v);
        var date$prime$prime = Data_DateTime.date(v);
        var date$prime = Data_JSDate.jsdate({
            year: Data_Int.toNumber(Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(Data_Date.year(date$prime$prime))),
            month: Data_Int.toNumber(Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(date$prime$prime)) - 1 | 0),
            day: Data_Int.toNumber(Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(Data_Date.day(date$prime$prime))),
            hour: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(Data_Time.hour(time$prime$prime))),
            minute: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(Data_Time.minute(time$prime$prime))),
            second: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(Data_Time.second(time$prime$prime))),
            millisecond: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Time.millisecond(time$prime$prime)))
        });
        var s = Effect_Unsafe.unsafePerformEffect(Data_JSDate.toISOString(date$prime));
        var y = (function () {
            var v1 = Data_String_CodeUnits.stripSuffix("Z")(s);
            if (v1 instanceof Data_Maybe.Nothing) {
                return s;
            };
            if (v1 instanceof Data_Maybe.Just) {
                var v2 = Data_String_CodeUnits.stripSuffix("0")(v1.value0);
                if (v2 instanceof Data_Maybe.Nothing) {
                    return v1.value0 + "Z";
                };
                if (v2 instanceof Data_Maybe.Just) {
                    var v3 = Data_String_CodeUnits.stripSuffix("0")(v2.value0);
                    if (v3 instanceof Data_Maybe.Nothing) {
                        return v2.value0 + "Z";
                    };
                    if (v3 instanceof Data_Maybe.Just) {
                        var v4 = Data_String_CodeUnits.stripSuffix(".0")(v3.value0);
                        if (v4 instanceof Data_Maybe.Nothing) {
                            return v3.value0 + "Z";
                        };
                        if (v4 instanceof Data_Maybe.Just) {
                            return v4.value0 + "Z";
                        };
                        throw new Error("Failed pattern match at Data.Argonaut.JSONDateTime (line 76, column 26 - line 78, column 41): " + [ v4.constructor.name ]);
                    };
                    throw new Error("Failed pattern match at Data.Argonaut.JSONDateTime (line 74, column 23 - line 78, column 41): " + [ v3.constructor.name ]);
                };
                throw new Error("Failed pattern match at Data.Argonaut.JSONDateTime (line 72, column 20 - line 78, column 41): " + [ v2.constructor.name ]);
            };
            throw new Error("Failed pattern match at Data.Argonaut.JSONDateTime (line 70, column 11 - line 78, column 41): " + [ v1.constructor.name ]);
        })();
        return y;
    }
};
var ordJSONDateTime = Data_DateTime.ordDateTime;
var nowJSONDateTime = Data_Functor.map(Effect.functorEffect)(JSONDateTime)(Effect_Now.nowDateTime);
var jsonDateTimeParser = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_CodePoints.regex("\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)"))(function (s) {
    var v = Effect_Unsafe.unsafePerformEffect(Effect_Exception["try"](Data_JSDate.parse(s)));
    if (v instanceof Data_Either.Left) {
        return Text_Parsing_StringParser.fail("Not a datetime");
    };
    if (v instanceof Data_Either.Right) {
        var v1 = Data_JSDate.toDateTime(v.value0);
        if (v1 instanceof Data_Maybe.Nothing) {
            return Text_Parsing_StringParser.fail("Not a datetime");
        };
        if (v1 instanceof Data_Maybe.Just) {
            return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(v1.value0);
        };
        throw new Error("Failed pattern match at Data.Argonaut.JSONDateTime (line 90, column 16 - line 92, column 38): " + [ v1.constructor.name ]);
    };
    throw new Error("Failed pattern match at Data.Argonaut.JSONDateTime (line 88, column 3 - line 92, column 38): " + [ v.constructor.name ]);
});
var getJSONDateTime = function (v) {
    return v;
};
var genericJSONDateTime = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var formatMonthYear = function (v) {
    var date = Data_DateTime.date(v);
    var month = Data_Show.show(Data_Date_Component.showMonth)(Data_Date.month(date));
    var year = Data_Show.show(Data_Show.showInt)(Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(Data_Date.year(date)));
    return month + (" " + year);
};
var eqJSONDateTime = Data_DateTime.eqDateTime;
var encodeJsonJSONDateTime = {
    encodeJson: (function () {
        var $38 = Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString);
        var $39 = Data_Show.show(showJSONDateTime);
        return function ($40) {
            return $38($39($40));
        };
    })()
};
var decodeJsonJSONDateTime = {
    decodeJson: function (json) {
        return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeJsonString)(json))(function (s) {
            var v = Text_Parsing_StringParser.runParser(jsonDateTimeParser)(s);
            if (v instanceof Data_Either.Left) {
                return new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Not a datetime"));
            };
            if (v instanceof Data_Either.Right) {
                return Control_Applicative.pure(Data_Either.applicativeEither)(v.value0);
            };
            throw new Error("Failed pattern match at Data.Argonaut.JSONDateTime (line 97, column 5 - line 99, column 24): " + [ v.constructor.name ]);
        });
    }
};
module.exports = {
    JSONDateTime: JSONDateTime,
    formatMonthYear: formatMonthYear,
    getJSONDateTime: getJSONDateTime,
    nowJSONDateTime: nowJSONDateTime,
    jsonDateTimeParser: jsonDateTimeParser,
    genericJSONDateTime: genericJSONDateTime,
    eqJSONDateTime: eqJSONDateTime,
    ordJSONDateTime: ordJSONDateTime,
    showJSONDateTime: showJSONDateTime,
    encodeJsonJSONDateTime: encodeJsonJSONDateTime,
    decodeJsonJSONDateTime: decodeJsonJSONDateTime
};
