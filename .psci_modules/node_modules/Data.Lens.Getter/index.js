
// | This module defines functions for working with getters.
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Data_Lens_Types = require("../Data.Lens.Types/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");

// | View the focus of a `Getter`.
var view = function (l) {
    return Data_Newtype.unwrap()(l(Control_Category.identity(Control_Category.categoryFn)));
};

// | Synonym for `view`, flipped.
var viewOn = function (s) {
    return function (l) {
        return view(l)(s);
    };
};

// | View the focus of a `Getter` in the state of a monad.
var use = function (dictMonadState) {
    return function (p) {
        return Control_Monad_State_Class.gets(dictMonadState)(function (v) {
            return viewOn(v)(p);
        });
    };
};

// | Convert a function into a getter.
var to = function (f) {
    return function (p) {
        var $3 = Data_Newtype.unwrap()(p);
        return function ($4) {
            return $3(f($4));
        };
    };
};

// | Combine two getters.
var takeBoth = function (l) {
    return function (r) {
        return to(Data_Profunctor_Strong.fanout(Control_Category.categoryFn)(Data_Profunctor_Strong.strongFn)(view(l))(view(r)));
    };
};

// | View the focus of a `Getter` and its index.
var iview = function (l) {
    return Data_Newtype.unwrap()(l(Control_Category.identity(Control_Category.categoryFn)));
};

// | View the focus of a `Getter` and its index in the state of a monad.
var iuse = function (dictMonadState) {
    return function (p) {
        return Control_Monad_State_Class.gets(dictMonadState)(iview(p));
    };
};
var cloneGetter = function (g) {
    return to(view(g));
};
module.exports = {
    viewOn: viewOn,
    view: view,
    to: to,
    takeBoth: takeBoth,
    use: use,
    iview: iview,
    iuse: iuse,
    cloneGetter: cloneGetter,
    Indexed: Data_Lens_Types.Indexed
};
