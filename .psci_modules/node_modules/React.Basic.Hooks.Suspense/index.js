"use strict";
var $foreign = require("./foreign.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Promise = require("../Control.Promise/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var React_Basic = require("../React.Basic/index.js");
var React_Basic_Hooks_Internal = require("../React.Basic.Hooks.Internal/index.js");
var InProgress = (function () {
    function InProgress(value0) {
        this.value0 = value0;
    };
    InProgress.create = function (value0) {
        return new InProgress(value0);
    };
    return InProgress;
})();
var Failed = (function () {
    function Failed(value0) {
        this.value0 = value0;
    };
    Failed.create = function (value0) {
        return new Failed(value0);
    };
    return Failed;
})();
var Complete = (function () {
    function Complete(value0) {
        this.value0 = value0;
    };
    Complete.create = function (value0) {
        return new Complete(value0);
    };
    return Complete;
})();
var Suspended = function (x) {
    return x;
};

// | Dangerously throw a `Promise` as though it were an `Error`.
// | React's Suspense API catches thrown `Promise`s and suspends
// | rendering until they complete.
var unsafeThrowPromise = (function () {
    var $6 = Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEffect);
    return function ($7) {
        return $6($7);
    };
})();
var suspense = React_Basic.element($foreign.suspense_);

// | Suspend rendering until a result exists.
// |
// | *Note: Error and loading states are thrown to React! Don't forget
// |   to implement a React error boundary and ensure `suspend` is
// |   only called from a child of at least one `suspense` parent!*
// |
// | *Note: You probably shouldn't be using this function directly. It's
// |   primarily for library authors to build abstractions on top of, as
// |   it requires things like caching mechanisms external to the
// |   component tree.*
// |
// | *Warning: React's Suspense API is still experimental. It requires
// |   some manual setup as well as specific versions of React. The API
// |   is also not final and these functions may change.*
var suspend = function (v) {
    return React_Basic_Hooks_Internal.unsafeRenderEffect(function __do() {
        var result = v();
        if (result instanceof InProgress) {
            return Control_Bind.bindFlipped(Effect.bindEffect)(unsafeThrowPromise)(Control_Promise.fromAff(Effect_Aff.joinFiber(result.value0)))();
        };
        if (result instanceof Failed) {
            return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEffect)(result.value0)();
        };
        if (result instanceof Complete) {
            return result.value0;
        };
        throw new Error("Failed pattern match at React.Basic.Hooks.Suspense (line 34, column 5 - line 39, column 27): " + [ result.constructor.name ]);
    });
};
module.exports = {
    suspend: suspend,
    Suspended: Suspended,
    InProgress: InProgress,
    Failed: Failed,
    Complete: Complete,
    suspense: suspense
};
